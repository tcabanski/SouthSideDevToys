<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedGate.Shared.SQL</name>
    </assembly>
    <members>
        <member name="T:RedGate.Shared.SQL.BackupReaderInterfaces.ITableName">
            <summary>
            Base interface for TableNames - name + schema
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ITableName.Schema">
            <summary>
            Schema Name
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ITableName.Name">
            <summary>
            Object Name
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.BackupReaderInterfaces.BackupReaderConstants">
            <summary>
            A class to hold constants that need to be visible to
            both SQL Compare, Data Compare and Backup Reader
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.BackupReaderConstants.DatabasePropertiesTableName">
            <summary>
            The name of the Properties Table - exposing things like Collation
            to BackupReader consumers.
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.BackupReaderInterfaces.BackupType">
            <summary>
            The backup type - full, differential etc.
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.BackupReaderInterfaces.BackupType.Other">
            <summary>
            Unknown or other type
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.BackupReaderInterfaces.BackupType.Full">
            <summary>
            Full backup
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.BackupReaderInterfaces.BackupType.Differential">
            <summary>
            Differential backup
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.BackupReaderInterfaces.BackupType.Log">
            <summary>
            Transaction log backup
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.BackupReaderInterfaces.BackupType.Partial">
            <summary>
            Partial backup
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.BackupReaderInterfaces.BackupType.FileGroup">
            <summary>
            File / filegroup backup
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet">
            <summary>
            A base interface for a BackupSet
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.Encrypted">
            <summary>
            Whether the Backup is Encrypted
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.DatabaseName">
            <summary>
            The Database Name that the backup was made on
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.ServerName">
            <summary>
            The Server Name that the backup was made on
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.StartDate">
            <summary>
            When the backup was started
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.EndDate">
            <summary>
            When the backup was finished
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.Name">
            <summary>
            The Name of the BackupSet
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.FirstLsn">
            <summary>
            First LogSequenceNumber in the Backup
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.LastLsn">
            <summary>
            Last LogSequenceNumber in the Backup
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.BackupType">
            <summary>
            The type of backup
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.CanHandle">
            <summary>
            Gets whether SQL Backup Reader is able to handle this BackupSet. This should be
            used by the user interface to determine whether the user is allowed to select
            this backup set.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.Size">
            <summary>
            Size (in bytes) of this backup
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet.IsIncomplete">
            <summary>
            Gets whether the backup set is a complete backup set or not. An 
            incomplete backupset containing multiple files one or more of which is missing
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection">
            <summary>
            A base interface for Backup Connections
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.PopulateAdditionalSystemTables(System.Collections.Generic.List{RedGate.Shared.SQL.BackupReaderInterfaces.ITableName})">
            <summary>
            Populate System Tables not populated by the BackupConnection by default
            </summary>
            <param name="tables">List of extra tables to populate</param>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.PopulateAdditionalSystemTables(RedGate.Shared.SQL.BackupReaderInterfaces.ITableName[])">
            <summary>
            Populate System Tables not populated by the BackupConnection by default
            </summary>
            <param name="tables">List of extra tables to populate</param>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.IsPasswordRequired">
            <summary>
            Whether a password is required
            </summary>
            <returns>True if required, false otherwise</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.GetBackupSets">
            <summary>
            Get the list of BackupSets linked to the connection.
            </summary>
            <returns>List of BackupSets</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.UseBackupSet(RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet)">
            <summary>
            Select the BackupSet to use in the connection.
            </summary>
            <param name="backupSet">The BackupSet to use</param>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.CreateSysTableCommand">
            <summary>
            Generate a command to run against the Backup Reader's system table store.
            </summary>
            <returns>The IDbCommand for execution against the system table store</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.OpenForMetaInformation">
            <summary>
            A quick open that just populates the meta information 
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.CurrentBackupSet">
            <summary>
            The current backup set being used.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.SQLServerInternalVersionNumber">
            <summary>
            SQL Server implementation dependent version number
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.Version">
            <summary>
            The external version number (e.g. 10 for SS2008)
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.CompatibilityVersion">
            <summary>
            Compatibility version number
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.DatabaseGuid">
            <summary>
            Database GUID (syscomments for SS2000 requires this)
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection.BackupTemporaryDirectory">
            <summary>
            All Backup Temp files will be placed in this directory - due to handle persistance in 
            the UI the UI can delete this directory on shutdown to eliminate all Backup Files
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.BackupReaderInterfaces.ISqlVariant">
            <summary>
            SQLVariant interface
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ISqlVariant.BaseType">
            <summary>
            Gets the SQL base type associated with this instance
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ISqlVariant.BaseTypeName">
            <summary>
            Gets the SQL name associated with this instance
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ISqlVariant.Version">
            <summary>
            Version number - always 1 currently
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ISqlVariant.Data">
            <summary>
            The buffer of actual data
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ISqlVariant.Object">
            <summary>
            Gets the object contained within this SqlVariant object
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ISqlVariant.Precision">
            <summary>
            Precision value for numeric / decimal types
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ISqlVariant.Scale">
            <summary>
            Scale value for numeric / decimal types
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ISqlVariant.MaxLength">
            <summary>
            Maximum permissible length for string and binary types
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.BackupReaderInterfaces.ISqlVariant.CollationID">
            <summary>
            Collation ID for string types
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader">
            <summary>
            BackupFile data reader interface
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlBoolean(System.Int32)">
            <summary>
            Gets the SqlBoolean value of the specified field
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The 8-bit unsigned integer value of the specified column</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlBytes(System.Int32)">
            <summary>
            Returns an array of bytes corresponding to the contents of the specified field
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlBinary(System.Int32)">
            <summary>
            Returns a SqlBinary corresponding to the contents of the specified field
            </summary>
            <param name="i">The zero-based column ordinal</param>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlChars(System.Int32)">
            <summary>
            Gets a SqlChars object representing the string value of the column
            </summary>
            <param name="i">Zero-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The date and time data value of the spcified field.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The fixed-position numeric value of the specified field.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The double-precision floating point number of the specified field.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlSingle(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The single-precision floating point number of the specified field.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The GUID value of the specified field.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 16-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 32-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 64-bit signed integer value of the specified field.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlMoney(System.Int32)">
            <summary>
            Gets the SqlMoney value of the specified field
            </summary>
            <param name="i">The zero-based index of the field to get</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            
            This also works for XML fields (SQL 2005), where the original XML string is returned.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The string value of the specified field.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlXml(System.Int32)">
            <summary>
            Gets the XML value of the specified field.
            
            Note: MSXML doesn't preserve newlines correctly - the original XML uses LF as newline,
            but the result of SqlXml.Value uses CRLF instead. This causes SQL Data Compare to consider
            them different, and hence this method should not be used where this is important.
            </summary>
            <param name="i">Zero-based index of the field</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlVariant(System.Int32)">
            <summary>
            Gets the SqlVariant value of the specified field
            </summary>
            <param name="i">Zero-based index of the field</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlTime(System.Int32)">
            <summary>
            Gets a string representation of the Sql Server 2008 SqlTime object
            </summary>
            <param name="i">Zero-based index of the field</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlDate(System.Int32)">
            <summary>
            Gets a string representation of the Sql Server 2008 SqlDate object
            </summary>
            <param name="i">Zero-based index of the field</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlDateTime2(System.Int32)">
            <summary>
            Gets a string representation of the Sql Server 2008 SqlDateTime2 object
            </summary>
            <param name="i">Zero-based index of the field</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetSqlDateTimeOffset(System.Int32)">
            <summary>
            Gets a string representation of the Sql Server 2008 SqlDateTimeOffset object
            </summary>
            <param name="i">Zero-based index of the field</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.GetDataStream(System.Int32)">
            <summary>
            Gets a stream for the field specified. The stream is not necessarily seekable, but does
            allow memory-efficient access to large BLOBs, as fragments are only read in as required.
            </summary>
            <param name="i">Zero-based index of the field</param>
            <returns>A Stream corresponding to the raw data of the field requested, or null.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.IBackupDataReader.CollationNameFromId(System.Int32)">
            <summary>
            Get the string version of the collation
            </summary>
            <param name="id">collation id</param>
            <returns>collation</returns>
        </member>
        <member name="T:RedGate.Shared.SQL.BackupReaderInterfaces.BackupSqlType">
            This enum was generated programmatically using the following T-SQL in SQL 2005:
             select 'sql' + upper (substring (name, 1, 1)) + substring(name, 2, len(name)-1) + 
             ' = ' + convert (varchar(10), xtype) + ',' from systypes order by xtype
            
            (and then unknown added as well)
            A list of all the types exposed by SQL Server
        </member>
        <member name="T:RedGate.Shared.SQL.BackupReaderInterfaces.BackupSqlTypeHelper">
            <summary>
            Types Helper
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.BackupSqlTypeHelper.BackupSqlTypeToType(RedGate.Shared.SQL.BackupReaderInterfaces.BackupSqlType)">
            <summary>
            Convert BackupSqlType to a C# Type
            </summary>
            <param name="sqlType"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.SQL.BackupReaderInterfaces.BackupSqlTypeHelper.BackupSqlTypeToString(RedGate.Shared.SQL.BackupReaderInterfaces.BackupSqlType)">
            <summary>
            Get string rep of BackupSqlType
            </summary>
            <param name="sqlType"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.Shared.SQL.DBConnectionInformation">
            <summary>
            Contains all the information needed to connect to a SQL Server database.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.DBConnectionInformation.#ctor(System.String,System.String)">
            <summary>
            Constructs a new DBConnectionInformation object using integrated authentication (also known as Windows authentication).
            </summary>
            <param name="serverName">The server to connect to.</param>
            <param name="databaseName">The database to connect to.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.DBConnectionInformation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs a new DBConnectionInformation object using SQL Server authentication.
            </summary>
            <param name="serverName">The server to connect to.</param>
            <param name="databaseName">The database to connect to.</param>
            <param name="userName">The user to connect as.</param>
            <param name="password">The password to use.</param>
        </member>
        <member name="P:RedGate.Shared.SQL.DBConnectionInformation.ServerName">
            <summary>
            The server to connect to.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.DBConnectionInformation.DatabaseName">
            <summary>
            The database to connect to.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.DBConnectionInformation.IntegratedSecurity">
            <summary>
            If true, integrated authentication will be used. If false, SQL Server authentication will be used.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.DBConnectionInformation.UserName">
            <summary>
            The user to connect as if using SQL Server authentication.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.DBConnectionInformation.Password">
            <summary>
            The password to use if using SQL Server authentication.
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.IDataSource">
            <summary>
            Represents a database data source.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.IDataSource.IsDifferentSource(RedGate.Shared.SQL.IDataSource)">
            <summary>Compares this instance with the specified <see cref="T:RedGate.Shared.SQL.IDataSource"/>.</summary>
            <param name="newDataSource">The data source to compare with.</param>
            <returns><em>True</em> if the <see cref="T:RedGate.Shared.SQL.IDataSource"/>s are different.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.IDataSource.Clone">
            <summary>
            Creates a clone of this <see cref="T:RedGate.Shared.SQL.IDataSource"/>.
            </summary>
            <returns>A clone of this <see cref="T:RedGate.Shared.SQL.IDataSource"/>.</returns>
        </member>
        <member name="P:RedGate.Shared.SQL.IDataSource.ServerName">
            <summary>
            Gets or sets the data source server name.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.IDataSource.DatabaseName">
            <summary>
            Gets or sets the data source database name.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.IDataSource.IsWriteable">
            <summary>
            Gets a value indicating if this data source can be written to.
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.DataSource">
            <summary>
            Represents a database data source.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.DataSource.IsDifferentSource(RedGate.Shared.SQL.IDataSource)">
            <summary>Compares this instance with the specified <see cref="T:RedGate.Shared.SQL.DataSource"/>.</summary>
            <param name="newDataSource">The data source to compare with.</param>
            <returns><em>True</em> if the <see cref="T:RedGate.Shared.SQL.DataSource"/>s are different.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.DataSource.Clone">
            <summary>Creates a clone of the current DataSource.</summary>
        </member>
        <member name="M:RedGate.Shared.SQL.DataSource.Deserialize(System.Int32,RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>
            This method deserializes the object using the specified <see cref="T:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter"/>.
            </summary>
            <param name="versionId">The version of the serialized data.</param>
            <param name="formatter">The serialization formatter to use.</param>
            <returns><em>True</em> if deserialized successfully, <em>false</em> if deserialization fails or <paramref name="versionId"/> is not recognised.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.DataSource.Serialize(RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>
            Serializes this object using the specified <see cref="T:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter"/>.
            </summary>
            <param name="formatter">The serialization formatter to use.</param>
        </member>
        <member name="P:RedGate.Shared.SQL.DataSource.ServerName">
            <summary>Gets or sets the name of the SQL Server.</summary>
        </member>
        <member name="P:RedGate.Shared.SQL.DataSource.DatabaseName">
            <summary>Gets or sets the name of the database.</summary>
        </member>
        <member name="P:RedGate.Shared.SQL.DataSource.IsWriteable">
            <summary>
            Returns <em>true</em> if this <see cref="T:RedGate.Shared.SQL.DataSource"/> can be written to.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.DataSource.Version">
            <summary>
            Gets the accepted object version number for this object.
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.ExecutionBlock.Batch">
            <summary>
            A class representing a batch of SQL statements.
            </summary>
            <remarks>
            A batch is a set of SQL statements that can be executed on a SQL Server. The
            batch can contain more than one SQL statement, but this is not usually the case. A
            batch can contain more than one line (for example, the SQL to create a stored procedure
            might contain 100 lines).
            </remarks>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.Batch.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="contents">The SQL statement that the batch contains.</param>
            <param name="repeating">The SQL statement that the batch contains.</param>
            <param name="marker">True if the SQL statement should not be executed but is merely a marker (eg a GO statement).</param>
            <param name="extraCRLF">True if an extra CRLF has been appended to the SQL statement.</param>
            <param name="cancelAllRepeating">True if want to cancel all repeat blocks.</param>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.Batch.ExtraCRLF">
            <summary><em>True</em> if an extra CRLF has been appended to the batch.</summary>
            <remarks>
            Sometimes the definitions of stored procedures, views, and so on, do not end in a
            CRLF. If executed in SQL Query Analyzer, an extra CRLF will be appended. If this
            flag is set, the extra CRLF will be stripped when the script is run using
            <see cref="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.ExecuteBlock(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,System.String,System.String,System.Boolean,System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.Batch.Marker">
            <summary><em>True</em> if this batch is a separator (for example, a GO statement).</summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.Batch.Repeating">
            <summary>
            <em>True</em> if the contents of the batch must be executed every time a command
            is executed.
            </summary>
            <remarks>
            This is set to <em>true</em> if a variable declaration is made, because the
            variable must be declared at the beginning of every statement that is executed.
            </remarks>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.Batch.CancelAllRepeating">
            <summary>
            Removes all currently set <see cref="P:RedGate.Shared.SQL.ExecutionBlock.Batch.Repeating"/> properties if set
            to <em>true</em>.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.Batch.Contents">
            <summary>The contents of the batch.</summary>
        </member>
        <member name="T:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor">
            <summary>
            Runs the SQL code in an <see cref="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock"/> on the SQL Server. This action can be
            cancelled.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.ExecuteBlock(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,System.String,System.String)">
            <summary>
            Runs a block of SQL code contained in an ExecutionBlock using integrated
            security.
            </summary>
            <remarks>
            Feedback is provided via the Status event handler. See <see cref="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.ExecuteBlock(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,System.String,System.String,System.Boolean,System.String,System.String)"/> for more details.
            </remarks>
            <param name="block">The block of SQL code to run.</param>
            <param name="server">The SQL Server on which to run the code.</param>
            <param name="database">The database on which to run the code.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.GetLast500Errors">
            <summary>
            Returns the last 500 errors from the
            <see cref="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.ExecuteBlock(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,System.String,System.String,System.Boolean,System.String,System.String)"/> method.
            </summary>
            <returns>An array containing the last 500 errors.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.ExecuteBlock(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.Shared.SQL.DBConnectionInformation)">
            <summary>Runs a block of SQL code contained in an ExecutionBlock.</summary>
            <remarks>
            Feedback is provided via the Status event handler.
            <para>See <see cref="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL"/> and <see cref="M:RedGate.SQLCompare.Engine.BuildFromDifferences"/> for code samples.
            </para>
            </remarks>
            <param name="block">The block of SQL code to run.</param>
            <param name="connection">The connection information to use.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.ExecuteBlock(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>Runs a block of SQL code contained in an ExecutionBlock.</summary>
            <remarks>
            Feedback is provided via the Status event handler.
            <para>See <see cref="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL"/> and <see cref="M:RedGate.SQLCompare.Engine.BuildFromDifferences"/> for code samples.
            </para>
            </remarks>
            <param name="block">The block of SQL code to run.</param>
            <param name="server">The SQL Server on which to run the code.</param>
            <param name="database">The database on which to run the code.</param>
            <param name="integratedSecurity"><em>True</em> to use integrated security.</param>
            <param name="userName">The user name to use to connect to the SQL Server.</param>
            <param name="password">The password to use to connect to the SQL Server.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.CancelOperation">
            <summary>Cancels the current operation.</summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.OnStatus(RedGate.Shared.Utils.StatusEventArgs)">
            <summary>
            Fires the Status event.
            </summary>
            <param name="e">The <see cref="T:RedGate.Shared.Utils.StatusEventArgs"/> object to pass to any event handlers.</param>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.LastCommandText">
            <summary>
            The last SQL command to be executed from the <see cref="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.ExecuteBlock(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,System.String,System.String,System.Boolean,System.String,System.String)"/> method.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.Status">
            <summary>The event handler for status events.</summary>
        </member>
        <member name="T:RedGate.Shared.SQL.ExecutionBlock.BlockSaver">
            <summary>
            Saves BlockExecutors using <see cref="T:RedGate.Shared.Utils.ICancellable">ICancellable</see>. This class
            writes the contents of an Execution block to disk. The caller can specify the file
            name and the type of encoding.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.#ctor">
            <summary>
            Default constructor. You must set the FileName, EncodingType, and ExecutionBlock
            before the BlockSaver can be run.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.#ctor(System.String,RedGate.Shared.Utils.IO.EncodingType,RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock)">
            <summary>Constructs a BlockSaver with all the parameters specified.</summary>
            <param name="fileName">The file name to use.</param>
            <param name="encoding">The type of encoding to use.</param>
            <param name="block">The block of SQL code to use.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.#ctor(System.String,RedGate.Shared.Utils.IO.EncodingType,RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,System.Boolean)">
            <summary>Constructs a BlockSaver with all the parameters specified.</summary>
            <param name="fileName">The file name to use.</param>
            <param name="encoding">The type of encoding to use.</param>
            <param name="block">The block of SQL code to use.</param>
            <param name="appendToFile">Whether the append the block to the file (if it exists) or whether to create a new file (and overwrite existing file)</param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.SaveToFile">
            <summary>
            Saves a copy of the ExecutionBlock to a text file with the given encoding. If the file exists, it will be overwritten.
            This function is not thread safe.
            </summary>
            <exception cref="T:RedGate.Shared.Utils.OperationCancelledException">The operation was cancelled.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.FileName"/> has not been set.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occured.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory location specified by <see cref="P:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.FileName"/> is invalid.</exception>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.CancelOperation">
            <summary>Cancels the operation (used by <see cref="T:RedGate.Shared.Utils.ICancellable"/>).</summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.OnStatus(RedGate.Shared.Utils.StatusEventArgs)">
            <summary>
            Fires the Status event
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.ExecutionBlock">
            <summary>Sets the ExecutionBlock. You should call this only once.</summary>
            <exception cref="T:System.ArgumentException">If <em>set</em>, and ExecutionBlock has already been set, or <em>get</em>, and ExecutionBlock has not been set.</exception>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.EncodingType">
            <summary>Sets the EncodingType. You should call this only once.</summary>
            <exception cref="T:System.ArgumentException">If <em>set</em>, and EncodingType has already been set, or <em>get</em>, and EncodingType has not been set.</exception>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.AppendToFile">
            <summary>
            Whether the block is appended to the exisitng file (if it exists) or
            whether a new file is always written.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.FileName">
            <summary>Sets the FileName. You should call this only once.</summary>
            <exception cref="T:System.ArgumentException">If <em>set</em>, and FileName has already been set, or <em>get</em>, and FileName has not been set.</exception>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.BlockSaver.Status">
            <summary>Cancellable Status Handler (used by <see cref="T:RedGate.Shared.Utils.ICancellable">ICancellable</see>).</summary>
        </member>
        <member name="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock">
            <summary>A series of SQL batches to be executed.</summary>
            <remarks>
            	<para>An ExecutionBlock contains a series of SQL batches that can be executed
                against a SQL database. It is essentially a wrapper over a text file with extra
                information about batch markers (GO statements) and statements that need to be
                repeated before a batch is run (such as variable declarations).</para>
            	<para>
                    An ExecutionBlock contains <see cref="T:RedGate.Shared.SQL.ExecutionBlock.Line"/> objects which in turn
                    contain <see cref="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.GetFileStream"/> objects.
                </para>
            	<para>
                    The underlying stream can be accessed from
                    <see cref="!:RedGate.SQL.Shared.ExecutionBlock.GetFileStream">M</see>
            	</para>
            	<para>
                    ExecutionBlock objects are created by
                    <see cref="!:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL"/>.
                    There should be no need to create an ExecutionBlock manually.
                </para>
            	<para>
                    It is essential to call the <see cref="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.Dispose(System.Boolean)"/> method of ExecutionBlock
                    objects to ensure temporary files are deleted.
                </para>
            </remarks>
        </member>
        <member name="T:RedGate.Shared.SQL.ExecutionBlock.IBlockWriter">
            <summary>
            Represents a class that can store blocks of text strings.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.IBlockWriter.AddBatch(System.String)">
            <summary>
            For internal use.
            </summary>
            <param name="batch"></param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.IBlockWriter.AddBatchMarker">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.IBlockWriter.BatchWritten">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.#ctor">
            <summary>
            Initializes a new instance of the ExecutionBlock class without compression
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ExecutionBlock class with an empty name
            </summary>
            <param name="useCompression">Indicates if the underlying streams should be compressed</param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock"/> class with the specified name
            </summary>
            <param name="name">The name of this <see cref="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock"/></param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.#ctor(System.String,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock"/> class with the specified name
            </summary>
            <param name="name">The name of this <see cref="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock"/></param>
            <param name="useCompression">Indicates if the underlying streams should be compressed</param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.AddBatch(System.String)">
            <summary>Adds a batch of SQL code.</summary>
            <param name="batch">The SQL statement to add.</param>
            <exception cref="T:System.InvalidOperationException">This execution block is in read mode</exception>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.AddBatch(System.String,System.Boolean)">
            <summary>Adds a batch of SQL code to be repeated on every execution.</summary>
            <param name="batch">The SQL statement that the batch contains.</param>
            <param name="repeating">
            	<em>True</em> if the batch is to be repeated every time it is executed (for
            example, for a variable declaration).
            </param>
            <exception cref="T:System.InvalidOperationException">This execution block is in read mode</exception>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.AddBatchMarker">
            <summary>Adds a default BatchMarker.</summary>
            <exception cref="T:System.InvalidOperationException">This execution block is in read mode</exception>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.AddBatchMarker(System.Boolean)">
            <summary>Adds a GO statement as a batch marker.</summary>
            <exception cref="T:System.InvalidOperationException">This execution block is in read mode</exception>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.GetLine(System.Int64)">
            <summary>Gets a line of SQL.</summary>
            <returns>A line of SQL.</returns>
            <param name="index">The index of the line to get.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.GetBatch(System.Int64)">
            <summary>Gets a batch of SQL.</summary>
            <returns>A batch of SQL.</returns>
            <param name="index">The index of the batch to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is not valid</exception>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.GetFileStream">
            <summary>Returns a stream to the underlying SQL text file.</summary>
            <returns>A stream.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.GetString">
            <summary>Returns the contents of the ExecutionBlock.</summary>
            <returns>A large SQL statement.</returns>
            <remarks>
            If the ExecutionBlock contains a lot of SQL code, this method can cause virtual
            memory problems; you are recommended to use GetFileStream instead.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.StopWriting">
            <summary>Indicates that writing has finished.</summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.ToString">
            <summary>Returns the contents of the ExecutionBlock.</summary>
            <returns>A large SQL statement.</returns>
            <remarks>
            If the ExecutionBlock contains a lot of SQL code, this method can cause virtual
            memory problems; you are recommended to use GetFileStream instead.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.SaveToFile(System.String,RedGate.Shared.Utils.IO.EncodingType)">
            <summary>Saves a copy of the ExecutionBlock to a text file with the given encoding.</summary>
            <param name="fileName">The name of the file.</param>
            <param name="encoding">The encoding to use.</param>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.Name">
            <summary>
            Gets or sets the name of the block
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.CharCount">
            <summary>The number of characters in the <see cref="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock"/></summary>
            <remarks>
            Note that this is not always the same as the number of bytes because of Unicode issues
            </remarks>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.BatchWritten">
            <summary>For internal use only.</summary>
            <exclude/>
            <excludetoc />
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.MaxLineLength">
            <summary>The maximum length of a line.</summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.BatchCount">
            <summary>The number of batches.</summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock.LineCount">
            <summary>The number of lines.</summary>
        </member>
        <member name="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlockPrinter">
            <summary>
            Class that provides a method for printing an <see cref="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock"/> onto standard output.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlockPrinter.PrintExecutionBlock(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock)">
            <summary>
            Prints the SQL script wrapped by the supplied <see cref="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock"/> to standard output.
            </summary>
            <param name="block">The <see cref="T:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock"/> to write onto standard output.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.ExecutionBlockPrinter.PrintExecutionBlock(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,System.String,System.Boolean)">
            <summary>
            Prints the SQL script wrapped by the supplied execution block to the specified file.
            If the supplied filename is null the method returns without taking any action.  If the
            value of filename is set to 'stdout' the script will be written to standard output.
            </summary>
            <param name="block">execution block.</param>
            <param name="filename">filename to which SQL script should be written.</param>
            <param name="force">true to force writing of script even if specified file exists, if set to false an IOException will be thrown if the specified output file already exists.</param>
            <exception cref="T:System.IO.IOException">if an error occurs writing to the file.</exception>
        </member>
        <member name="T:RedGate.Shared.SQL.ExecutionBlock.IExtendedBlockWriter">
            <summary>
            Represents a class that can store blocks of text strings and provide access to arbitary lines within the resulting file stream.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.IExtendedBlockWriter.GetLine(System.Int64)">
            <summary>
            Get a line of SQL.
            </summary>
            <param name="lineIndex">The index of the line to get.</param>
            <returns>A line of SQL.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.IExtendedBlockWriter.GetFileStream">
            <summary>
            Returns a stream to the underlying SQL text file.
            </summary>
            <returns>A stream.</returns>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.IExtendedBlockWriter.MaxLineLength">
            <summary>
            The maximum length of a line.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.IExtendedBlockWriter.LineCount">
            <summary>
            The number of lines.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.IExtendedBlockWriter.CharCount">
            <summary>
            The number of characters in the ExecutionBlock.
            </summary>
            <remarks>
            Note that this isn't necessarily the same as the number of bytes because of Unicode issues.
            </remarks>
        </member>
        <member name="T:RedGate.Shared.SQL.ExecutionBlock.Line">
            <summary>
            Represents a single line of SQL.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.ExecutionBlock.Line.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.ExecutionBlock.Line"/> class.
            </summary>
            <param name="contents">The contents of the line.</param>
            <param name="startIndex"></param>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.Line.Contents">
            <summary>
            The contents of the line.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.ExecutionBlock.Line.StartIndex">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.ServerVersion">
            <summary>
            Basic SQL Server version encapsulation
            </summary>
            <remarks>Do not modify this code as it's compatible with .NET 2</remarks>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.ServerVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.ServerVersion"/> class with the specified major and minor version
            </summary>
            <param name="major">The major version</param>
            <param name="minor">The major version</param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.ServerVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.ServerVersion"/> class with the specified major, minor and build versions
            </summary>
            <param name="major">The major version</param>
            <param name="minor">The minor version</param>
            <param name="buildNumber">The build version</param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.ServerVersion.ToString">
            <summary>
            Returns a <see cref="!:String"/> representing the current <see cref="T:RedGate.Shared.SQL.Server.ServerVersion"/>.
            </summary>
            <returns>A <see cref="!:String"/> representing the current <see cref="T:RedGate.Shared.SQL.Server.ServerVersion"/>.</returns>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.ServerVersion.Major">
            <summary>
            Gets and sets the major number
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.ServerVersion.Minor">
            <summary>
            Gets and sets the minor number
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.ServerVersion.BuildNumber">
            <summary>
            Gets and sets the build number
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.SQLDatabaseStatus">
            <summary>
            Represents the state of a SQL Server database
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLDatabaseStatus.None">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLDatabaseStatus.OffLine">
            <summary>
            SQL Database is offline
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLDatabaseStatus.Suspect">
            <summary>
            SQL Database is suspect
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLDatabaseStatus.NotRecoveredYet">
            <summary>
            SQL Database has not been recovered yet
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLDatabaseStatus.InRecovery">
            <summary>
            SQL Database in recovery
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLDatabaseStatus.CrashedWhileLoading">
            <summary>
            SQL Database Crashed while loading....
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLDatabaseStatus.SystemOwned">
            <summary>
            System Database owned by SQL, like master
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLDatabaseStatus.UserOwned">
            <summary>
            user Database owned by SQL, like NorthWind
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.SQLDatabase">
            <summary>
            A simple encapsulation of a SQL Database 
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLDatabase.#ctor(System.String,System.Int32,System.Int32,System.Byte[],RedGate.Shared.SQL.Server.SQLServerVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLDatabase"/> class
            </summary>
            <param name="databaseName">The database name</param>
            <param name="compatabilityMode">The database compatability mode</param>
            <param name="sqlStatusValue">The active status flags for this database (see sys.sysdatabases Books Online entry)</param>
            <param name="sid">System ID of the database creator</param>
            <param name="version">The hosting SQL Server version</param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLDatabase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representing the current <see cref="T:RedGate.Shared.SQL.Server.SQLDatabase"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representing the current <see cref="T:RedGate.Shared.SQL.Server.SQLDatabase"/>.</returns>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLDatabase.DatabaseName">
            <summary>
            Getter of the name of the database
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLDatabase.CompatabilityMode">
            <summary>
            The compatability of database
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLDatabase.Status">
            <summary>
            Current Status of the database
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLDatabase.ServerVersion">
            <summary>
            Gets the version number of SQL Server.
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.SQLDatabases">
            <summary>
            A collection of <see cref="T:RedGate.Shared.SQL.Server.SQLDatabase"/> objects
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLDatabases.GetDatabases">
            <summary>
            Gets a list of <see cref="T:RedGate.Shared.SQL.Server.SQLDatabase"/> names in this collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLDatabases.Item(System.String)">
            <summary>
            Retrieves the first <see cref="T:RedGate.Shared.SQL.Server.SQLDatabase"/> found with the specified <paramref name="databaseName"/>
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.SQLVersion">
            <summary>
            Enumeration of known SQL Server versions
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLVersion.Unknown">
            <summary>
            SQL Server version could not be determined.
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLVersion.Min">
            <summary>
            Minimum SQL Server version.
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLVersion.SqlServer6">
            <summary>
            SQL Server 6.
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLVersion.SqlServer7">
            <summary>
            SQL Server 7.
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLVersion.SqlServer2000">
            <summary>
            SQL Server 2000.
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLVersion.SqlServer2005">
            <summary>
            SQL Server 2005 
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLVersion.SqlServer2008">
            <summary>
            SQL Server 2008
            </summary>
        </member>
        <member name="F:RedGate.Shared.SQL.Server.SQLVersion.Max">
            <summary>
            Maximum SQL Server version.
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.SQLServer">
            <summary>
            Represents a SQL Server
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServer"/> class to use integrated security
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.#ctor(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServer"/> class
            </summary>
            <param name="integratedSecurity">If <em>true</em>, integrated security will be used to connect to the server</param>
            <param name="server">The server to connect to</param>
            <param name="username">The username to use when connecting to the server</param>
            <param name="password">The password to use when connecting to the server</param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.DoubleQuotes(System.String)">
            <summary>
            For connection strings if both single- and double-quotes are used in
            a value each occurrence of a quote mark must be doubled to escape it
            in the value.  This method takes the source string and doubles any
            quotemarks encountered.
            </summary>
            <param name="source">Source string.</param>
            <returns>String with any quote marks (either single or double) doubled.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.QuoteThis(System.String)">
            <summary>
            Deals with the fact that values in connection strings can contain single- and
            double-quotes, and also semi-colons.  Will return an appropriately quoted string
            that can be used without problems as part of a connection string.
            </summary>
            <param name="source">Source string.</param>
            <returns>Appropriately quoted string (note that the source string may not need to be quoted at all in which case the original source string is returned).</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.GetConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            Gets an appropriate SQL Server connection string that can be used, for example,
            with ADO.NET.
            </summary>
            <remarks>
            To use integrated security (recommended) you should specify a null username.
            </remarks>
            <returns>A suitable SQL Server connection string.</returns>
            <param name="server">The name of the SQL Server.</param>
            <param name="database">
            The name of the database, or <em>null</em> if you do not want to use a default
            database.
            </param>
            <param name="username">
            The SQL Server user name, or <em>null</em> if you are using integrated
            security.
            </param>
            <param name="password">The password corresponding to SQL Server user name.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.GetConnectionString(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets an appropriate SQL Server connection string that can be used, for example,
            with ADO.NET.
            </summary>
            <remarks>
            To use integrated security (recommended), specify a <em>null</em> user
            name.
            </remarks>
            <returns>A suitable SQL Server connection string.</returns>
            <param name="server">The name of the SQL Server</param>
            <param name="database">
            The name of the database, or <em>null</em> if you do not want to use a default
            database.
            </param>
            <param name="username">
            The SQL Server user name, or <em>null</em> if you are using integrated
            security.
            </param>
            <param name="password">The password corresponding to SQL Server user name.</param>
            <param name="appName">The application name for a customized application.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.GetVersion">
            <summary>
            Gets the version of the specified SQL Server.
            </summary>
            <remarks>
            If you are using integrated security, specify a <em>null</em> user name and
            password. You must specify at least a user name to use SQL Server
            authentication.
            </remarks>
            <returns>SQL Server version.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">If an error occurs whilst trying to determine the SQL Server version.</exception>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.GetServerDatabaseVersion(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Gets the SQL Server database version of the specified database
            </summary>
            <remarks>This method assumes that the SqlConnection is already open and will be disposed of by the callee.</remarks>
            <param name="connection">The open <see cref="!:SQLConnection"/> to use</param>
            <param name="databaseName">The database name to get the version number of</param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.GetDatabases">
            <summary>Returns a list of databases that exist on the SQL Server.</summary>
            <returns>An array of database names.</returns>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.GetDatabases(System.Boolean)">
            <summary>Gets a list of databases given SQL Server information.</summary>
            <returns>An array of database names.</returns>
            <param name="forceRefresh"><em>True</em> to force a reload of the database names.</param>
            <exception cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException">The <see cref="P:RedGate.Shared.SQL.Server.SQLServer.Server"/> name, <see cref="P:RedGate.Shared.SQL.Server.SQLServer.Username"/> or <see cref="P:RedGate.Shared.SQL.Server.SQLServer.Password"/> are invalid</exception>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.GetDatabasesEx(System.Boolean)">
            <summary>Gets a list of databases given SQL Server information.</summary>
            <returns>A <see cref="T:RedGate.Shared.SQL.Server.SQLDatabases"/> object containing the databases found</returns>
            <param name="forceRefresh"><em>True</em> to force a reload of the database names.</param>
            <exception cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException">The <see cref="P:RedGate.Shared.SQL.Server.SQLServer.Server"/> name, <see cref="P:RedGate.Shared.SQL.Server.SQLServer.Username"/> or <see cref="P:RedGate.Shared.SQL.Server.SQLServer.Password"/> are invalid</exception>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.GetDatabases(System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>Gets the list of available databases.</summary>
            <returns>An array of database names.</returns>
            <param name="server">The name of the SQL Server.</param>
            <param name="username">
            The SQL Server user name, or <em>null</em> if you are using integrated
            security.
            </param>
            <param name="password">The password corresponding to SQL Server user name.</param>
            <param name="forceRefresh"><em>True</em> to force a reload of the database names.</param>
            <param name="integratedSecurity"/>
            <exception cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException">The <paramref name="server"/>, <paramref name="username"/> or <paramref name="password"/> are invalid</exception>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServer.GetDatabasesEx(System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>Gets a list of the available databases.</summary>
            <returns>A <see cref="T:RedGate.Shared.SQL.Server.SQLDatabases"/> object containing the databases found</returns>
            <param name="server">The name of the SQL Server.</param>
            <param name="username">
            The SQL Server user name, or <em>null</em> if you are using integrated
            security.
            </param>
            <param name="password">The password corresponding to SQL Server user name.</param>
            <param name="forceRefresh"><em>True</em> to force a reload of the database names.</param>
            <param name="integratedSecurity"><em>True</em> to use integrated security</param>
            <exception cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException">The <paramref name="server"/>, <paramref name="username"/> or <paramref name="password"/> are invalid</exception>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLServer.Server">
            <summary>
            Gets and sets the SQL Server to connect to
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLServer.Username">
            <summary>
            Gets and sets the username to use when connecting to the server
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLServer.Password">
            <summary>
            Gets and sets the password to use when connecting to the server
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLServer.IntegratedSecurity">
            <summary>
            Gets and sets a value indicating whether to use integrated security when connecting to the server
            </summary>
            <remarks>If set to <em>true</em>, the username and password fields will be cleared</remarks>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.SQLServerDatabaseVersion">
            <summary>
            SQL database version encapsulation
            </summary>
            <remarks>This also stores the hosting SQL Server version</remarks>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.SQLServerVersion">
            <summary>
            SQL Server version encapsulation
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerVersion.#ctor(RedGate.Shared.SQL.Server.ServerVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.ServerVersion"/> class using the values in the specified <see cref="T:RedGate.Shared.SQL.Server.SQLServerVersion"/> object and an empty <see cref="P:RedGate.Shared.SQL.Server.SQLServerVersion.DecriptionGuid"/>
            </summary>
            <param name="src">The source <see cref="T:RedGate.Shared.SQL.Server.ServerVersion"/></param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServerVersion"/> class using the specified major, minor and build versions and an empty <see cref="P:RedGate.Shared.SQL.Server.SQLServerVersion.DecriptionGuid"/>
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="buildNumber"></param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerVersion.CreateSQLServerVersion(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServerVersion"/> class from the specified string
            </summary>
            <param name="versionString">A version string in the format xx.yy.zzzz</param>
            <returns>A <see cref="T:RedGate.Shared.SQL.Server.SQLServerVersion"/> object representing the version, or a zero version if the string is in an invalid format</returns>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLServerVersion.DecriptionGuid">
            <summary>
            Gets and sets the decryption GUID to use for this server
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLServerVersion.CanDecrypt">
            <summary>
            <em>True</em> if the decryption guid is not empty
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerDatabaseVersion.#ctor(RedGate.Shared.SQL.Server.SQLServerVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServerDatabaseVersion"/> class using the specified <see cref="T:RedGate.Shared.SQL.Server.SQLServerVersion"/>
            </summary>
            <param name="src">The hosted SQL Server version</param>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLServerDatabaseVersion.CompatabilityLevel">
            <summary>
            Gets and sets the database compatability level
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException">
            <summary>
            Exception that can be generated when locating SQL Servers/SQL Instances.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerDiscoveryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException"/> class.
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerDiscoveryException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException"/> class with a specified server and database name.
            </summary>
            <param name="server">
            Name of SQL Server instance for which exception occurred.
            <strong>null</strong> is an acceptable value.
            </param>
            <param name="database">
            Name of database for which exception occurred. <strong>null</strong>
            is an acceptable value.
            </param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerDiscoveryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerDiscoveryException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException"/> class
            with a specified error message, server, and database name.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="server">
            Name of SQL Server instance for which exception occurred.
            <strong>null</strong> is an acceptable value.
            </param>
            <param name="database">
            Name of database for which exception occurred. <strong>null</strong>
            is an acceptable value.
            </param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerDiscoveryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerDiscoveryException.#ctor(System.String,System.Exception,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException"/> class with a specified error message, 
            reference to the inner exception that is the cause of this exception, server, and database name.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="server">
            Name of SQL Server instance for which exception occurred.
            <strong>null</strong> is an acceptable value.
            </param>
            <param name="database">
            Name of database for which exception occurred. <strong>null</strong>
            is an acceptable value.
            </param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerDiscoveryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.SQL.Server.SQLServerDiscoveryException"/> class with serialized data. 
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerDiscoveryException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLServerDiscoveryException.Server">
            <summary>
            Name of SQL Server instance for which exception occurred, if any.
            </summary>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLServerDiscoveryException.Database">
            <summary>
            Name of database for which exception occurred, if any.
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.SQLServerInstances">
            <summary>
            Get a list of SQL server instances from the network.	
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerInstances.Init">
            <summary>
            Initiate the background thread to gets the available SQL Server instances from the network
            </summary>
        </member>
        <member name="M:RedGate.Shared.SQL.Server.SQLServerInstances.GetAvailable(System.Boolean)">
            <summary>
            Gets a list of available SQL Server instances
            </summary>
            <param name="forceRefresh">If <em>true</em>, the list will be refreshed from the network</param>
            <returns>An array of SQL Server instances found</returns>
        </member>
        <member name="P:RedGate.Shared.SQL.Server.SQLServerInstances.SSMS2005Folder">
            <summary>
            Get the folder for Microsoft Management Studio.
            </summary>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.NetServerApi32">
            <summary>
            Class to locate servers on a local network/domain
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.NetServerApi32.SV_101_TYPES">
            <summary />
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.NetServerApi32.SERVER_INFO_101">
            <summary />
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.Shared.SQL.Server.NetServerApi32.PLATFORM_ID">
            <summary />
            <exclude/>
            <excludetoc/>
        </member>
    </members>
</doc>
