<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedGate.Shared.Utils</name>
    </assembly>
    <members>
        <member name="T:RedGate.Shared.Utils.Collections.EnumerableBase`1">
            <summary>
            An enumerable that adds various other useful methods for object membership.
            </summary>
            <typeparam name="T">The type of object returned from the enumerable.</typeparam>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.EnumerableBase`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the result of running
            <paramref name="converter"/> on each element of this IEnumerable.
            </summary>
            <typeparam name="TOutput">The output type.</typeparam>
            <param name="converter">A <see cref="T:System.Converter`2"/></param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the result of running <paramref name="converter"/>
            on each element of this IEnumerable
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.EnumerableBase`1.Exists(System.Predicate{`0})">
            <summary>
            Determines if there is an element in this IEnumerable
            that satisfies <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>
            True if there is an element in this IEnumerable for which
            <see cref="!:predicate"/> is true.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.EnumerableBase`1.ExistsCount(System.Predicate{`0})">
            <summary>
            Determines the number of elements in this IEnumerable
            that satisfy <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>
            The number of elements in this IEnumerable for which
            <paramref name="predicate"/> returns true.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.EnumerableBase`1.FindAll(System.Predicate{`0})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the objects returned
            by this IEnumerable that satisfy <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the objects returned
            by this IEnumerable that satisfy <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.EnumerableBase`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines if <paramref name="predicate"/> is true for all objects
            returned by this IEnumerable.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>
            True if <paramref name="predicate"/> is true for every object
            returned by this IEnumerable.
            </returns>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.InnerList`1">
            <summary>
            A collection wrapping a <see cref="T:System.Collections.Generic.List`1"/> object.
            </summary>
            <typeparam name="T">The type stored in the list.</typeparam>
            <remarks>
            This class is intended to simplify programming wrapper collections around lists; all the methods are virtual
            so can be overridden as required for the particular collection.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.InnerList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.InnerList`1"/> class.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.InnerList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.InnerList`1"/> class
            with initial size of <paramref name="size"/>.
            </summary>
            <param name="size">The initial size of the backing list.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.InnerList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.InnerList`1"/> class
            with the contents of the specified <paramref name="enumerable"/>.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to insert into the backing list.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.InnerList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.InnerList`1"/> class
            to use the specified <paramref name="backingList"/>.
            </summary>
            <param name="backingList">The backing list to use.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.ReadOnlyCollectionWrapper`1">
            <summary>
            Provides a read-only wrapper around an existing <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type stored in the collection.</typeparam>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.ReadOnlyListWrapper`1">
            <summary>
            Provides a read-only wrapper around an existing <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type stored in the list.</typeparam>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.ReadOnlySetWrapper`1">
            <summary>
            Provides a read-only wrapper around an existing <see cref="T:RedGate.Shared.Utils.Collections.ISet`1"/>.
            </summary>
            <typeparam name="T">The type stored in the set.</typeparam>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.ISet`1">
            <summary>
            Interface representing a set of unique values.
            </summary>
            <typeparam name="T">The type to store in the set.</typeparam>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ISet`1.Union(RedGate.Shared.Utils.Collections.ISet{`0})">
            <summary>
            Obtains the set union of this set and the <paramref name="other"/> set.
            </summary>
            <param name="other">The set to union this set with</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the result of the union.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ISet`1.Intersection(RedGate.Shared.Utils.Collections.ISet{`0})">
            <summary>
            Obtains the set intersection of this set and the <paramref name="other"/> set.
            </summary>
            <param name="other">The set to intersect this set with</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the result of the intersection.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ISet`1.Difference(RedGate.Shared.Utils.Collections.ISet{`0})">
            <summary>
            Obtains the result of this set minus the contents of the <paramref name="other"/> set (A / B).
            </summary>
            <param name="other">The set to remove the contents of from this set.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the result of (this set / <paramref name="other"/> set).</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryWrapper`2">
            <summary>
            Provides a read-only wrapper around an existing <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.Pair`2">
            <summary>
            Represents an immutable pair of objects.
            </summary>
            <typeparam name="TLeft">The type of the 'left' object.</typeparam>
            <typeparam name="TRight">The type of the 'right' object.</typeparam>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new <see cref="T:RedGate.Shared.Utils.Collections.Pair`2"/> instance.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Pair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Initializes a new <see cref="T:RedGate.Shared.Utils.Collections.Pair`2"/> instance using
            the specified <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="kvp">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            to copy the left and right objects from.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Pair`2.Equals(RedGate.Shared.Utils.Collections.Pair{`0,`1})">
            <summary>
            Indicates whether the members of this <see cref="T:RedGate.Shared.Utils.Collections.Pair`2"/> instance are equal to the
            members of the <paramref name="other"/> instance.
            </summary>
            <returns><em>True</em> if this instance is equal to <paramref name="other"/>; otherwise, <em>false</em>.</returns>
            <param name="other">An object to compare with this object.</param>
            <remarks>
            The default equality comparers for <typeparamref name="TLeft"/>
            and <typeparamref name="TRight"/> are used for member equality.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Pair`2.ToKeyValuePair">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instance with the left object
            copied to the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>, and the right object
            copied to the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instance with the same members
            as this <see cref="T:RedGate.Shared.Utils.Collections.Pair`2"/> instance.
            </returns>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.Triple`3">
            <summary>
            Represents an immutable triple of three objects.
            </summary>
            <typeparam name="TLeft">The type of the 'left' object.</typeparam>
            <typeparam name="TMiddle">The type of the 'middle' object.</typeparam>
            <typeparam name="TRight">The type of the 'right' object.</typeparam>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new <see cref="T:RedGate.Shared.Utils.Collections.Triple`3"/> object.
            </summary>
            <param name="left">The left object.</param>
            <param name="middle">The middle object.</param>
            <param name="right">The right object.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Triple`3.Equals(RedGate.Shared.Utils.Collections.Triple{`0,`1,`2})">
            <summary>
            Indicates whether the members of this <see cref="T:RedGate.Shared.Utils.Collections.Triple`3"/> instance are equal to the
            members of the <paramref name="other"/> instance.
            </summary>
            <returns><em>True</em> if this instance is equal to <paramref name="other"/>; otherwise, <em>false</em>.</returns>
            <param name="other">An object to compare with this object.</param>
            <remarks>
            The default equality comparers for <typeparamref name="TLeft"/>, <typeparamref name="TMiddle"/>
            and <typeparamref name="TRight"/> are used for member equality.
            </remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.CollectionUtils">
            <summary>
            A collection of useful functions that operate on IEnumerables and ICollections.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionUtils.AddAll``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds the objects returned by <paramref name="enumerable"/> to <paramref name="collection"/>.
            </summary>
            <typeparam name="T">The type stored in the <paramref name="collection"/>.</typeparam>
            <typeparam name="U">The type returned by the enumerable <paramref name="enumerable"/>.</typeparam>
            <param name="collection">The collection to add objects to.</param>
            <param name="enumerable">The enumerable containing the objects to add.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionUtils.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the result of running
            <paramref name="converter"/> on each element returned by <paramref name="enumerable"/>.
            </summary>
            <typeparam name="TInput">The type of object in <paramref name="enumerable"/>.</typeparam>
            <typeparam name="TOutput">The output type.</typeparam>
            <param name="enumerable">The enumerable containing objects to convert to <typeparamref name="TOutput"/>.</param>
            <param name="converter">The converter from <typeparamref name="TInput"/> to <typeparamref name="TOutput"/>.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionUtils.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines if there is an element in <paramref name="enumerable"/>
            that satisfies <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of object returned by the IEnumerable.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns>
            True if there is an element in this IEnumerable for which <paramref name="predicate"/>
            is true.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionUtils.ExistsCount``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines the number of elements in <paramref name="enumerable"/>
            that satisfy <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of object returned by the IEnumerable.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns>
            The number of objects in <paramref name="enumerable"/> for which
            <paramref name="predicate"/> is true.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionUtils.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the objects returned
            by <paramref name="enumerable"/> that satisfy <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of object returned by the IEnumerable.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the objects in <paramref name="enumerable"/>
            for which <paramref name="predicate"/> is true.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionUtils.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Removes all the objects from <paramref name="collection"/> that satisfy <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type stored in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection.</param>
            <param name="predicate">The predicate.</param>
            <returns>The number of objects removed from <paramref name="collection"/>.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionUtils.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns an array of the contents of <paramref name="collection"/>.
            </summary>
            <typeparam name="T">The type stored in the collection.</typeparam>
            <param name="collection">The collection.</param>
            <returns>An array of the contents of <paramref name="collection"/>.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionUtils.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines if <paramref name="predicate"/> is true for all objects
            returned by <paramref name="enumerable"/>.
            </summary>
            <typeparam name="T">The type stored in the IEnumerable.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns>
            True if all the elements in <see cref="!:enumerable"/> evaluate
            <see cref="!:predicate"/> to true.
            </returns>
        </member>
        <member name="T:RedGate.Shared.Utils.DisposableBase">
            <summary>
            Helper class that implements the recommended IDisposable design pattern.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.DisposableBase.Dispose(System.Boolean)">
            <summary>
            Method called when disposing or finalizing.
            </summary>
            <param name="disposing">
            If <em>true</em>, this was called by the <see cref="M:RedGate.Shared.Utils.DisposableBase.Dispose"/> method, and so managed and unmanaged resources
            should be cleaned up. If <em>false</em>, this was called by the finalizer, so only unmanaged resources should
            be cleaned up.
            </param>
            <remarks>
            As a guide, all methods of a class inheriting <see cref="T:System.IDisposable"/> should check if it is disposed
            when every non-private method is called using the provided method <see cref="M:RedGate.Shared.Utils.DisposableBase.CheckDisposed"/>.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.DisposableBase.CheckDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException"/> if this instance has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="P:RedGate.Shared.Utils.DisposableBase.IsDisposed">
            <summary>
            Returns a value indicating if this instance has been disposed or not.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.DisposableBase.ObjectName">
            <summary>
            Sets the object name to use for any thrown <see cref="T:System.ObjectDisposedException"/>s. The default
            is the Name property of <see cref="M:System.Object.GetType"/>.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.LZStream">
            <summary>
            A stream that is compressed using the BriefLZ (LZSS) algorithm.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.LZStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
            <summary>
            Provides methods and properties used to compress and decompress streams.
            </summary>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="compressionMode">One of the CompressionMode values that indicates the action to take.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.LZStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.LZStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.LZStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            
            <returns>
            The new position within the current stream.
            </returns>
            
            <param name="offset">A byte offset relative to the origin parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.LZStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.LZStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. </param>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.LZStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.LZStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.LZStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.LZStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.LZStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.LZStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            
            <returns>
            The current position within the stream.
            </returns>
            
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.LZStream.CloseUnderlyingStreamOnClose">
            <summary>
            Gets or sets a value indicating if the underlying stream should be closed
            when <see cref="M:RedGate.Shared.Utils.IO.LZStream.Close"/> is called.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.RGLZ">
            <summary>
            Class containing compression &amp; decompression methods for the BriefLZ compression algorithm.
            </summary>
            <remarks>Based on native C code by Peter Yeoh, ported to C# by Elliot Matthews.</remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Logging.ComponentLogger">
            <summary>
            Component Logger - wraps the standard logger to always provide the Component information
            Instantiated through the GetComponentLogger function on the ILogMessages interface
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.#ctor(System.String)">
            <summary>
            Create a new Component Logger
            </summary>
            <param name="currentComponent">The component to associate with the component logger.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String)">
            <summary>
            Log a message using the current component and the LogLevel specified.
            </summary>
            <param name="level">The level of the message to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.Object[])">
            <summary>
            Log a message using the current component and the LogLevel specified - the message is 
            formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="level">The level of the message to log</param>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.Exception)">
            <summary>
            Log an exception using the current component and the LogLevel specified.
            </summary>
            <param name="level">The level of the message to log</param>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.Exception,System.String)">
            <summary>
            Log an exception starting with a message using the current component
            If null is passed for the exception, an Error message will be logged instead.
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message with an exception using the current component
            - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged. If the exception is null
            an error is logged
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogFatal(System.String)">
            <summary>
            Log a fatal message using the current component.
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogFatal(System.String,System.Object[])">
            <summary>
            Log a fatal message using the current component - the message is 
            formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogFatal(System.Exception)">
            <summary>
            Log a fatal exception using the current component
            </summary>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogFatal(System.Exception,System.String)">
            <summary>
            Log a fatal exception using the current component starting with a message.
            If null is passed for the exception, an Fatal message will be logged instead.
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogFatal(System.Exception,System.String,System.Object[])">
            <summary>
            Log a fatal exception using the current component with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Fatal is logged. If the exception is null
            an Fatal is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogError(System.String)">
            <summary>
            Log an error message using the current compoenent
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogError(System.String,System.Object[])">
            <summary>
            Log an error message using the current component - the message is 
            formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogError(System.Exception)">
            <summary>
            Log an error exception using the current component
            </summary>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogError(System.Exception,System.String)">
            <summary>
            Log an error exception using the current component starting with a message.
            If null is passed for the exception, an Error message will be logged instead.
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Log an error exception using the current component with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Error is logged. If the exception is null
            an Error is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogWarning(System.String)">
            <summary>
            Log a warning message using the current compoenent
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogWarning(System.String,System.Object[])">
            <summary>
            Log a warning message using the current component - the message is 
            formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogWarning(System.Exception)">
            <summary>
            Log a warning exception using the current component
            </summary>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogWarning(System.Exception,System.String)">
            <summary>
            Log a warning exception using the current component starting with a message.
            If null is passed for the exception, an Warning message will be logged instead.
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogWarning(System.Exception,System.String,System.Object[])">
            <summary>
            Log a warning exception using the current component with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Warning is logged. If the exception is null
            an Warning is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogInformation(System.String)">
            <summary>
            Log an informational message using the current compoenent
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogInformation(System.String,System.Object[])">
            <summary>
            Log an informational message using the current component - the message is 
            formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogInformation(System.Exception)">
            <summary>
            Log an information exception using the current component
            </summary>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogInformation(System.Exception,System.String)">
            <summary>
            Log an information exception using the current component starting with a message.
            If null is passed for the exception, an Information message will be logged instead.
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogInformation(System.Exception,System.String,System.Object[])">
            <summary>
            Log an information exception using the current component with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Information is logged. If the exception is null
            an Information is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogDebug(System.String)">
            <summary>
            Log a debug message using the current compoenent
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogDebug(System.String,System.Object[])">
            <summary>
            Log a debug message using the current component - the message is 
            formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogDebug(System.Exception)">
            <summary>
            Log a debug exception using the current component
            </summary>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogDebug(System.Exception,System.String)">
            <summary>
            Log an debug exception using the current component starting with a message.
            If null is passed for the exception, an Debug message will be logged instead.
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogDebug(System.Exception,System.String,System.Object[])">
            <summary>
            Log an debug exception using the current component with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Debug is logged. If the exception is null
            an Debug is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogTrace(System.String)">
            <summary>
            Log a trace message using the current compoenent
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogTrace(System.String,System.Object[])">
            <summary>
            Log a trace message using the current component - the message is 
            formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogTrace(System.Exception)">
            <summary>
            Log a trace exception using the current component
            </summary>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogTrace(System.Exception,System.String)">
            <summary>
            Log a trace exception using the current component starting with a message.
            If null is passed for the exception, an Trace message will be logged instead.
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogTrace(System.Exception,System.String,System.Object[])">
            <summary>
            Log a trace exception using the current component with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Trace is logged. If the exception is null
            an Trace is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogVerbose(System.String)">
            <summary>
            Log a verbose message using the current compoenent
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogVerbose(System.String,System.Object[])">
            <summary>
            Log a verbose message using the current component - the message is 
            formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogVerbose(System.Exception)">
            <summary>
            Log a verbose exception using the current component
            </summary>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogVerbose(System.Exception,System.String)">
            <summary>
            Log a verbose exception using the current component starting with a message.
            If null is passed for the exception, an Verbose message will be logged instead.
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ComponentLogger.LogVerbose(System.Exception,System.String,System.Object[])">
            <summary>
            Log a verbose exception using the current component with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Verbose is logged. If the exception is null
            an Verbose is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="T:RedGate.Shared.Utils.Logging.DebugConsoleLogger">
            <summary>
            This class provides an implementation of ILogger that logs events to the system's Debug output (i.e. Debug.WriteLine(...)).
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.Logging.ILogger">
            <summary>
            All loggers regardless of the mechanism used to save
            the logs must implement this interface
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.ILogger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.String,System.String)">
            <summary>
            The function called for logging
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.ILogger.Level">
            <summary>
            The level to which this logger will log
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.DebugConsoleLogger.#ctor(RedGate.Shared.Utils.Logging.LogLevel)">
            <summary>
            Creates a new instance of this object, with an initial logging level as specified. If there
            are no debug listeners connected, the specified level will be ignored and instead set to
            LogLevel.None. This is to prevent any logging being accepted in builds compiled without the
            DEBUG conditional set.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.DebugConsoleLogger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.String,System.String)">
            <summary>
            Logs an individual message to the debug console.
            </summary>
            <param name="level">Severity level of the mesage</param>
            <param name="productName">Name of the product - in this case not used</param>
            <param name="component">Component to which this message relates</param>
            <param name="message">Message text</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.DebugConsoleLogger.Dispose">
            <summary>
            Frees any resources, which in this case is a no-op.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.DebugConsoleLogger.Level">
            <summary>
            Gets or sets the log level processed by this logger. If there are no debug listeners connected,
            the specified level will be ignored and instead set to LogLevel.None.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.Logging.FileLogger">
            <summary>
            A file logger that writes its log output in fixed width format bar separated.
            <code>HH:mm:ss.fff|LogLevel|Component (max 20 chars)|Threadid|Message</code>
            The threadid is currently only 3 wide so may not be fixed width. Message can span
            multiple lines without having to escape the | character
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.Logging.FileLoggerBase">
            <summary>
            A base class for handling loggers that write their data to a file
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.#ctor">
            <summary>
             Constructor for deriving classes
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.#ctor(System.String)">
            <summary>
             Constructor for deriving classes
            <param name="folder">Folder to log into</param>
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.Dispose">
            <summary>
            Dispose of the resources of the FileLogger
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.Dispose(System.Boolean)">
            <summary>
            Dispose of the logger
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.Flush">
            <summary>
            Flush any unwritten data
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.InitializePaths(System.String@,System.String@)">
            <summary>
            Initialize the paths that this filelogger will log to
            </summary>
            <param name="loggingPath">Directory to log to</param>
            <param name="loggingFileName">File to Log to</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.Initialize(System.String)">
            <summary>
            Initialize the logger. The location of the file and the name 
            of the file are created using the name of the product that the 
            logger is associated with, plus the version number as well
            as the time of creation. A uniqifier is also appended.
            </summary>
            <param name="productName">The name of the product being logged.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.NewFile">
            <summary>
            Creates a new file and continues logging to the new file
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.String)">
            <summary>
            Log a message. If we're a in a new day a new log is created and the old logs are possibly removed.
            If we're over-size for this log a new one may be created.
            </summary>
            <param name="level">The type of message</param>
            <param name="component">The component the message is associated with (can be null)</param>
            <param name="message">A message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.String,System.String)">
            <summary>
            Log a Message (Everytime 100 messages are logged the logger automatically
            checks to ensure the log or individual log files haven't grown too large or
            too old)
            </summary>
            <param name="level">Level to log the message at</param>
            <param name="productName">Name of the product being logged</param>
            <param name="component">Component to which the message relates</param>
            <param name="message">Actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.HandleLogSize">
            <summary>
            Check the current file size and create a new file if it is bigger than MaxFileSize.
            Check the current directory size and if bigger than MaxTotalSize delete files in the directory
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.DeleteOlderFiles(System.IO.FileInfo[],System.Int64)">
            <summary>
            Delete older files in the logging directory to free up disk space
            </summary>
            <param name="files">The files to look through for deletion candidates</param>
            <param name="size">total size of these files</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.CleanupOldLoggingFiles(System.String)">
            <summary>
            Delete older (date wise) logging files to keep log size trimmed - the 
            number of days to keep the files for is specified in DaysToKeep
            </summary>
            <param name="productName">Name fo the product being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLoggerBase.LoggingFileName(System.String,System.Boolean)">
            <summary>
            Get the LoggingFileName - this will contain a number that will be automatically bumped with each successive
            file creation during the same day
            </summary>
            <param name="productName">Name of the product being logged</param>
            <param name="fullPath">Logging directory</param>
            <returns>The filename to log to</returns>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.FileLoggerBase.Filename">
            <summary>
            The log file name currently being written
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.FileLoggerBase.LogFolder">
            <summary>
            The folder containing the debug files for this product
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.FileLoggerBase.Level">
            <summary>
            The LogLevels of messages that will be logged to the file
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.FileLoggerBase.DaysToKeep">
            <summary>
            Set the DaysToKeep for older logging files when the overall logging size doesn't trigger the 
            log pruning. (default 30 days), -1 = unlimited
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.FileLoggerBase.MaxFileSize">
            <summary>
            Get/Set the MaxFileSize in bytes of each individual logging file (default 50Mb), -1 = unlimited
            The MaxFileSize is reduced by 5% for checking to compensate for the fact we don't check the
            file size of the file being written every time we write the log
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.FileLoggerBase.MaxTotalSize">
            <summary>
            Get/Set the MaxTotalSize in bytes of the logging directory for this product (default 500Mb), -1 = unlimited
            The MaxTotalSize is increased by 5% to ensure all the logs aren't deleted if it is a similar magnitude to the
            MaxFileSize
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.Logging.FileLoggerBase.FileComparator">
            <summary>
            Order the files in descending date order (oldest files first)
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLogger.#ctor(RedGate.Shared.Utils.Logging.LogLevel)">
            <summary>
            Create a new File Logger using the default destination folder for logs
            </summary>
            <param name="level">The mask of LogLevels that will be written to the CSV file</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLogger.#ctor(System.String,RedGate.Shared.Utils.Logging.LogLevel)">
            <summary>
            Create a new File Logger using the default destination folder for logs
            </summary>
            <param name="defaultLogPath">The folder that contains the log path</param>
            <param name="level">The mask of LogLevels that will be written to the file</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.FileLogger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.String)">
            <summary>
            Log a message. If we're a in a new day a new log is created and the old logs are possibly removed.
            If we're over-size for this log a new one may be created.
            </summary>
            <param name="level">The type of message</param>
            <param name="component">The component the message is associated with (can be null)</param>
            <param name="message">A message</param>
        </member>
        <member name="T:RedGate.Shared.Utils.Logging.Logger">
            <summary>
            A static class for accessing the new Logging interface
            </summary>
            <example>
            <code>
            void Main()
            {
                Logger.Initialize("SQL Dummy 1", LogLevel.All);
            
                Logger.Loggers.Add(new FileLogger(LogLevel.Debug | LogLevel.Trace));
            
                Logger.LogDebug("UI", "Startup");
                Logger.LogTrace("UI", "I can use {0} strings", "format");
                Logger.Log(LogLevel.Debug, "Example", new NotImplementedException(), "Exception with message");
            
                ComponentLogger comp = Logger.GetComponentLogger("UI");
            
                comp.LogTrace("Startup2");
            
                Logger.Close();
            }
            </code>
            </example>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.GetComponentLogger(System.String)">
            <summary>
            Create a new ComponentLogger for the component specified.
            </summary>
            <param name="component">The component to wrap in the component logger.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.Initialize(System.String)">
            <summary>
            Initialize to log only LogLevel.Serious events
            </summary>
            <param name="productName">Name of the product being logged.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.Initialize(System.String,RedGate.Shared.Utils.Logging.LogLevel)">
            <summary>
            Initializes the logger for the product with a number of loggers
            </summary>
            <param name="productName">Name of the product being logged.</param>
            <param name="globalLevel">The level of events that will be dispatched to the individual loggers.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.Initialize(System.String,RedGate.Shared.Utils.Logging.ILogger,RedGate.Shared.Utils.Logging.LogLevel)">
            <summary>
            Initializes the logger for the product with a number of loggers
            </summary>
            <param name="productName">Name of the product being logged.</param>
            <param name="logger">Initializing logger</param>
            <param name="globalLevel">The level of events that will be dispatched to the individual loggers.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.Initialize(System.String,System.Collections.Generic.IEnumerable{RedGate.Shared.Utils.Logging.ILogger},RedGate.Shared.Utils.Logging.LogLevel)">
            <summary>
            Initializes the logger for the product with a number of loggers
            </summary>
            <param name="productName">Name of the product being logged.</param>
            <param name="loggers">List of initializing loggers</param>
            <param name="globalLevel">The level of events that will be dispatched to the individual loggers.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.Close">
            <summary>
            Dispose of all ILogger objects held by the Logger
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.String)">
            <summary>
            All calls to Logger.Log ultimately end up in this call down to this call
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.String,System.Object[])">
            <summary>
            Log a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            Log an exception. If null is passed for the exception, an Error message will be logged instead.
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.Exception,System.String)">
            <summary>
            Log an exception starting with a message. If null is passed for the exception, an Error message will be logged instead.
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message with an exception - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged. If the exception is null
            an error is logged
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogFatal(System.String,System.String)">
            <summary>
            Log a fatal error
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogFatal(System.String,System.String,System.Object[])">
            <summary>
            Log a fatal error - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogFatal(System.String,System.Exception)">
            <summary>
            Log a Fatal exception. If null is passed for the exception, an Error message will be logged instead.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogFatal(System.String,System.Exception,System.String)">
            <summary>
            Log a fatal exception starting with a message. If null is passed for the exception, an Error message will be logged instead.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogFatal(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a fatal exception with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged. If the exception is null
            an error is logged
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogError(System.String,System.String)">
            <summary>
            Log an error
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogError(System.String,System.String,System.Object[])">
            <summary>
            Log an error - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogError(System.String,System.Exception)">
            <summary>
            Log an exception as an error
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogError(System.String,System.Exception,System.String)">
            <summary>
            Log an exception as an error starting with a message. If null is passed for the exception, an Error message will be logged instead.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogError(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Log an exception as an error with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged. If the exception is null
            an error is logged
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogWarning(System.String,System.String)">
            <summary>
            Log a warning
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogWarning(System.String,System.String,System.Object[])">
            <summary>
            Log a warning - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogWarning(System.String,System.Exception)">
            <summary>
            Log an exception as a warning
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogWarning(System.String,System.Exception,System.String)">
            <summary>
            Log an exception as a warning starting with a message. If null is passed for the exception, an Warning message will be logged instead.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogWarning(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Log an exception as a warning with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Warning is logged. If the exception is null
            an Warning is logged
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogInformation(System.String,System.String)">
            <summary>
            Log an informational message
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogInformation(System.String,System.String,System.Object[])">
            <summary>
            Log an informational message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogInformation(System.String,System.Exception)">
            <summary>
            Log an exception as an informational message
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogInformation(System.String,System.Exception,System.String)">
            <summary>
            Log an exception as information starting with a message. If null is passed for the exception, an Information message will be logged instead.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogInformation(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Log an exception as information with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Information is logged. If the exception is null
            an Information is logged
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogDebug(System.String,System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogDebug(System.String,System.String,System.Object[])">
            <summary>
            Log a debug message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogDebug(System.String,System.Exception)">
            <summary>
            Log an exception as a debug message
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogDebug(System.String,System.Exception,System.String)">
            <summary>
            Log an exception as debug starting with a message. If null is passed for the exception, an Debug message will be logged instead.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogDebug(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Log an exception as debug with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Debug is logged. If the exception is null
            an Debug is logged
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogTrace(System.String,System.String)">
            <summary>
            Log a trace message
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogTrace(System.String,System.String,System.Object[])">
            <summary>
            Log a trace message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogTrace(System.String,System.Exception)">
            <summary>
            Log an exception as a trace message
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogTrace(System.String,System.Exception,System.String)">
            <summary>
            Log an exception as trace starting with a message. If null is passed for the exception, an Trace message will be logged instead.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogTrace(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Log an exception as trace with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Trace is logged. If the exception is null
            an Trace is logged
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogVerbose(System.String,System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogVerbose(System.String,System.String,System.Object[])">
            <summary>
            Log a verbose message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="message">The message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogVerbose(System.String,System.Exception)">
            <summary>
            Log an exception as a verbose message
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogVerbose(System.String,System.Exception,System.String)">
            <summary>
            Log an exception as verbose starting with a message. If null is passed for the exception, an Verbose message will be logged instead.
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.Logger.LogVerbose(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Log an exception as verbose with a message - the message is formatted first using String.Format before being dispatched
            further. If the formatted string is not valid an Verbose is logged. If the exception is null
            an Verbose is logged
            </summary>
            <param name="component">The component that the message is being logged against</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.Logger.Loggers">
            <summary>
            Access all the ILoggers
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.Logger.Level">
            <summary>
            Get or set the current logger level
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.Logging.LogLevel">
            <summary>
            The different levels of Logging
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.None">
            <summary>
            No logging
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.Verbose">
            <summary>
            Maximum logging level - everything will be logged
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.Debug">
            <summary>
            Debug logging
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.Trace">
            <summary>
            Trace logging
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.Information">
            <summary>
            Information logging
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.Warning">
            <summary>
            Warnings
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.Error">
            <summary>
            Errors
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.Fatal">
            <summary>
            Fatal errors
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.Default">
            <summary>
            Fatal | Error | Warning | Information | Trace | Debug 
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.All">
            <summary>
            Fatal | Error | Warning | Information | Trace | Debug | Verbose
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.Logging.LogLevel.Serious">
            <summary>
            Fatal | Error | Warning
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.Logging.SystemEventLogger">
            <summary>
            A class that writes ILogMessages to the System's Application EventLog
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.SystemEventLogger.GetEventLogType(RedGate.Shared.Utils.Logging.LogLevel)">
            <summary>
            Map the LogLevel to the EventLogEntryType used for classifying messages
            in the eventlog
            </summary>
            <param name="level">The LogLevel</param>
            <returns>The corresponding EventLogEntryType</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.SystemEventLogger.#ctor(RedGate.Shared.Utils.Logging.LogLevel)">
            <summary>
            Create a new SystemEventLogger for messages of the LogLevel specified
            </summary>
            <param name="level">Mask of LogLevels that will be logged to the EventLog</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.SystemEventLogger.Dispose">
            <summary>
            Dispose of the resources of the FileLogger
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.SystemEventLogger.Dispose(System.Boolean)">
            <summary>
            Dispose of the Logger
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RedGate.Shared.Utils.Logging.SystemEventLogger.Log(RedGate.Shared.Utils.Logging.LogLevel,System.String,System.String,System.String)">
            <summary>
            Log the ILoggedMessage to the EventLog.
            This function registers the application as an EventSource and writes out
            the contents of the message (including additional params) to the EventLog 
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.SystemEventLogger.EventLogSource">
            <summary>
            Get the name of the EventSource that all log messages will be logged to
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Logging.SystemEventLogger.Level">
            <summary>
            Get the Mask of LogLevels that will be logged to the EventLog
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.OSVersion">
            <summary>
            Represents the different windows version recognised.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.MachineConfig">
            <summary>
            Provides methods for accessing the local machine configuration and hardware setup.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.MachineConfig.IsWin32">
            <summary>
            Returns if running under Win32.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.MachineConfig.IsWin64">
            <summary>
            Returns if it's running under Win64.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.MachineConfig.IsX86">
            <summary>
            Returns if hardware is X86.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.MachineConfig.IsX64">
            <summary>
            Returns if hardware is X64.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.MachineConfig.IsIA64">
            <summary>
            Returns if the hardware is Itanium.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.MachineConfig.IsPaeMode">
            <summary>
            Retuns if its in PAE Mode.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.MachineConfig.NumberOfProcessors">
            <summary>
            Returns the number of processors on the system.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.MachineConfig.OSVersion">
            <summary>
            Returns the host OS version.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.CollectionBase`1">
            <summary>
            A class to help implement an ICollection.
            </summary>
            <typeparam name="T">The type to store in the collection.</typeparam>
            <remarks>The only methods you need to override are Add(T item), Remove(T item) and GetEnumerator().
            The other methods have a time complexity of O(n), so it is recommended you also override
            methods you will use frequently.</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.CollectionBase`1"/> class
            using the default comparer.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.CollectionBase`1"/> class
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionBase`1.Clear">
            <summary>
            Removes all items from the <see cref="T:RedGate.Shared.Utils.Collections.CollectionBase`1"/>.
            </summary>
            <remarks>Uses: Enumerator, <see cref="M:RedGate.Shared.Utils.Collections.CollectionBase`1.Remove(`0)"/></remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionBase`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:RedGate.Shared.Utils.Collections.CollectionBase`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns><em>true</em> if <paramref name="item"/> is found in the <see cref="T:RedGate.Shared.Utils.Collections.CollectionBase`1"/>; otherwise, <em>false</em>.</returns>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.CollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:RedGate.Shared.Utils.Collections.CollectionBase`1"/> to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination
            of the elements copied from <see cref="T:RedGate.Shared.Utils.Collections.CollectionBase`1"/>. The <see cref="T:System.Array"/>
            must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.CollectionBase`1.Comparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used when comparing items.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.CollectionBase`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:RedGate.Shared.Utils.Collections.CollectionBase`1"/>.
            </summary>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.ListBase`1">
            <summary>
            A class to help implement an IList.
            </summary>
            <typeparam name="T">The type to store in the collection.</typeparam>
            <remarks>The only methods you need to implement are Insert(int index, T item), RemoveAt(int index) and
            GetEnumerator(). The other methods (apart from Add) have a time complexity of O(n),
            so it is recommended that you also override methods you will use frequently (especially the array indexer).</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ListBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/> class
            using the default comparer.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ListBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/> class
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ListBase`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/>.</param>
            <remarks>Uses: <see cref="M:RedGate.Shared.Utils.Collections.ListBase`1.Insert(System.Int32,`0)"/></remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ListBase`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/>.
            </summary>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
            <param name="item">The object to locate in the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/>.</param>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ListBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/>.
            </summary>
            <returns>
            <em>true</em> if item was successfully removed from the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/>; otherwise, <em>false</em>.
            This method also returns false if item is not found in the original <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/>.</param>
            <remarks>Uses: <see cref="M:RedGate.Shared.Utils.Collections.ListBase`1.IndexOf(`0)"/>, <see cref="M:RedGate.Shared.Utils.Collections.ListBase`1.RemoveAt(System.Int32)"/></remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.ListBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <remarks>
            Get uses: Enumerator
            Set uses: <see cref="M:RedGate.Shared.Utils.Collections.ListBase`1.RemoveAt(System.Int32)"/>, <see cref="M:RedGate.Shared.Utils.Collections.ListBase`1.Insert(System.Int32,`0)"/>
            </remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.SetBase`1">
            <summary>
            A class to help implement a Set
            </summary>
            <typeparam name="T">The type to store in the collection</typeparam>
            <remarks>The only methods you need to override are Add(T item), Remove(T item) and GetEnumerator().
            The other methods have a time complexity of O(n), so it is recommended you also override
            methods you will use frequently.</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.SetBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.SetBase`1"/> class
            using the default comparer.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.SetBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.SetBase`1"/> class
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.SetBase`1.Union(RedGate.Shared.Utils.Collections.ISet{`0})">
            <summary>
            Obtains the set union of this set and the <paramref name="other"/> set.
            </summary>
            <param name="other">The set to union this set with</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the result of the union.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.SetBase`1.Intersection(RedGate.Shared.Utils.Collections.ISet{`0})">
            <summary>
            Obtains the set intersection of this set and the <paramref name="other"/> set.
            </summary>
            <param name="other">The set to intersect this set with</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the result of the intersection.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.SetBase`1.Difference(RedGate.Shared.Utils.Collections.ISet{`0})">
            <summary>
            Obtains the result of this set minus the contents of the <paramref name="other"/> set (A / B).
            </summary>
            <param name="other">The set to remove the contents of from this set.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the result of (this set / <paramref name="other"/> set).</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.DictionaryBase`2">
            <summary>
            A class to help implement an IDictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <remarks>The only methods you need to implement are Remove(TKey key), GetEnumerator() and the array indexer.
            The other methods all have a time complexity of O(n), so it is recommended that you also override
            methods you will use frequently.</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/> class
            using the default key comparer.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/> class
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing keys.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </summary>
            <param name="value">The object to use as the value of the element to add.</param>
            <param name="key">The object to use as the key of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref>key</paramref> is null.</exception>
            <remarks>Uses: <see cref="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.ContainsKey(`0)"/>, set indexer</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/> contains
            an element with the specified <paramref name="key"/>.
            </summary>
            <returns>
            <em>true</em> if the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/> contains
            an element with the key; otherwise, <em>false</em>.
            </returns>
            <param name="key">The key to locate in the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </summary>
            <returns>
            <em>true</em> if item was successfully removed from the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>;
            otherwise, <em>false</em>. This method also returns <em>false</em> if item is not found
            in the original <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.</param>
            <remarks>Uses: <see cref="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.TryGetValue(`0,`1@)"/>, <see cref="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.Remove(`0)"/></remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.</param>
            <remarks>Uses: <see cref="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.Add(`0,`1)"/></remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <em>true</em> if the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/> contains
            an element with the specified key; otherwise, <em>false</em>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <remarks>Uses: <see cref="M:RedGate.Shared.Utils.Collections.DictionaryBase`2.ContainsKey(`0)"/>, get indexer</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.DictionaryBase`2.Comparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used when comparing keys.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.DictionaryBase`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the
            object that implements <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </returns>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.DictionaryBase`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the
            object that implements <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </returns>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.EnumeratorBase`1">
            <summary>
            An enumerator that simply uses the same object obtained from the <see cref="P:System.Collections.Generic.IEnumerator`1.Current"/> property
            for the non-generic <see cref="P:System.Collections.IEnumerator.Current"/> property.
            <see cref="M:System.IDisposable.Dispose"/> is also implemented as an empty method.
            </summary>
            <typeparam name="T">The type of object returned from the enumerator.</typeparam>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.DynamicDictionary`1">
            <summary>
            A class representing a dictionary that can hold several different types of objects depending on the key.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <remarks>
            The type of a stored item is set when the item is added to the collection, and cannot be changed afterwards.
            Hence you cannot remove items from a DynamicDictionary, as that would break everything (you could just remove &amp;
            re-add items to change the type &amp; violate the constraint).
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DynamicDictionary`1.#ctor">
            <summary>
            Initialises a new empty instance with the default capacity and default comparer.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DynamicDictionary`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialises a new empty instance with the default capacity and specified IEqualityComparer.
            </summary>
            <param name="comparer">The IEqualityComparer to use when comparing keys.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DynamicDictionary`1.#ctor(System.Collections.Generic.IDictionary{`0,System.Object})">
            <summary>
            Initialises a new instance containing the same objects as the specifed IDictionary and default equality comparer.
            </summary>
            <param name="src">The IDictionary to copy the values from.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DynamicDictionary`1.#ctor(System.Int32)">
            <summary>
            Initialises a new empty instance with the specified capacity and default equality comparer.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DynamicDictionary`1.#ctor(System.Collections.Generic.IDictionary{`0,System.Object},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialises a new instance containing the same objects as the specified IDictionary, using the specified equality comparer.
            </summary>
            <param name="src">The IDictionary to copy the values from.</param>
            <param name="comparer">The IEqualityComparer to use when comparing keys.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DynamicDictionary`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialises a new empty instance using the specified capacity and equality comparer.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <param name="comparer">The IEqualityComparer to use when comparing keys.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DynamicDictionary`1.GetType(`0)">
            <summary>
            Returns the <see cref="T:System.Type"/> of object stored at the specified key, or null if the key was not found.
            </summary>
            <param name="key">The key to return the <see cref="T:System.Type"/> of stored object.</param>
            <returns>The <see cref="T:System.Type"/> stored at the specified key.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DynamicDictionary`1.Get``1(`0)">
            <summary>
            Convenience wrapper around the indexer get property to elimiate explicit casting in your code.
            </summary>
            <typeparam name="T">The type of object to retrieve from the dictionary.</typeparam>
            <param name="key">The key to retrieve the value of.</param>
            <returns>The object stored at the specified key, cast to <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidCastException">The object stored at <paramref name="key"/> cannot be cast to <typeparamref name="T"/>.</exception>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.KVPEqualityComparer`2">
            <summary>
            An equality comparer for KeyValuePairs, that allows you to specify a different comparer for keys and/or values.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <remarks>
            If TKey and TValue are the same type, use the two-arg constructor,
            passing <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> where relevant.</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.KVPEqualityComparer`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.KVPEqualityComparer`2"/> class,
            using the default key and value comparers.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.KVPEqualityComparer`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.KVPEqualityComparer`2"/> class,
            using the specified key comparer and default value comparer.
            </summary>
            <param name="keycomparer">The key comparer to use.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.KVPEqualityComparer`2.#ctor(System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.KVPEqualityComparer`2"/> class,
            using the default key comparer and specified value comparer.
            </summary>
            <param name="valuecomparer">The value comparer to use.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.KVPEqualityComparer`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.KVPEqualityComparer`2"/> class,
            using the specified key and value comparers.
            </summary>
            <param name="keycomparer">The key comparer to use.</param>
            <param name="valuecomparer">The value comparer to use.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.ListChain`1">
            <summary>
            IList implementation that makes a set (or chain) of ILists
            look like a single list.  This list is always read-only because it
            would be difficult for a user of this class to determine in which
            underlying list modifications would be made.  However this is not
            enforced on the underlying lists so if, for example, items are moved
            from one of the underlying lists the reported size of the wrapping
            ListChain will also decrease.
            </summary>
            <remarks>In this implementation, the lists are simply concatenated together.</remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.ReadOnlyListBase`1">
            <summary>
            A read-only list.
            </summary>
            <typeparam name="T">The type of object stored in the list.</typeparam>
            <remarks>The only method that need to be implemented is GetEnumerator. It is also recommended to implement the
            array indexer (which, by default, uses the enumerator) for efficiency, and any other methods for which you need
            a complexity less that O(n)</remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.ReadOnlyCollectionBase`1">
            <summary>
            A read-only collection class.
            </summary>
            <typeparam name="T">The type of object stored in the collection.</typeparam>
            <remarks>
            The only method that needs to be implemented is <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>; 
            all the other methods use the enumerator to obtain their results. It is recommended you override those for which you need
            a complexity less that O(n).
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.Collections.ReadOnlyCollectionBase`1.m_Count">
            <summary>
            The number of elements in the list. This is only filled in when the Count property
            is accessed for the first time, and has a value of -1 otherwise.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ReadOnlyCollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.ReadOnlyCollectionBase`1"/> class
            using the default comparer.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ReadOnlyCollectionBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.ReadOnlyCollectionBase`1"/> class
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ReadOnlyListBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.ReadOnlyListBase`1"/> class
            using the default comparer.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ReadOnlyListBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.ReadOnlyListBase`1"/> class
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing items.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ReadOnlyListBase`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/>.
            </summary>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
            <param name="findItem">The object to locate in the <see cref="T:RedGate.Shared.Utils.Collections.ListBase`1"/>.</param>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.ReadOnlyListBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>The element at the specified index.</returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:RedGate.Shared.Utils.Collections.ReadOnlyListBase`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set.</exception>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ListChain`1.#ctor(System.Collections.Generic.IList{`0}[])">
            <summary>
            Creates a new ListChain.
            </summary>
            <param name="lists">lists to be wrapped as if they were a single list.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ListChain`1.Contains(`0)">
            <summary>
            Indicates whether or not the supplied object is contained in the list.
            Of course, in this case it is actually the wrapped lists that are checked.
            </summary>
            <param name="val">object to search for.</param>
            <returns>true if the object is a member of the list, otherwise false.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ListChain`1.IndexOf(`0)">
            <summary>
            Gets the index of the first occurrence of the supplied object in the list.
            </summary>
            <param name="val">object whose index is to be retrieved.</param>
            <returns>index of first occurrence, or -1 if the object does not appear in the list.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ListChain`1.GetEnumerator">
            <summary>
            Gets an enumerator over the members of this list.  Will iterate
            over all members of all sub-lists.
            </summary>
            <returns>enumerator over list members.</returns>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.ListChain`1.Item(System.Int32)">
            <summary>
            Retrieves the object at the specified index.  Setting values
            is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">The setter was called.</exception>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.ListChain`1.Count">
            <summary>
            Gets the number of items in the list (i.e. the sum of all
            items in the sub-lists).
            </summary>
            <remarks>We can't really cache this, as if the containing lists change this needs to change as well.</remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2">
            <summary>
            A read-only dictionary.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <remarks>The only method that needs to be implemented is GetEnumerator; everything else is implemented using the enumerator.
            As a result the other methods have an efficiency of O(n); it is recommended that you override methods that you will use regularly.</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2"/> class
            using the default key comparer.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2"/> class
            using the specified key comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when com comparing keys.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/> contains
            an element with the specified <paramref name="key"/>.
            </summary>
            <returns>
            <em>true</em> if the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/> contains
            an element with the key; otherwise, <em>false</em>.
            </returns>
            <param name="key">The key to locate in the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <em>true</em> if the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/> contains
            an element with the specified key; otherwise, <em>false</em>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <remarks>Uses: <see cref="M:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2.ContainsKey(`0)"/>, get indexer</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2.Comparer">
            <summary>
            The comparer used when comparing keys
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>The element with the specified key.</returns>
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.NotSupportedException">The property is set.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the
            object that implements <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </returns>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.Collections.ReadOnlyDictionaryBase`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the
            object that implements <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBase`2"/>.
            </returns>
            <remarks>Uses: Enumerator</remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.DictionaryBasedSet`1">
            <summary>
            Class containing all the ICollection implementations for a dictionary-backed Set, that simply pass the relevant methods calls
            to the private backing dictionary.
            </summary>
            <typeparam name="T">The type to store in the set.</typeparam>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.DictionaryBasedSet`1.AddIfNotExists(`0)">
            <summary>
            Adds <paramref name="item"/> to the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBasedSet`1"/> if it does not already exist.
            </summary>
            <param name="item">The item to add to the <see cref="T:RedGate.Shared.Utils.Collections.DictionaryBasedSet`1"/>.</param>
            <returns><em>True</em> if the item was successfully added, <em>false</em> if it is in the set already.</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.Set`1">
            <summary>
            A collection representing an unordered set of unique values.
            </summary>
            <typeparam name="T">The type to store in this set.</typeparam>
            <remarks>
            Please note that behaviour of the set operations is undefined between two Sets
            that use different <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>s.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Set`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.Set`1"/> class
            with the default equality comparer and default capacity.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.Set`1"/> class
            with the contents copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            using the default equality comparer.
            </summary>
            <param name="src">The items to add to the Set.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Set`1.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.Set`1"/> class
            with the specified initial capacity and default equality comparer.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.Set`1"/> class
            with the default capacity and the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Set`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.Set`1"/> class
            with the specified capacity and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="capacity">The initial capacity.</param>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.Set`1"/> class
            with the contents copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="src">The items to add to the Set.</param>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.Collections.SortedSet`1">
            <summary>
            A collection representing an ordered set of unique values.
            </summary>
            <typeparam name="T">The type to store in this set.</typeparam>
            <remarks>
            Please note that behaviour of the set operations is undefined
            between two SortedSets that use different <see cref="T:System.Collections.Generic.IComparer`1"/>s.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.SortedSet`1.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.SortedSet`1"/> class
            with the default equality comparer.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.SortedSet`1"/> class
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.SortedSet`1"/> class
            with the contents copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            using the default equality comparer.
            </summary>
            <param name="src">The items to add to the Set.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Collections.SortedSet`1"/> class
            with the contents copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="src">The items to add to the Set.</param>
            <param name="comparer">The equality comparer to use.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Collections.SortedSet`1.ToList">
            <summary>
            Returns a list with the contents of this <see cref="T:RedGate.Shared.Utils.Collections.SortedSet`1"/>.
            Note that the list is not backed by the set; any additions to the list or set
            will not be reflected in the other data structure.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with the same contents as this Set, in order.</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.AbstractHelpPrinter">
            <summary>
            Provides default methods for printing the title &amp; general help message
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.IHelpPrinter">
            <summary>
            Defines methods to print help text to a <see cref="T:System.IO.TextWriter"/> object
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.IHelpPrinter.PrintProductTitleLine(RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition,System.IO.TextWriter)">
            <summary>
            Print the header of the general help message
            </summary>
            <param name="spec">The command-line argument specification</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to output onto</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.IHelpPrinter.PrintHelp(RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition,System.IO.TextWriter)">
            <summary>
            Print the general help message
            </summary>
            <param name="spec">The command-line argument specification</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to output onto</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.AbstractHelpPrinter.PrintEnumeration(System.String,RedGate.Shared.Utils.CommandLine.SubTypeMetaDefinition)">
            <summary>
            Gets a description of any associated enumeration for use in the verbose
            help message.
            </summary>
            <param name="name">enumeration name</param>
            <param name="subType">for a compound argument this should be non-null, but otherwise should be null</param>
            <returns></returns>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.AbstractHelpPrinter.Spec">
            <summary>
            Gets the command-line argument definition
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.AbstractHelpPrinter.Writer">
            <summary>
            Gets the <see cref="T:System.IO.TextWriter"/> to output to
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition">
            <summary>
            Parent class of all command-line meta-definition classes wrapping
            a single XML element in which the meta-definition is stored.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition.m_Definition">
            <summary>
            Wrapped XML element containing meta-definition.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition"/> class containing an empty definition
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition"/> class wrapping the specified XML definition
            </summary>
            <param name="definition">XML element wrapping meta-definition</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition.GetAttributeStringValue(System.String)">
            <summary>
            Shortcut.  Gets the string value of the attribute with the specified
            name belonging to the wrapped XML element.
            </summary>
            <param name="name">attribute name</param>
            <returns>string value of attribute</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition.GetAttributeBooleanValue(System.String,System.Boolean)">
            <summary>
            Shortcut.  Gets the boolean vlaue of the attribute with the specified name
            belonging to the wrapped XML element.
            </summary>
            <param name="name">attribute name</param>
            <param name="dflt">default value if attribute does not exist, or contains a garbage value</param>
            <returns>boolean value of attribute</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition.GetChildElementText(System.String)">
            <summary>
            Shortcut.  
            </summary>
            <param name="name">name of child element</param>
            <returns>enclosed text, or null if no such child element exists (or has no textual content)</returns>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition.Definition">
            <summary>
            Allows the XML element containing the meta-definition to be accessed.
            Can only be set if not already set in constructor.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.AbstractMetaDefinition.Text">
            <summary>
            Shortcut.  Accesses any text that might be wrapped by the enclosed
            XML element.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ArgOccurs">
            <summary>
            Enumeration indicating whether an argument can appear once in a given command-line,
            or multiple times.  The latter is useful for filtering rules etc.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgOccurs.Single">
            <summary>
            Only a single occurrence of the argument is permitted.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgOccurs.Multi">
            <summary>
            Multiple occurrences of the argument are permitted in the
            command-line.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ArgType">
            <summary>
            Enumerates the possible data types of command-line arguments
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgType.String">
            <summary>
            Default argument type.  If no type is specified the argument is assumed to be
            of type STRING.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgType.File">
            <summary>
            Technically directories are also files, but this type specifically refers to
            files that are not directories.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgType.Directory">
            <summary>
            Represents a directory pathname.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgType.Integer">
            <summary>
            Integer type.
            </summary>
            <remarks>
            Not supported.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgType.Long">
            <summary>
            Long type.
            </summary>
            <remarks>
            Not supported.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgType.Float">
            <summary>
            Floating point type.
            </summary>
            <remarks>
            Not supported.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgType.Double">
            <summary>
            Double-precision floating point type.
            </summary>
            <remarks>
            Not supported.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgType.Enum">
            <summary>
            Enumerated value.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgType.Compound">
            <summary>
            Argument value is of compound type.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition">
            <summary>
            Meta-definition of a command-line argument.  Wrapper around underlying XML element
            defining argument.  Holds information about the argument such as its name, data type,
            dependencies etc.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.TYPEMAP">
            <summary>
            Maps string type names onto values in the ArgType enumeration.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.#cctor">
            <summary>
            Just initialises the type map.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.GetType(System.String)">
            <summary>
            Gets the ArgType corresponding to the supplied string representation
            of an argument's data type.
            </summary>
            <param name="representation">string representation of argument data type</param>
            <returns>corresponding ArgType; if none can be found returns ArgType.String as a default</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.#ctor(RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition,System.String,System.Xml.XmlElement)">
            <summary>
            Constructor.  Supplied XML element must be a command-line argument meta-definition.
            </summary>
            <param name="cmdLineSpecName"></param>
            <param name="parent">parent command-line meta-definition</param>
            <param name="argSpec">argument meta-definition</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.GetAttributeValueArray(System.String)">
            <summary>
            Gets array of values for specified XML attribute.  Only really used for
            the Excludes and Depends attributes.
            </summary>
            <param name="attrName">name of XML attribute</param>
            <returns>string array of values held in attribute (multiple values must be comma-delimited)</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.IsExcluded(System.String)">
            <summary>
            Indicates whether or not the argument with the specified name is excluded by this
            argument.
            </summary>
            <param name="argName">name of argument</param>
            <returns>true if the argument is excluded, otherwise false</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.IsExcluded(RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition)">
            <summary>
            Indicates whether or not the specified argument is excluded by this argument.
            </summary>
            <param name="arg">argument meta-definition</param>
            <returns>true if the argument is excluded, otherwise false</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.IsDependency(System.String)">
            <summary>
            Indicates whether or not the argument with the specified name is a dependency
            of this argument.
            </summary>
            <param name="argName">name of argument</param>
            <returns>true if the argument is a dependency, otherwise false</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.IsDependency(RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition)">
            <summary>
            Indicates whether or not the specified argument is a dependency of this argument.
            </summary>
            <param name="arg">argument</param>
            <returns>true if the argument is a dependency, otherwise false</returns>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.HasAlias">
            <summary>
            Indicates whether or not the argument has an alias (useful shorthand
            for users).
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Alias">
            <summary>
            Gets the argument's alias.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.UndocumentedAliases">
            <summary>
            Gets an array of further aliases that this command has, but which are not to
            be documented in the help.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.HasDefault">
            <summary>
            Indicates whether or not the argument has a default value.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Default">
            <summary>
            Default value of argument.  Null if none is specified in the meta-definition.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Delimiter">
            <summary>
            Gets the delimiter used to separate multiple values.  The default delimiter
            is the comma character.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Excludes">
            <summary>
            Other command-line arguments that the argument may not be used in conjunction with.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Depends">
            <summary>
            Other command-line arguments that the argument depends upon; i.e. arguments that
            it must be used in conjunction with.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Name">
            <summary>
            Argument name.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Occurrences">
            <summary>
            Value indicating whether the argument may only appear once, or multiple times
            in a given command-line.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.IsRequired">
            <summary>
            Boolean value indicating whether or not the argument is required (i.e.
            whether or not the user must specify it on the command-line).
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.IsSupported">
            <summary>
            Boolean value indicating whether or not the argument is supported.
            Really only for debugging / development purposes.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Type">
            <summary>
            Data type of argument.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Min">
            <summary>
            Minimum value of argument.  Only valid for arguments of numeric
            type.
            </summary>
            <exception cref="T:System.FormatException">if the minimum specified in the XML document cannot be parsed as the correct numeric type</exception>
            <exception cref="T:System.OverflowException">if the minimum falls outside the range of values supported by the numeric type of the argument</exception>
            <exception cref="T:System.InvalidOperationException">if the property is accessed for a non-numeric argument</exception>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Max">
            <summary>
            Maximum value of argument.  Only valid for arguments of numeric
            type.
            </summary>
            <exception cref="T:System.FormatException">if the maximum specified in the XML document cannot be parsed as the correct numeric type</exception>
            <exception cref="T:System.OverflowException">if the maximum falls outside the range of values supported by the numeric type of the argument</exception>
            <exception cref="T:System.InvalidOperationException">if the property is accessed for a non-numeric argument</exception>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.CompoundDefinition">
            <summary>
            Compound type definition, if Type is defined as ArgType.Compound.  Compound
            arguments require multiple values of different types to be entered by the
            user.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.ValueName">
            <summary>
            Display name of any value that should be supplied for the argument.
            Displayed as part of help message.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Reference">
            <summary>
            Reference to enumeration definition.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Values">
            <summary>
            Indication of how many values a given occurrence of an argument
            may accept.  Either ValueMultiplicity.NONE, ValueMultiplicity.SINGLE
            or ValueMultiplicity.MULTI.  Note that it does not make sense for an
            argument to have its Occurrences property set to ArgOccurs.MULTI when
            this property is set to ValueMultiplicity.NONE.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition.Enumeration">
            <summary>
            Gets any associated enumeration definition for arguments whose type
            is ArgType.Enum.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.CommandLine">
            <summary>
            Very simple class for parsing and validating command-line, and returning
            parsed parameters (also supports arguments specified in an XML document).
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommandLine.s_OperationMode">
            <summary>
            General mode of operation of application.  Either quiet, normal or verbose.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLine.SetOperationMode(RedGate.Shared.Utils.CommandLine.OperationMode)">
            <summary>
            Sets the mode of operation: either quiet, normal or verbose.  The
            default is verbose.
            </summary>
            <param name="operationMode">mode of operation</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLine.ParseCommandLine(System.IO.Stream,System.String[])">
            <summary>
            Parses the supplied command-line arguments using the XML meta-definition read from
            the supplied input stream.
            </summary>
            <param name="metaDefinitionIn">stream from which XML meta-definition should be read</param>
            <param name="args">command-line arguments</param>
            <returns>parsed command-line arguments, or null if an error occurred (or the user requested the help message -- either way the application should exit)</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLine.ParseCommandLine(System.IO.Stream,System.String[],System.Boolean)">
            <summary>
            Parses the supplied command-line arguments using the XML meta-definition read from
            the supplied input stream.
            </summary>
            <param name="metaDefinitionIn">stream from which XML meta-definition should be read</param>
            <param name="args">command-line arguments</param>
            <param name="useCommon">
            Indicates whether or not the common command line specification, which defines common
            arguments etc, should be included.
            </param>
            <returns>parsed command-line arguments, or null if an error occurred (or the user requested the help message -- either way the application should exit)</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLine.ParseCommandLine(System.IO.Stream,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Parses the supplied command-line arguments using the XML meta-definition read from
            the supplied input stream.
            </summary>
            <param name="metaDefinitionIn">stream from which XML meta-definition should be read</param>
            <param name="args">command-line arguments</param>
            <param name="useCommon"></param>
            <param name="schemaValidate"></param>
            <returns>parsed command-line arguments, or null if an error occurred (or the user requested the help message -- either way the application should exit)</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLine.SetConsoleOut(System.String)">
            <summary>
            Redirects standard output to the specified file.
            </summary>
            <param name="fileName">output file</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLine.StartExecutionTimer">
            <summary>
            This is only really a test method.  Creates a timer that will print the
            amount of time elapsed in seconds when the application exits.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLine.Dispose">
            <summary>
            Disposes of the command line resources.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLine.OperationMode">
            <summary>
            Gets the mode of operation.  Either quiet, normal (the default), or
            verbose.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLine.IsNormalMode">
            <summary>
            Shortcut.  Indicates whether or not normal mode is selected.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLine.IsQuietMode">
            <summary>
            Shortcut.  Indicates whether or not quiet mode is selected.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLine.IsVerboseMode">
            <summary>
            Shortcut.  Indicates whether or not verbose mode is selected.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLine.IsFileWriteForced">
            <summary>
            Indicates whether or not overwriting of files that already
            exist has been forced.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            <summary>
            Exception thrown when an error occurs whilst parsing a command-line:
            for example, if the user does not supply a value for a required
            argument.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException"/> class.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition">
            <summary>
            Meta-definition of a command-line.  Describes the arguments the user
            can enter as part of the command-line.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.m_Args">
            <summary>
            Fast access to arguments, keyed on both name and alias.
            N.B.  This is case-insensitive.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.m_OrderedArgs">
            <summary>
            Allows help for arguments to be displayed in order that they
            appear in meta-definition.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.m_Enums">
            <summary>
            Fast access to enumerations, keyed on name.  N.B.  This is
            case-sensitive.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.HandleValidationEvent(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            If a validation error occurs when parsint the XML meta-definition,
            throws an exception.
            </summary>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException">if a validation error has occurred</exception>
            <param name="sender">originating object</param>
            <param name="ev">event</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new command-line meta-definition read as XML from the supplied input
            stream.
            </summary>
            <param name="metaDefinitionIn">stream from which to read XML meta-definition</param>
            <param name="useCommon">Indicates whether or not the common command-line definition should be included.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Creates a new command-line meta-definition read as XML from the supplied input
            stream.
            </summary>
            <param name="metaDefinitionIn">stream from which to read XML meta-definition</param>
            <param name="useCommon">Indicates whether or not the common command-line definition should be included.</param>
            <param name="schemaValidate">
            Indicates whether or not schema validation should be carried out.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.CheckEnumsComplain">
            <summary>
            
            </summary>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException">if any argument references an undefined enumeration</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.InitFromDefinition(System.Xml.Schema.XmlSchema,System.IO.Stream,System.Boolean)">
            <summary>
            Initialises the command-line definition from the supplied specification (read as XML from the
            input stream).  Validates against the supplied XML schema.  The boolean parameter is used
            to indicate whether the product-specific or general specification is being read.
            </summary>
            <param name="schema">schema used to validate command-line meta-definitions</param>
            <param name="metaDefinitionIn">stream from which XML meta-definition should be read</param>
            <param name="productSpecific">true to indicate a product specific meta-definition, false to indicate the general meta-definition</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.PrintHelpMessage(System.IO.TextWriter,System.Boolean)">
            <summary>
            Prints the full help message to the specified writer.
            </summary>
            <param name="writer">writer</param>
            <param name="html"></param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.PrintHelpMessage(System.Boolean)">
            <summary>
            Prints the help message to standard output.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.PrintProductTitleLine(System.IO.TextWriter,System.Boolean)">
            <summary>
            Outputs the standard header for the product being run...
            </summary>
            <param name="writer"></param>
            <param name="html"></param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.GetEnumeration(System.String)">
            <summary>
            Gets the enumeration with the specified name.
            </summary>
            <param name="name">name of enumeration</param>
            <returns>corresponding enumeration definition</returns>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.Item(System.String)">
            <summary>
            Allows access to argument meta-definitions by either name or alias.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.Name">
            <summary>
            Name of meta-definition.
            </summary>
            <remarks>I don't think this is actually used.</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.RequireOneOf">
            <summary>
            List of arguments of which one is required to be present
            on any command-line issued by the user.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.Product">
            <summary>
            Product name.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.Copyright">
            <summary>
            Copyright notice.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.AdditionalCopyright">
            <summary>
            Additional Copyright notice.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.Command">
            <summary>
            Command name.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.Description">
            <summary>
            Short description of command.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.HasRequiredArguments">
            <summary>
            Indicates whether or not the command-line has any required arguments.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition.Arguments">
            <summary>
            Access to dictionary of arguments.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException">
            <summary>
            This exception is thrown whenever a problem is encountered with
            a command-line meta-definition XML file.  As such it should never
            be seen by users.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException"/> class.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.CommonArguments">
            <summary>
            Class containing names of some common arguments.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.HELP">
            <summary>
            Used to display help.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.HTML">
            <summary>
            Used to output help to console as HTML.
            </summary>
            <remarks>
            Can be useful if you want to generate some form of help
            document for users.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.QUIET">
            <summary>
            No output at all unless there is a catastrophic failure.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.VERBOSE">
            <summary>
            Lots of output.
            </summary>
            <remarks>
            Can be used in conjunction with <see cref="F:RedGate.Shared.Utils.CommandLine.CommonArguments.HELP"/> to get
            additional information.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.ARGFILE">
            <summary>
            Used to specify XML file containing command line arguments.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.INCLUDE">
            <summary>
            Includes objects based on their name.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.EXCLUDE">
            <summary>
            Excludes objects based on their name.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.OUT">
            <summary>
            Used to specify filename to which console output should be
            written.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.OUTPUTWIDTH">
            <summary>
            Used for formatting console output to a specified width.
            </summary>
            <remarks>
            If not specified will default to the width of the current
            console window.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.FORCE">
            <summary>
            Used to indicate that files that already exist should be
            overwritten.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CommonArguments.EXECUTIONTIME">
            <summary>
            Causes execution time of process to be output.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CommonArguments.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.CompoundTypeMetaDefinition">
            <summary>
            Simple abstraction of a compound type meta-definition.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.CompoundTypeMetaDefinition.m_SubTypes">
            <summary>
            Definitions of sub-types making up compound type.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.CompoundTypeMetaDefinition.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs a new compound type meta-definition.
            </summary>
            <param name="compoundMetaDef">XML element defining compound type</param>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException">if there is a problem with the supplied definition</exception>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CompoundTypeMetaDefinition.Count">
            <summary>
            Number of sub-types in compound type definition.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.CompoundTypeMetaDefinition.Item(System.Int32)">
            <summary>
            Accesses sub-type definitions by index.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ConsoleCtrlHandler">
            <summary>
            Allows console apps easy access to the different types of events caused by the Ctrl key + another key
            </summary>
            <exclude />
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ConsoleCtrlHandler.HandlerRoutine">
            <summary>
            Represents a method that can handle the different types of Ctrl key presses
            </summary>
            <param name="CtrlType"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ConsoleCtrlHandler.CtrlTypes">
            <summary>
            Represents the different type of Ctrl key presses available
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ConsoleHelper">
            <summary>
            Gives information about the console from which the application is being run,
            such as the number of lines and columns.  It is useful to know how wide the
            console is when formatting output.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ConsoleHelper.CaptureModeOutput">
            <summary>
            Executes cmd.exe /C mode con to get information about the console.  Returns
            all output to standard out from this process as a string.
            </summary>
            <returns>console output as string</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ConsoleHelper.CaptureParameters">
            <summary>
            Grabs the console parameters from the standard output of the mode con
            process.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> of parameter names mapped to integer values</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ConsoleHelper.InitModeParameters">
            <summary>
            Initialiases console information.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ConsoleHelper.CheckInit">
            <summary>
            Checks whether or not console information has been initialised, and if not
            carries out the initialisation.
            </summary>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ConsoleHelper.Lines">
            <summary>
            Number of lines in console display (effectively the screen buffer length)
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ConsoleHelper.Columns">
            <summary>
            Number of columns in display.  Useful for correct formatting
            of output.  Setter allows value to be overridden.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ConsoleHelper.KeyboardRate">
            <summary>
            Keyboard auto-repeat rate (chars / second I believe).
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ConsoleHelper.KeyboardDelay">
            <summary>
            Keyboard auto-repeat delay (seconds I believe).
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ConsoleHelper.CodePage">
            <summary>
            The code page being used to map extensions to the ASCII
            character set to numbers 128 to 255 inclusive.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ConsoleKeyboard">
            <summary>
            Provides direct access to keyboard input from the console
            </summary>
            <exclude />
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ConsoleProgressTaskExecutor">
            <summary>
            A version of the ProgressDialogBox for console apps.
            </summary>
            <remarks>
            This code is designed to only be run on it's own. (ie DO NOT Run another ConsoleProgressTaskExecutor
            in another thread)
            </remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor">
            <summary>
            Executes a set of <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTasks"/> in a simple non-gui way.
            </summary>
            <remarks>
            This code is designed to only be run on its own, and nasty things will happen if another one is run
            on the same thread.
            </remarks>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.IProgressTaskExecutor">
            <summary>
            Describes methods to handle a set of <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/>s.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.IProgressTaskExecutor.SetTasks(System.Collections.Generic.IList{RedGate.Shared.Utils.ProgressTasks.ProgressTask})">
            <summary>
            Assigns the task executor the specified <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/>s to execute.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.IProgressTaskExecutor.Run">
            <summary>
            Runs the assigned <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.IProgressTaskExecutor.CancelOperation">
            <summary>
            Cancels the currently running <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/>s.
            </summary>
            <returns><em>True</em> if the task execution was successfully cancelled</returns>
        </member>
        <member name="E:RedGate.Shared.Utils.ProgressTasks.IProgressTaskExecutor.WorkerThreadExceptionEvent">
            <summary>
            Occurs when a worker thread throws an exception.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Utils.ProgressTasks.IProgressTaskExecutor.WorkerThreadFinishedEvent">
            <summary>
            Occurs when a worker thread finishes.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor"/> class
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.Block">
            <summary>
            Wait until the call is finished!
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.ResetInterface(System.Int32)">
            <summary>
            
            </summary>
            <param name="nStyle"></param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.TaskUpdateProgressBarPrivate(System.Object,RedGate.Shared.Utils.StatusEventArgs)">
            <summary>
            Updates the current message and percentage.
            </summary>
            <param name="sender">The object that caused the event.</param>
            <param name="e">A <see cref="T:RedGate.Shared.Utils.StatusEventArgs"/> object indicating the event arguments.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.TaskUpdateTaskName(System.Object,RedGate.Shared.Utils.StatusEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.ChangedTaskId(System.Int32)">
            <summary>
            Called when a new task has started executing.
            </summary>
            <param name="nTaskId">The task ID of the executing task.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.DoTasks">
            <summary>
            This is the main loop that does all the work. It is called entirely on a separate thread.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.OutputTaskName(System.String)">
            <summary>
            Called when a new task has started executing.
            </summary>
            <param name="name">The task name that has started executing.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.OnWorkerThreadFinished(System.Object,RedGate.Shared.Utils.ProgressTasks.WorkerThreadFinishedEventArgs)">
            <summary>
            Called when a worker thread has finished.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="eventArgs">A <see cref="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadFinishedEventArgs"/> containing the event arguments.</param>		
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.OnWorkerThreadException(System.Object,RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs)">
            <summary>
            Called when a worker thread has thrown an exception.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="eventArgs">A <see cref="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs"/> containing the event arguments.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.HaveAllTasksCompleted">
            <summary>
            Returns a value indicating if all the assigned tasks have completed.
            </summary>
            <returns><em>True</em> if the assigned tasks have all completed execution.</returns>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.CurrentText">
            <summary>
            A message obtained from the currently executing task.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.CurrentPercentage">
            <summary>
            Gets a value indicating the percentage of the task executed.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.CurrentTaskName">
            <summary>
            The currently running task name.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.CurrentTaskId">
            <summary>
            The current running task id.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.BlockOnRun">
            <summary>
            Gets and sets a value indicating if the <see cref="M:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.Run"/> method should block until the tasks have executed.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.SimpleProgressTaskExecutor.StateOfTasks">
            <summary>
            Gets the current state of the executing task
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ConsoleProgressTaskExecutor.#ctor">
            <summary>
            Console style ProgressExecutor. It is based apon the Simple TaskExecutor...
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ConsoleProgressTaskExecutor.Block">
            <summary>
            This is the blocking implementation. Overide this function if you wish to make develop
            your own specific blocking style call
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ConsoleProgressTaskExecutor.OutputTaskName(System.String)">
            <summary>
            Output the taskName
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ConsoleProgressTaskExecutor.TaskUpdateProgressBarPrivate(System.Object,RedGate.Shared.Utils.StatusEventArgs)">
            <summary>
            Impelements the ProgressTask Indication. It prints out only the current percentage.
            </summary>
            <param name="sender">Typically the task item</param>
            <param name="e">the Status event args that are specified by the task....</param>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ConsoleProgressTaskExecutor.BlockOnRun">
            <summary>
            This implementation of this code can only Block when run. Do not attempt to run on blocked.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.DatabaseObjects">
            <summary>
            Enumeration representing different types of database object.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.All">
            <summary>
            All objects.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Table">
            <summary>
            Table.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.StoredProcedure">
            <summary>
            Stored procedure.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.View">
            <summary>
            Views.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.FullTextCatalog">
            <summary>
            Full text catalog.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Function">
            <summary>
            Function.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Role">
            <summary>
            Role.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Rule">
            <summary>
            Rule.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.User">
            <summary>
            User.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.UserDefinedType">
            <summary>
            User defined type.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Trigger">
            <summary>
            Trigger
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.DdlTrigger">
            <summary>
            DDL Trigger
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Assembly">
            <summary>
            Assembly
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Synonym">
            <summary>
            Synonym
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.XmlSchemaCollection">
            <summary>
            XML Schema Collection
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.MessageType">
            <summary>
            Message Type
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Contract">
            <summary>
            Contract
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Queue">
            <summary>
            Queue
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Service">
            <summary>
            Service
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Route">
            <summary>
            Route
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.EventNotification">
            <summary>
            Event Notification
            </summary>		
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.PartitionScheme">
            <summary>
            Partition Scheme
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.PartitionFunction">
            <summary>
            Partition Function
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Schema">
            <summary>
            Schema
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.ServiceBinding">
            <summary>
            Service Binding
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.Certificate">
            <summary>
            Certificate
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.SymmetricKey">
            <summary>
            Symmetric Key
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.AsymmetricKey">
            <summary>
            Asymmetric Key
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DatabaseObjects.FullTextStoplist">
            <summary>
            Full text stoplist
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcherStyle">
            <summary>
            The style of regex used.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcherStyle.REGEX">
            <summary>
            Standard RegEx style 
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcherStyle.LITERAL">
            <summary>
            Exact string match
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcherStyle.DOS_STYLE">
            <summary>
            DOS Style text searching (* and ?)
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcherStyle.SQL_STYLE">
            <summary>
            SQL Style text searching (% and _)
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcher">
            <summary>
            Class to convert between different styles of regex (see <see cref="T:RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcherStyle"/>).
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcher.ConvertString(System.String,RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcherStyle)">
            <summary>
            This function will convert an expression from one style into a proper RegEx.
            </summary>
            <param name="input">Input string.</param>
            <param name="type">The source type of expression.</param>
            <returns>A proper regex expression.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcher.DOSExpressionToRegEx(System.String)">
            <summary>
            DOS search string will have 
            	* meaning any chars.
            	? meaning single char.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectNameExpressionMatcher.SQLExpressionToRegEx(System.String)">
            <summary>
            SQL search string
            	% meaning any chars.
            	_ meaning single char.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.DBObjectNameRuleFactory">
            <summary>
            Simple rule factory implementation.  Creates rules that are used
            to include / exclude SQL server objects based on their unique names.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.IRuleFactory">
            <summary>
            Factory interface implemented by classes used to create rules.
            </summary>
            <remarks>
            Rules are used for including and excluding objects.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.IRuleFactory.CreateRule(RedGate.Shared.Utils.CommandLine.RuleType,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates rules based on the supplied type and descriptor.
            </summary>
            <param name="type">
            Rule type.
            </param>
            <param name="descriptor">
            Rule definition(s).
            </param>
            <returns>
            Array of rules.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectNameRuleFactory.CreateRule(RedGate.Shared.Utils.CommandLine.RuleType,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a rule of the specified type using the supplied definition.
            The definition must be an IList containing two items, the first of which
            is a type of database object to which the rule will apply, whilst the
            second is a regular expression that will be used to find matching objects
            based on their names.
            </summary>
            <param name="type">rule type - either include or exclude</param>
            <param name="definition">rule definition</param>
            <returns>newly created rule</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.DBObjectNameRuleMatcher">
            <summary>
            Matches database objects against rules based on their unique names.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.IRuleMatcher">
            <summary>
            Interface for classes that are used to match rules.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.IRuleMatcher.Matches(RedGate.Shared.Utils.CommandLine.Rule,System.String,System.Object[])">
            <summary>
            Indicates whether or not the specified
            </summary>
            <param name="rule">Rule.</param>
            <param name="target">Hmm... yes.</param>
            <param name="targetValues">Name(s) of objects to match.</param>
            <returns>Result of attempt to match rule.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectNameRuleMatcher.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="caseSensitive">
            Indicates whether matcher should be case-sensitive or not.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectNameRuleMatcher.Matches(RedGate.Shared.Utils.CommandLine.Rule,System.String,System.Object[])">
            <summary>
            Matches database object name against specified rule.
            </summary>
            <param name="rule">rule</param>
            <param name="target"></param>
            <param name="objectName">name of database object</param>
            <returns>true if name is matched by rule, otherwise false</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.DBObjectNameRuleMatcherFactory">
            <summary>
            Creates a matcher for rules used to include / exclude SQL Server objects
            in SQL Compare schema comparison.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.IRuleMatcherFactory">
            <summary>
            Factory interface for creating <see cref="T:RedGate.Shared.Utils.CommandLine.IRuleMatcher"/>s.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.IRuleMatcherFactory.CreateMatcher(RedGate.Shared.Utils.CommandLine.Rule)">
            <summary>
            Creates a matcher capable of matching the supplied rule.
            </summary>
            <param name="rule">Rule.</param>
            <returns>Matcher capable of matching the supplied rule.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectNameRuleMatcherFactory.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:RedGate.Shared.Utils.CommandLine.DBObjectNameRuleMatcherFactory"/>.
            </summary>
            <param name="caseSensitive">
            Indicates whether or not the created <see cref="T:RedGate.Shared.Utils.CommandLine.IRuleMatcher"/>s
            should be case-sensitive or not.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectNameRuleMatcherFactory.CreateMatcher(RedGate.Shared.Utils.CommandLine.Rule)">
            <summary>
            Just returns a matcher that will match database objects using their
            names.
            </summary>
            <param name="rule">rule</param>
            <returns>corresponding matcher</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.DBObjectTypeRuleFactory">
            <summary>
            Simple rule factory implementation.  Creates rules that are used to
            include / exclude types of SQL server objects.  If the rule does not
            apply to objects on the basis of their type alone rule creation is
            deferred to the superclass, which creates rules based on name and type.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectTypeRuleFactory.CreateRule(RedGate.Shared.Utils.CommandLine.RuleType,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a rule of the specified type using the supplied definition.
            The definition must be an IList containing two items, the first of which
            is a type of database object to which the rule will apply, whilst the
            second is a regular expression that will be used to find matching objects
            based on their names.
            </summary>
            <param name="type">rule type - either include or exclude</param>
            <param name="definition">rule definition</param>
            <returns>newly created rule</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.DBObjectTypeRuleMatcher">
            <summary>
            Matches database objects against rules based on their unique names.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectTypeRuleMatcher.Matches(RedGate.Shared.Utils.CommandLine.Rule,System.String,System.Object[])">
            <summary>
            Matches database object name against specified rule.
            </summary>
            <param name="rule">rule</param>
            <param name="target">Hmm... yes.</param>
            <param name="objectName">name of database object</param>
            <returns>true if name is matched by rule, otherwise false</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.DBObjectTypeRuleMatcherFactory">
            <summary>
            Creates a matcher for rules used to include / exclude SQL Server objects
            in SQL Compare schema comparison.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectTypeRuleMatcherFactory.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:RedGate.Shared.Utils.CommandLine.DBObjectTypeRuleMatcherFactory"/>.
            </summary>
            <param name="caseSensitive">
            Indicates whether or not the created <see cref="T:RedGate.Shared.Utils.CommandLine.IRuleMatcher"/>s
            should be case-sensitive or not.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.DBObjectTypeRuleMatcherFactory.CreateMatcher(RedGate.Shared.Utils.CommandLine.Rule)">
            <summary>
            Just returns a matcher that will match database objects using their
            names.
            </summary>
            <param name="rule">rule</param>
            <returns>corresponding matcher</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.EnumMetaDefinition">
            <summary>
            Representation of an enumeration definition.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.EnumMetaDefinition.m_Values">
            <summary>
            Value definitions, keyed by user-value.
            N.B.  Case-insensitive.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.EnumMetaDefinition.m_OrderedValues">
            <summary>
            List of values as encountered in the XML definition: ensures a
            sensible ordering when the verbose help message is displayed.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.EnumMetaDefinition.#ctor(System.String,System.Xml.XmlElement)">
            <summary>
            Constructs a new enumeration definition from the supplied XML
            element.
            </summary>
            <param name="cmdLineSpecName"></param>
            <param name="enumSpec">XML enumeration definition (DON'T get this confused with the enumeration facet in an XML schema</param>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException">if there is a problem with the supplied definition</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.EnumMetaDefinition.ContainsValue(System.String)">
            <summary>
            Indicates whether or not the supplied value is a valid value or alias
            defined within the enumeration.
            </summary>
            <param name="valueOrAlias">value to test</param>
            <returns>true if the value is defined as a user value or alias in the enumeration, otherwise false</returns>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.EnumMetaDefinition.Name">
            <summary>
            Name of enumeration.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.EnumMetaDefinition.Item(System.String)">
            <summary>
            Fast access to enumeration value definitions by user value or alias.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.EnumValMetaDefinition">
            <summary>
            Definition of an individual value within an enumeration.  Basically this
            class is a VERY thin wrapper around an XML element defining the value.
            </summary>
            <remarks>System values aren't yet supported... do we need them?</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.EnumValMetaDefinition.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructs a new enumeration value meta-definition from the supplied XML
            element.
            </summary>
            <param name="enumValSpec">XML element</param>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.EnumValMetaDefinition.UserValue">
            <summary>
            User value: i.e. the value that is (i) visible to the user in the help message,
            and (ii) that the user should enter at the command-prompt or in the XML argument
            specification.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.EnumValMetaDefinition.UserAlias">
            <summary>
            User alias: shorthand that can be used instead of user value.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.EnumValMetaDefinition.UserUndocumentedAliases">
            <summary>
            Gets an array of further aliases that this command has, but which are not to
            be documented in the help.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.EnumValMetaDefinition.Description">
            <summary>
            Description of value.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ExecutionException">
            <summary>
            Thrown if an error occurs whilst executing a command line application.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ExecutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.ExecutionException"/> class.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.ExecutionException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.ExecutionException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.ExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ExitCodes">
            <summary>
            Wrapper around a bunch of "well-defined" exit codes.  These are either defined
            as UNIX shell script exit codes, or those defined in sysexits.h (available from
            multiple sources on the web).
            </summary>
            <remarks>
            POSIX compliant exit codes are integer values in the range 0 - 255.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.OK">
            <summary>
            Successful termination.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.GeneralError">
            <summary>
            General error.  If an error occurs that is not covered
            by any of the exit codes listed below it can be appropriate to
            use this code, however it may be more informative to define a
            custom code in the range 2 &lt; exit code &lt; 64 or 
            78 &lt; exit code &lt; 126.  It is probably best to avoid codes
            that are &gt;= 128 as these are used for fatal error signals and
            therefore use of such codes could be misleading.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.ShellBuiltinMisuse">
            <summary>
            Misuse of shell builtins (bash).
            </summary>
            <remarks>
            DO NOT USE.  This has a very particular meaning and
            is rarely seen.  Should not be used as could confuse
            users of our products who use cygwin or similar.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_Duplication">
            <summary>
            Duplicate argument definition in command line specification.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_InvalidReference">
            <summary>
            Reference to non-existent entity in command line specification.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_InvalidDefault">
            <summary>
            Invalid default value in argument definition in command line
            specification.  E.g. for an enumeration the specified default
            is not one of the enumeration values.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_InvalidRange">
            <summary>
            Invalid range specified for numeric argument.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_InvalidType">
            <summary>
            Invalid type specified.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_Dependency">
            <summary>
            Unsatisfied dependency or violated exclusion when user runs
            command line.  E.g. arg2 depends on arg1 but user specifies
            arg2 without specifying arg1.  Also returned if invalid
            dependencies / exclusions are defined in the command line
            specification.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_Unreachable">
            <summary>
            Argument can never be used.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_InvalidOverride">
            <summary>
            Overridden argument definition is invalid.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_DoesNotAcceptValue">
            <summary>
            Specified argument does not accept values.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_ValueOutOfRange">
            <summary>
            Specified value is out of range.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_ValueOverflow">
            <summary>
            Specified value causes numeric overflow.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_InvalidValue">
            <summary>
            Specified value is invalid.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.RedGate_InvalidLicence">
            <summary>
            Software license is invalid.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.Usage">
            <summary>
            Command-line usage error.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes._Base">
            <summary>
            Base value for error messages defined in sysexits.h.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.DataError">
            <summary>
            Data format error.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.NoInput">
            <summary>
            Cannot open input.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.NoUser">
            <summary>
            Addressee unknown.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.NoHost">
            <summary>
            Host name unknown.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.Unavailable">
            <summary>
            Service unavailable.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.Software">
            <summary>
            Internal software error.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.OSError">
            <summary>
            System error (e.g. cannot fork).
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.OSFile">
            <summary>
            Critical OS file missing.
            </summary>
            <remarks>
            I cannot think of a valid reason for using this: if it were
            ever to happen I think the application would simply crash and
            the OS would assign this exit code.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.CantCreate">
            <summary>
            Cannot create (user) output.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.IOError">
            <summary>
            Input / output error.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.TemporaryFailure">
            <summary>
            Temporary failure; user is invited to retry.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.Protocol">
            <summary>
            Remote error in protocol.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.NoPermission">
            <summary>
            Permission denied.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.Configuration">
            <summary>
            Configuration error.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes._Max">
            <summary>
            Maximum value for error messages defined in sysexits.h.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.CannotExecute">
            <summary>
            Command invoked cannot execute due to a permission
            problem or because the command is not an executable.
            </summary>
            <remarks>
            DO NOT USE.  If you get to the point of wanting to use an
            exit code your command has already executed.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.CommandNotFound">
            <summary>
            Command not found.
            </summary>
            <remarks>
            DO NOT USE.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.InvalidExitCode">
            <summary>
            Invalid argument to exit (e.g. a floating point value).
            Exit codes must be integers in the range 0 - 255.  An integer
            value outside this range will return only the least significant
            8 bits to the parent process.
            </summary>
            <remarks>
            DO NOT USE.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes._FatalErrorSignalBase">
            <summary>
            Base for fatal error signals.  So the actual exit code will be
            128 + n where n is the fatal error signal.  E.g. on a *nix system
            kill -9 $PPID would result in a return value of 137 (= 128 + 9).
            </summary>
            <remarks>
            DO NOT USE.  OS will assign I believe.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.Control_C">
            <summary>
            Program terminated by Control-C (fatal error signal 2).
            </summary>
            <remarks>
            DO NOT USE.  OS will assign.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ExitCodes.ExitStatusOutOfRange">
            <summary>
            Exit status out of range.  May not be returned by OS if out of range
            value is specified: this could just result in the least significant
            8 bits being returned.
            </summary>
            <example>
            DO NOT USE.
            </example>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ExitCode">
            <summary>
            Allows setting of current exit code.  Once exit code has been set to anything
            other than OK it cannot be changed.  N.B.  Further changes are ignored: no
            exception is thrown.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.ExitCode.Value">
            <summary>
            Program exit code.
            </summary>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.FatalExecutionException">
            <summary>
            Thrown if a fatal exception occurs whilst executing a command line
            application.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.FatalExecutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.FatalExecutionException"/> class.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.FatalExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.FatalExecutionException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.FatalExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.FatalExecutionException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.FatalExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.CommandLine.FatalExecutionException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.HtmlHelpPrinter.Escape(System.String)">
            <summary>
            Escapes the specified string value for angle brackets (lt / gt) and ampersands.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.RuleMatchResult">
            <summary>
            Indicates the result of any attempt to see if an object or type
            matches a rule.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleMatchResult.Matches">
            <summary>
            Indicates that the rule matches.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleMatchResult.DoesNotMatch">
            <summary>
            Indicates that the rule does not match.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleMatchResult.DoesNotApply">
            <summary>
            Indicates that the rule does not apply.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.Logger">
            <summary>
            Provides logging functionality for command line applications.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.Logger.UNHANDLEDEXCEPTION">
            <summary>
            Log level indicating unhandled exception occurred.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.Logger.FATALERROR">
            <summary>
            Log level indicating fatal error occurred.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.Logger.ERROR">
            <summary>
            Log level indicating error occurred.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.Logger.WARNING">
            <summary>
            Log level indicating warning message.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.Logger.NORMAL">
            <summary>
            Log level indicating normal information message.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.Logger.VERBOSE">
            <summary>
            Log level indicating verbose information message.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.Logger.DEBUGGING">
            <summary>
            Log level indicating debugging message.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Log(System.String,System.Int32)">
            <summary>
            Logs the specified message at the specified leve.
            </summary>
            <param name="message">
            Message string.
            </param>
            <param name="level">
            Value indicating level - one of the values defined in this class.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Log(System.String,System.Exception,System.Int32)">
            <summary>
            Logs the specified message at the specified leve.
            </summary>
            <param name="message">
            Message string.
            </param>
            <param name="exception">
            Any exception that occurred.
            </param>
            <param name="level">
            Value indicating level - one of the values defined in this class.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Log(System.String)">
            <summary>
            Logs a normal information message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Log(System.String,System.Exception)">
            <summary>
            Logs a normal information message.
            </summary>
            <param name="message">Message.</param>
            <param name="exception">
            Any exception that occurred.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Verbose(System.String)">
            <summary>
            Logs a verbose information message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Verbose(System.String,System.Exception)">
            <summary>
            Logs a verbose information message.
            </summary>
            <param name="message">Message.</param>
            <param name="exception">
            Any exception that occurred.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Debug(System.String)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Debug(System.String,System.Exception)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="message">Message.</param>
            <param name="exception">
            Any exception that occurred.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Warn(System.String)">
            <summary>
            Logs a warning.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Warn(System.String,System.Exception)">
            <summary>
            Logs a warning.
            </summary>
            <param name="message">Message.</param>
            <param name="exception">
            Any exception that occurred.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Error(System.String)">
            <summary>
            Logs an error.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.Error(System.String,System.Exception)">
            <summary>
            Logs an error.
            </summary>
            <param name="message">Message.</param>
            <param name="exception">
            Any exception that occurred.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.FatalError(System.String)">
            <summary>
            Logs a fatal error.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.FatalError(System.String,System.Exception)">
            <summary>
            Logs a fatal error.
            </summary>
            <param name="message">Message.</param>
            <param name="exception">
            Any exception that occurred.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.UnhandledException(System.Exception)">
            <summary>
            Logs an unhandled exception.
            </summary>
            <param name="exception">Exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Logger.UnhandledException(System.String,System.Exception)">
            <summary>
            Logs an unhandled exception.
            </summary>
            <param name="message">Message.</param>
            <param name="exception">Exception.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.OperationMode">
            <summary>
            Enumeration whose values indicate the mode of operation of
            the command-line application.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.OperationMode.Quiet">
            <summary>
            No output apart from fatal errors.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.OperationMode.Normal">
            <summary>
            A normal level of output (i.e. enough to know what is going on).
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.OperationMode.Verbose">
            <summary>
            Detailed output.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.Parameters">
            <summary>
            Class wrapping parsed command-line arguments.  Arguments are parsed either
            directly from the command-line, or from an XML file specified by the user
            via the /argfile switch.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.#cctor">
            <summary>
            Initialises command-line parsing regexes.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.Parameters.m_Spec">
            <summary>
            Meta-definition of command-line.  Used to validate arguments.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.Parameters.m_Parameters">
            <summary>
            Dictionary of parsed arguments, keyed on name (NOT alias) only.
            Arguments are stored as follows: (i) single argument values are stored as
            strings, (ii) multiple argument values are stored in ArrayLists, (iii)
            compound argument values are stored in ArrayLists of ArrayLists (this,
            I will admit, kind of mings).
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.#ctor(RedGate.Shared.Utils.CommandLine.Parameters)">
            <summary>
            Copy constructor.
            </summary>
            <param name="original">original object</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.#ctor(System.IO.Stream,RedGate.Shared.Utils.CommandLine.Parameters)">
            <summary>
            Create a new Parameters object bound to a different command line specification.
            </summary>
            <param name="metaDefinitionIn">Stream containing the meta definition</param>
            <param name="original">The Parameters object</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:RedGate.Shared.Utils.CommandLine.Parameters"/> from the supplied
            set of command-line arguments.
            </summary>
            <param name="args">Command-line arguments.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.#ctor(RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinition,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new set of parsed parameters, using the supplied specification
            to validate them.  The arguments may be supplied either via the command-line,
            or in an XML file specified by the user with the /argfile switch.
            </summary>
            <param name="spec">command-line meta-definition</param>
            <param name="args">unparsed command-line arguments</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.FinishOff(System.Boolean)">
            <summary>
            Used to finish off after parsing command-line arguments.  However, this
            method will be invoked again if the user has specified an XML file using
            the /argfile argument.  Initialisation from an XML file takes place after
            the command-line has been parsed.
            </summary>
            <param name="xmlInitDone"></param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.HandleArgumentElement(System.Xml.XmlElement)">
            <summary>
            Used when reading arguments from an XML file.  Populates an argument
            value based on an XML element.
            </summary>
            <param name="element">XML 'Argument' element</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.HandleIncludeExcludeRule(System.Xml.XmlElement)">
            <summary>
            Handles rules for including / excluding database objects specified
            in XML file.
            </summary>
            <param name="element">include / exclude rule</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.HandleValidationEvent(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Throws an exception if a validation error occurs when validating
            XML file containing arguments.
            </summary>
            <param name="sender">originating object</param>
            <param name="ev">event</param>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">if an error occurs whilst validating the XML file</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.HandleArgumentElement2(System.Xml.XmlElement)">
            <summary>
            Used when reading arguments from an XML file.  Populates an argument
            value based on an XML element.
            </summary>
            <param name="element">XML 'Argument' element</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.MaybeProcessMultipleOccurrences(System.String,System.Object)">
            <summary>
            In argument occurs multiple times (which some are allowed to) this correctly processes
            them by appending the specified value to a list of values already specified (where this
            exists).
            </summary>
            <param name="parameter">argument name</param>
            <param name="argValue">argument value</param>
            <returns>value to be inserted into parameters</returns>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if the specified argument has been illegally duplicated in the command line
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.SetOperationMode">
            <summary>
            Sets the operation mode of the command line based on whether or not
            the user has specified either of the /verbose or /quiet switches.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckRequiredComplain">
            <summary>
            Checks that all required arguments have been specified by the user,
            and if not throws an exception.
            </summary>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if the user has not supplied a value for a required argument
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckExclusionsComplain(System.String)">
            <summary>
            Checks that no other arguments have been specified that cannot be used
            in conjunction with the specified argument.
            </summary>
            <param name="argName">argument to check</param>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if conflicting arguments have been specified
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckExclusionsComplain">
            <summary>
            Checks that arguments are not used in conjunction with other arguments
            that it is not valid to use them with.
            </summary>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">if conflicting arguments are used</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckDependenciesComplain(System.String)">
            <summary>
            Checks that all arguments upon which the specified argument is dependent
            have also been specified.
            </summary>
            <param name="argName">argument to check</param>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if an argument upon which the specified argument is dependent has not been
            specified
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckDependenciesComplain">
            <summary>
            Checks that the dependencies of all arguments are satisfied.
            </summary>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if an argument is found whose dependencies are not satisfied
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckEnumValuesComplain(RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition)">
            <summary>
            Checks that all arguments with enumerations have values that are
            members of their enumerations.
            </summary>
            <param name="def">argument definition - must be of type enum</param>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if the specified argument has an undefined value
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckEnumValuesComplain(RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition,RedGate.Shared.Utils.CommandLine.SubTypeMetaDefinition,System.Int32)">
            <summary>
            Checks that a sub-type of type enum within an argument of compound
            type has a valid value.
            </summary>
            <param name="def">argument meta-definition</param>
            <param name="subType">sub-type definition</param>
            <param name="index">index of sub-type within compound type</param>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineMetaDefinitionException">
            if the sub-type references an undefined enumeration
            </exception>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if the value specified at that sub-type's position by the user is not defined in the enumeration
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckEnumValuesComplain(System.String)">
            <summary>
            Checks arguments to ensure that the value supplied by the user is part of any
            defined enumeration.  The name of the argument supplied to this method does not
            have to correspond to an argument of type enum.
            </summary>
            <param name="argName">name of argument</param>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if an undefined argument name is supplied, or an invalid enumeration
            value is specified for that argument or a sub-type of that argument
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckEnumValuesComplain">
            <summary>
            Checks that all enumeration values for arguments of type enum
            are valid (i.e. are defined within the enumerations referenced
            by the argument meta-definitions).
            </summary>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if an undefined value is encountered
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckParameterValuesComplain">
            <summary>
            Checks that all parameters that should have values do in fact have
            values, and that those which should not do not.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckPathNamesComplain">
            <summary>
            Checks all path names to ensure that no empty path names have been specified.
            </summary>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            Any pathname is null, empty, or contains only whitespace.
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.CheckComplain">
            <summary>
            Performs validation checks.
            </summary>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            If any validation checks fail
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.ConvertParameter(System.String)">
            <summary>
            Converts argument aliases to their real names.  If the supplied value
            is an argument name rather than an alias it is returned unchanged.
            </summary>
            <param name="parameter">argument name or alias</param>
            <returns>argument name</returns>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if an invalid argument or alias is specified
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.ExpandList(RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition)">
            <summary>
            This is just the king of the ugly methods.  Expands list / compound argument
            values from character delimited strings to ArrayLists and replaces them in
            the argument dictionary.
            </summary>
            <param name="argSpec">argument meta-definition</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.ExpandLists">
            <summary>
            Expands all multi-value / compound arguments to ILists from
            character-delimited strings.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.GetReplacementValue(RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition,RedGate.Shared.Utils.CommandLine.EnumMetaDefinition,System.String)">
            <summary>
            Gets replacement value for enumeration alias.
            </summary>
            <param name="argSpec">argument to which value belongs</param>
            <param name="enumSpec">enumeration specification</param>
            <param name="raw">enumeration value or alias</param>
            <returns>corresponding enumeration value</returns>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if the supplied value is not defined in the enumeration as either
            a user value or a user alias
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.ReplaceEnumAliases(RedGate.Shared.Utils.CommandLine.ArgumentMetaDefinition)">
            <summary>
            Replaces all enumeration user aliases with user values for the specified
            argument (must be of type enum).
            </summary>
            <param name="argSpec">argument meta-definition</param>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if the user has specified a value that is not defined in the enumeration
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.ReplaceEnumAliases">
            <summary>
            Replaces all enumeration aliases specified by the user with the corresponding
            user value defined in the relevant enumeration.
            </summary>
            <exception cref="T:RedGate.Shared.Utils.CommandLine.CommandLineException">
            if the user has specified an undefined enumeration value
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.InitRules(RedGate.Shared.Utils.CommandLine.IRuleFactory,RedGate.Shared.Utils.CommandLine.IRuleMatcherFactory)">
            <summary>
            Creates all rules from the command-line parameters using the specified
            <see cref="T:RedGate.Shared.Utils.CommandLine.IRuleFactory"/> and <see cref="T:RedGate.Shared.Utils.CommandLine.IRuleMatcherFactory"/>.
            </summary>
            <param name="ruleFactory">Factory for creating rules.</param>
            <param name="matcherFactory">Factory for creating rule matchers.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.ToXmlString">
            <summary>
            Creates an XML string representating of the parameters.
            </summary>
            <returns>XML string.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Parameters.Clone">
            <summary>
            Creates a deep copy of the parameters.  The copied rule set is a
            semi-deep copy.  You should refer to the RuleSet.Clone() documentation
            for further information about this.
            </summary>
            <returns>deep copy of parameters</returns>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.Parameters.Item(System.String)">
            <summary>
            Indexer returning value of argument with the specified name.  Note that the
            setter should be used by applications and that NO validation is performed.
            If you do something daft it's your funeral: it is YOUR responsibility to
            ensure that any value you set using this method is sensible.  Setting a value
            to null is the equivalent of removing the key-value pair from the underlying
            collection.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.Parameters.Rules">
            <summary>
            Gets all the rules for including/excluding objects defined by the
            command-line arguments.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.RuleType">
            <summary>
            Defines the type of rule.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleType.Include">
            <summary>
            Rule is for including objects.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleType.Exclude">
            <summary>
            Rule is for excluding objects.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.RuleConstraintType">
            <summary>
            Defines the type of rule constraint being applied.
            </summary>
            <remarks>
            This is generally an operator between the value defined in the constraint
            and the target value on which the rule is operating.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleConstraintType.Equals">
            <summary>
            Equals.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleConstraintType.NotEquals">
            <summary>
            Not equals.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleConstraintType.LessThan">
            <summary>
            Less than.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleConstraintType.GreaterThan">
            <summary>
            Greater than.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleConstraintType.LessThanOrEqual">
            <summary>
            Less than or equal.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleConstraintType.GreaterThanOrEqual">
            <summary>
            Greater than or equal.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleConstraintType.Matches">
            <summary>
            Matches regular expression.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleConstraintType.DoesNotMatch">
            <summary>
            Does not match regular expression.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.RuleConstraint">
            <summary>
            Defines a constraint that must be matched for a target object to be
            matched by a rule.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.RuleConstraint.POSTPROCESS_NONE">
            <summary>
            ???
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleConstraint.#ctor(RedGate.Shared.Utils.CommandLine.RuleConstraintType,System.String)">
            <summary>
            Creates a new <see cref="T:RedGate.Shared.Utils.CommandLine.RuleConstraint"/>.
            </summary>
            <param name="type">Type of constraint.</param>
            <param name="val">Value to be used in conjunction with constraint.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleConstraint.#ctor(System.Object,RedGate.Shared.Utils.CommandLine.RuleConstraintType,System.String)">
            <summary>
            Creates a new <see cref="T:RedGate.Shared.Utils.CommandLine.RuleConstraint"/>.
            </summary>
            <param name="subTarget">???</param>
            <param name="type">Type of constraint.</param>
            <param name="val">Value to be used in conjunction with constraint.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleConstraint.ToString">
            <summary>
            Gets a string representation of the rule constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.RuleConstraint.SubTarget">
            <summary>
            ???
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.RuleConstraint.Type">
            <summary>
            Type of constraint.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.RuleConstraint.Value">
            <summary>
            Value to be used in conjunction with constraint.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.RuleConstraint.PostProcessStatus">
            <summary>
            ???
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.Rule">
            <summary>
            Represents a rule used to include/exclude objects from processing
            by the command-line application.
            </summary>
            <remarks>
            Typically rules include or exclude objects based on their name
            or type.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Rule.#ctor(RedGate.Shared.Utils.CommandLine.RuleType,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:RedGate.Shared.Utils.CommandLine.Rule"/>.
            </summary>
            <param name="type">Type of rule.</param>
            <param name="targetType">Target type on which rule operates.</param>
            <param name="target">Target value to be matched.</param>
            <param name="isGlobal">
            Indicates whether or not the rule is global, i.e. whether or not
            it applies to all objects regardless of type.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Rule.AddConstraint(RedGate.Shared.Utils.CommandLine.RuleConstraint)">
            <summary>
            Adds a constraint to the rule.
            </summary>
            <param name="constraint">
            Constraint.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Rule.AddConstraint(RedGate.Shared.Utils.CommandLine.RuleConstraintType,System.String)">
            <summary>
            Adds a constraint to the rule.
            </summary>
            <param name="type">
            Constraint type.
            </param>
            <param name="val">
            Constraint value.
            </param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.Rule.ToString">
            <summary>
            Gets a string representation of the rule.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.Rule.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:RedGate.Shared.Utils.CommandLine.RuleConstraint"/> at the specified index.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.Rule.ConstraintCount">
            <summary>
            Gets the number of <see cref="T:RedGate.Shared.Utils.CommandLine.RuleConstraint"/>s in the rule.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.Rule.Type">
            <summary>
            Gets the type of rule.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.Rule.TargetType">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.Rule.Target">
            <summary>
            Gets the target.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.Rule.IsGlobal">
            <summary>
            Indicates whether or not the rule is global, i.e. whether or
            not it applies to all objects.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.Rule.Matcher">
            <summary>
            Gets or sets the <see cref="T:RedGate.Shared.Utils.CommandLine.IRuleMatcher"/> for the rule.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.RuleSet">
            <summary>
            Complete set of include/exclude rules for command line application.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleSet.#ctor(RedGate.Shared.Utils.CommandLine.RuleSet)">
            <summary>
            Copy constructor.
            </summary>
            <param name="original">original rule set</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleSet.#ctor(RedGate.Shared.Utils.CommandLine.IRuleFactory,RedGate.Shared.Utils.CommandLine.IRuleMatcherFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="ruleFactory">Rule factory.</param>
            <param name="matcherFactory">Rule matcher factory.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleSet.AddRule(RedGate.Shared.Utils.CommandLine.Rule)">
            <summary>
            Adds a rule to the <see cref="T:RedGate.Shared.Utils.CommandLine.RuleSet"/>.
            </summary>
            <param name="rule">Rule.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleSet.ShouldInclude(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Indicates whether or not the specified target should be included in the
            command line processing.
            </summary>
            <remarks>
            Applies both include and exclude rules to make the decision.
            </remarks>
            <param name="isIncludedInProject">
            Indicates whether or not the target has been included in the project file
            supplied by the user.
            </param>
            <param name="targetType">
            Type of target.
            </param>
            <param name="target">
            ??? Target.
            </param>
            <param name="targetValue">
            ??? Target values.
            </param>
            <returns>
            <strong>true</strong> if the target should be include, <strong>false</strong>
            if it should be excluded.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleSet.ShouldInclude(System.String,System.String,System.Object[])">
            <summary>
            Indicates whether or not the specified target should be included in the
            command line processing.
            </summary>
            <remarks>
            Applies both include and exclude rules to make the decision.
            </remarks>
            <param name="targetType">
            Type of target.
            </param>
            <param name="target">
            ??? Target.
            </param>
            <param name="targetValue">
            ??? Target values.
            </param>
            <returns>
            <strong>true</strong> if the target should be include, <strong>false</strong>
            if it should be excluded.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleSet.IsIncluded(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="target"></param>
            <param name="targetValue"></param>
            <param name="isIncludedInProject"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleSet.IsIncludedEx(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="target"></param>
            <param name="targetValue"></param>
            <param name="isIncludedInProject"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleSet.IsExcluded(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="target"></param>
            <param name="targetValue"></param>
            <param name="isIncludedInProject"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleSet.IsExcludedEx(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="target"></param>
            <param name="targetValue"></param>
            <param name="isIncludedInProject"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.RuleSet.Clone">
            <summary>
            Creates a semi-deep copy of the rule set.  Factories are shared with
            the original, but the underlying rule sets for each target type are cloned.
            Note that the rules themselves are not cloned.
            </summary>
            <returns>semi-deep copy of rule set</returns>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.RuleSet.RuleFactory">
            <summary>
            Gets the <see cref="T:RedGate.Shared.Utils.CommandLine.IRuleFactory"/> used by the
            <see cref="T:RedGate.Shared.Utils.CommandLine.RuleSet"/>.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.RuleSet.Item(System.String)">
            <summary>
            Gets the rule collection for the specified target type.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.SubTypeMetaDefinition">
            <summary>
            Very thin wrapper around an XML element defining a sub-type within a compound
            data-type argument.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.SubTypeMetaDefinition.#ctor(System.Xml.XmlElement)">
            <summary>
            Creates a new sub-type meta-definition.
            </summary>
            <param name="subTypeSpec">XML element defining sub-type</param>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.SubTypeMetaDefinition.Type">
            <summary>
            Gets the data-type.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.SubTypeMetaDefinition.Reference">
            <summary>
            Gets a reference to any associated enumeration definition.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.SubTypeMetaDefinition.DisplayName">
            <summary>
            Gets the display name for the value of the sub-type.  This is used
            when displaying the help message.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.SubTypeMetaDefinition.Delimiter">
            <summary>
            Gets the delimiter used to separate multiple values.  The default delimiter
            is the comma character.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.TargetTypeRules">
            <summary>
            Holds a collection of rules for a given type of target object.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.TargetTypeRules.#ctor(RedGate.Shared.Utils.CommandLine.TargetTypeRules)">
            <summary>
            Copy constructor.
            </summary>
            <param name="original">original object</param>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.TargetTypeRules.ShouldInclude(System.Boolean,System.String,System.Object[])">
            <summary>
            Indicates whether or not the specified target should be included in
            processing by the command-line application.
            </summary>
            <param name="isIncludedInProject">
            Indicates whether or not the object in question is included in any project.
            </param>
            <param name="target">
            ??? Target.
            </param>
            <param name="targetValue">
            ??? Target values.
            </param>
            <returns>
            <strong>true</strong> if the target should be included, otherwise
            <strong>false</strong>.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.TargetTypeRules.ShouldInclude(System.String,System.Object[])">
            <summary>
            Indicates whether or not the specified target should be included in
            processing by the command-line application.
            </summary>
            <param name="target">
            ??? Target.
            </param>
            <param name="targetValue">
            ??? Target values.
            </param>
            <returns>
            <strong>true</strong> if the target should be included, otherwise
            <strong>false</strong>.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.TargetTypeRules.IsIncluded(System.Boolean,System.String,System.Object[])">
            <summary>
            Indicates whether or not the set of include rules would include the
            specified target.
            </summary>
            <remarks>
            Note that this does not mean that the set of exclude rules would exclude
            the specified target. It is quite possible for both <see cref="M:RedGate.Shared.Utils.CommandLine.TargetTypeRules.IsIncluded(System.Boolean,System.String,System.Object[])"/>
            and <see cref="M:RedGate.Shared.Utils.CommandLine.TargetTypeRules.IsExcluded(System.Boolean,System.String,System.Object[])"/> to return <strong>true</strong>, however you
            should note that in general exclude rules override include rules, and that
            this is the logic employed by the ShouldInclude(string , params object[] ) methods.
            </remarks>
            <param name="target">
            ??? Target.
            </param>
            <param name="targetValue">
            ??? Target values (can be an array).
            </param>
            <param name="isIncludedInProject"></param>
            <returns>
            <strong>true</strong> if included by include rules.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.TargetTypeRules.IsExcluded(System.Boolean,System.String,System.Object[])">
            <summary>
            Indicates whether or not the set of exclude rules would exclude the
            specified target.
            </summary>
            <remarks>
            Note that this does not mean that the set of include rules would include
            the specified target. It is quite possible for both <see cref="M:RedGate.Shared.Utils.CommandLine.TargetTypeRules.IsIncluded(System.Boolean,System.String,System.Object[])"/>
            and <see cref="M:RedGate.Shared.Utils.CommandLine.TargetTypeRules.IsExcluded(System.Boolean,System.String,System.Object[])"/> to return <strong>true</strong>, however you
            should note that in general exclude rules override include rules, and that
            this is the logic employed by the ShouldInclude(string , params object[]) methods.
            </remarks>
            <param name="target">
            ??? Target.
            </param>
            <param name="targetValue">
            ??? Target values (can be an array).
            </param>
            <param name="isIncludedInProject"></param>
            <returns>
            <strong>true</strong> if excluded by exclude rules.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.CommandLine.TargetTypeRules.Clone">
            <summary>
            Creates a semi-deep copy of the target type rules.  The underlying
            collections are copied, but the rules themselves are not meaning that
            the new collections will reference the original rules.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.TargetTypeRules.Count">
            <summary>
            Number of rules in collection.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.CommandLine.TargetTypeRules.Item(RedGate.Shared.Utils.CommandLine.RuleType,System.String)">
            <summary>
            Gets the list of rules of the specified <see cref="T:RedGate.Shared.Utils.CommandLine.RuleType"/> for
            the supplied target.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.CommandLine.ValueMultiplicity">
            <summary>
            Enumeration defining the number of values a particular argument can
            take.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ValueMultiplicity.None">
            <summary>
            Argument does not take any values.  The argument is a simple
            switch such as /verbose etc.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ValueMultiplicity.Single">
            <summary>
            The argument accepts a single value.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.CommandLine.ValueMultiplicity.Multi">
            <summary>
            The argument accepts multiple values.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.DiffHelper">
            <summary>
            A helper class used to generate side-by-side string comparisons.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.Utils.DiffHelper.CompareStrings(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a representation of the side-by-side differences between two strings.
            </summary>
            <param name="string1">The first string to compare.</param>
            <param name="string2">The second string to compare.</param>
            <param name="ignoreWhiteSpace">True to ignore spaces, tabs etc.</param>
            <param name="caseSensitive">True if the comparison is case sensitive.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of the differences.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.DiffHelper.CompareStrings(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a representation of the side-by-side differences between two strings.
            </summary>
            <param name="string1">The first string to compare.</param>
            <param name="string2">The second string to compare.</param>
            <param name="ignoreWhiteSpace">True to ignore spaces, tabs etc.</param>
            <param name="caseSensitive">True if the comparison is case sensitive.</param>
            <param name="preserveNewLineCharacters">True if the new line characters should be preserved, false to remove them.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of the differences.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.DiffHelper.BreakOnCRLF(System.String)">
            <summary>
            Break on CRLF!
            </summary>
            <param name="text">string to be split.</param>
            <returns>array strings one for each line of text.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.DiffHelper.BreakOnCRLF(System.String,System.Boolean)">
            <summary>
            Break on CRLF!
            </summary>
            <param name="text">string to be split.</param>
            <param name="preserveNewLineCharacters">True if the newline characters at the
            end of each line are to be preserved, false for them to be removed.</param>
            <returns>array of strings one for each line of text.</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.DiffHelper.ComparisonString">
            <summary>
            A class representing a comparison between two single-line strings.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.Utils.DiffHelper.ComparisonString.#ctor">
             <summary>
             Constructor
             </summary>
             <remarks>
             This is not normally called externally 
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.DiffHelper.ComparisonString.#ctor(System.String,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="leftString">The string to appear on the left.</param>
             <param name="rightString">The string to appear on the right.</param>
             <remarks>
             This is not normally called externally.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.DiffHelper.ComparisonString.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
             <summary>
             Constructor.
             </summary>
             <param name="leftString">The string to appear on the left.</param>
             <param name="rightString">The string to appear on the right.</param>
             <param name="ignoreWhiteSpace">True to ignore spaces, tabs etc.</param>
             <param name="caseSensitive">True if the comparison is case sensitive.</param>
             <remarks>
             This is not normally called externally 
            </remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.DiffHelper.ComparisonString.LeftString">
            <summary>
            The string that appears on the left.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.DiffHelper.ComparisonString.RightString">
            <summary>
            The string that appears on the right.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.DiffHelper.ComparisonString.Different">
            <summary>
            True if the two strings are different.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.DiffHelper.ComparisonString.LeftStringPresent">
            <summary>
            True if there is a string on the left.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.DiffHelper.ComparisonString.RightStringPresent">
            <summary>
            True if there is a string on the right.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.DiffHelper.ComparisonStrings">
            <summary>
            A collection of single-line strings.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.Utils.DiffHelper.ComparisonStrings.Append(System.Collections.Generic.IEnumerable{RedGate.Shared.Utils.DiffHelper.ComparisonString})">
            <summary>
            Append another set of ComparisonStrings
            </summary>
            <param name="comparisonStrings">The object to append</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ExceptionLogger.Log(System.Exception)">
            <summary>
            Log this exception
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:RedGate.Shared.Utils.ExceptionLogger.Folder">
            <summary>
            Get the Folder
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.ICancellable">
            <summary>
            An interface for objects with operations that can be cancelled.
            </summary>
            <remarks>
            SQL Compare and SQL Data Compare have operations which can take a long time and may need to be cancelled. Examples include
            executing SQL scripts, registering databases in SQL Compare and generating SQL Data Compare scripts.
            <para>If a long-running operation is cancelled then an OperationCancelledException is thrown</para>
            <para>See <em>RedGate.SQLDataCompare.Engine.ComparisonSession</em> for a code sample.</para>
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.ICancellable.CancelOperation">
            <summary>
            Cancels the current running operation. This will throw an instance of <see cref="T:RedGate.Shared.Utils.OperationCancelledException"/>
            at the currently executing location on the executing thread
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ICancellable.Status">
            <summary>
            Gets and sets a delegate that can be used to notify of message or percentage changes
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.StatusEventHandler">
            <summary>
            Represents a method that can receive status events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:RedGate.Shared.Utils.StatusEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.StatusEventArgs">
            <summary>
            Represents arguments to the <see cref="T:RedGate.Shared.Utils.StatusEventHandler"/> event.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.StatusEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.StatusEventArgs"/> class with the specified message.
            </summary>
            <param name="message">The status message.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.StatusEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.StatusEventArgs"/> class with the specified completion percentage.
            </summary>
            <param name="percentage">The percentage complete of the currently executing operation.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.StatusEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.StatusEventArgs"/> class with the specified message and completion percentage.
            </summary>
            <param name="message">The status message.</param>
            <param name="percentage">The percentage complete of the currently executing operation.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.StatusEventArgs.Message">
            <summary>
            The status message.
            </summary>
            <remarks>This can be null.</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.StatusEventArgs.Percentage">
            <summary>
            The percentage complete.
            </summary>
            <remarks>This is -1 if there is no percentage complete information.</remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.OperationCancelledException">
            <summary>
            This exception is thrown when the operation is cancelled by the <see cref="M:RedGate.Shared.Utils.ICancellable.CancelOperation"/> method.
            </summary>
            <remarks>
            Note that there is also an OperationCanceledException in the class libraries - you need to be catching this one
            and not <see cref="T:System.OperationCanceledException"/>.</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.OperationCancelledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.OperationCancelledException"/> class.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.OperationCancelledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.OperationCancelledException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.OperationCancelledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.OperationCancelledException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.OperationCancelledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.OperationCancelledException"/> class with serialized data. 
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressPercentageTracker">
            <summary>
            A class that can be used to keep track of the progress of an algorithm in a percentage-complete sort of way
            and can pass on the progress to an <see cref="P:RedGate.Shared.Utils.ICancellable.Status"/> delegate.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressPercentageTracker.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressPercentageTracker.#ctor(RedGate.Shared.Utils.ICancellable)">
            <summary>Cancellable subscriber.</summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressPercentageTracker.Increment">
            <summary>Increments the CurrentValue by one.</summary>
            <returns>If the CurrentPercentage has changed.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressPercentageTracker.Increment(System.Int32)">
            <summary>Increments the CurrentValue by the value specified.</summary>
            <returns>If the CurrentPercentage has changed</returns>
            <param name="value">The amount by which to increment CurrentValue.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressPercentageTracker.LowerLimit">
            <summary>Gets or sets the lower limit of the range. The default value is 0.</summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressPercentageTracker.UpperLimit">
            <summary>Gets or sets the upper limit of the range. The default value is 100.</summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressPercentageTracker.CurrentValue">
            <summary>Gets or sets the current value within the specified range.</summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressPercentageTracker.CurrentPercentage">
            <summary>Gets the current percentage of the CurrentValue over the specified range.</summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressPercentageTracker.HasPercentageChanged">
            <summary>
            Returns back if the percentage has changed since the last time HasPercentageChanged been called.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressPercentageTracker.Message">
            <summary>
            Access to the status message.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.EncodingType">
            <summary>
            Enumerates the available text encoding types.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.IO.EncodingType.UTF8">
            <summary>
            UTF-8 encoding, without preamble.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.IO.EncodingType.UTF8WithPreamble">
            <summary>
            UTF-8 encoding, with 3-byte preamble.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.IO.EncodingType.Unicode">
            <summary>
            UTF-16 encoding.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.IO.EncodingType.ASCII">
            <summary>
            ASCII encoding.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.EncodingTypeResolver">
            <summary>
            Resolves a string representation of an encoding type as an <see cref="T:RedGate.Shared.Utils.IO.EncodingType"/> object. The accepted string representations
            are the names of the enumeration constants.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.EncodingTypeResolver.ResolveEncodingType(System.String)">
            <summary>
            Resolves encoding types from a string representation.  If the type
            is unrecognised or unsupported returns a default value of UTF8.
            Note that the resolution is case insensitive so 'UTF8', 'utf8' and
            'UtF8' are all equivalent.
            </summary>
            <param name="type">Encoding type represented as a string.</param>
            <returns>Corresponding encoding type, or UTF8 if type is not recognised or not supported.</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.MirrorFile">
            <summary>
            Provides a revocable write interface to a file.
            </summary>
            <remarks>
            This class simply keeps a backup of the previous state of the file, and copies the backup over the existing file
            when garbage collected unless the Close method is called with <em>undo</em> set to <em>false</em>.
            The backup is then deleted from the filesystem.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.MirrorFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.MirrorFile"/> class for the specififed file using UTF8 encoding.
            </summary>
            <param name="filename">The file to open.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.MirrorFile.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.MirrorFile"/> class for the specified file using the specified encoding.
            </summary>
            <param name="filename">The file to open.</param>
            <param name="encoding">Text encoding used in the file.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.MirrorFile.Open">
            <summary>
            Opens the file specified, making a backup if the file exists already.
            </summary>
            <returns>A <see cref="P:RedGate.Shared.Utils.IO.MirrorFile.StreamWriter"/> that writes to the file, set at the start of the file.</returns>
            <exception cref="T:System.ApplicationException">The file is read-only.</exception>
            <exception cref="T:System.IO.IOException">The backup file already exists and is in use, or another I/O error occured.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You do not have the necessary read/write permissions required.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.MirrorFile.Close(System.Boolean)">
            <summary>
            Closes the StreamWriter and commits or undoes any changes made as needed.
            </summary>
            <param name="undo">
            If <em>true</em>, the previous file contents will be copied over the current file.
            If <em>false</em>, the backup file will be deleted.
            </param>
            <exception cref="T:System.InvalidOperationException">The file has not been opened for writing (see <see cref="M:RedGate.Shared.Utils.IO.MirrorFile.Open"/>).</exception>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.MirrorFile.StreamWriter">
            <summary>
            Gets the current open <see cref="P:RedGate.Shared.Utils.IO.MirrorFile.StreamWriter"/> for the file.
            </summary>
            <exception cref="T:System.InvalidOperationException">The file has not been opened for writing (see <see cref="M:RedGate.Shared.Utils.IO.MirrorFile.Open"/>).</exception>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.IRedGateSerializable">
            <summary>
            Defines methods used to serialize the object using an <see cref="T:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter"/>.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.IRedGateSerializable.Deserialize(System.Int32,RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>
            This method deserializes the object using the specified <see cref="T:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter"/>.
            </summary>
            <param name="versionId">The version of the serialized data.</param>
            <param name="formatter">The serialization formatter to use.</param>
            <returns><em>True</em> if deserialized successfully, <em>false</em> if deserialization fails or <paramref name="versionId"/> is not recognised.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.IRedGateSerializable.Serialize(RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>
            Serializes this object using the specified <see cref="T:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter"/>.
            </summary>
            <param name="formatter">The serialization formatter to use.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.IRedGateSerializable.Version">
            <summary>
            Gets the accepted object version number for this object.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.SerializationMethod">
            <summary>
            Represents a method used to serialize arbitary information to an <see cref="T:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter"/>.
            </summary>
            <param name="formatter">The formatter to write to.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.DeserializationMethod">
            <summary>
            Represents a methods used to deserialize arbitary information from an <see cref="T:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter"/>.
            </summary>
            <param name="versionId">The version id of the stream.</param>
            <param name="formatter">The formatter to read from.</param>
            <returns><em>True</em> if deserialized successfully, <em>false</em> if deserialization fails or <paramref name="versionId"/> is not recognised.</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter">
            <summary>
            Defines methods used to serialize &amp; deserialize data. When (de)serializing, a name attribute is used to
            identify each object written to the output stream.
            </summary>
            <remarks>
            All the (de)serialization methods throw various subclasses of <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException"/>, to deal with various things
            that can go wrong.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.AddType(System.String,System.Type)">
            <summary>
            Add a name/type binding to the recognised list of types.
            </summary>
            <param name="name">The type name.</param>
            <param name="type">The type to add.</param>
            <returns><em>True</em> if the type was added successfully.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.SerializeRootObject(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Serializes the specified root object and all its children to the specified file.
            </summary>
            <param name="fileName">The file to serialize to.</param>
            <param name="name">The object name.</param>
            <param name="root">The object to serialize.</param>
            <param name="versionId">The object version.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.SerializeRootObject(System.IO.TextWriter,System.String,System.Object,System.Int32)">
            <summary>
            Serializes the specified root object and all its children to the specified <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="writer">The stream to serialize the object into.</param>
            <param name="name">The object name.</param>
            <param name="root">The object to serialize.</param>
            <param name="versionId">The object version.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write(System.String,RedGate.Shared.Utils.IO.Serialization.SerializationMethod,System.Int32)">
            <summary>
            Serializes an object using the specified <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationMethod"/>.
            </summary>
            <param name="name">The object name.</param>
            <param name="objectRef">The <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationMethod"/> to use.</param>
            <param name="versionId">The object version.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write(System.String,System.Type,System.Object,System.Int32)">
            <summary>
            Serializes the specified <see cref="T:System.Type"/> object.
            </summary>
            <param name="name">The object name.</param>
            <param name="type">The object type.</param>
            <param name="obj">The object to serialize.</param>
            <param name="versionId">The object version.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write(System.String,System.String)">
            <summary>
            Serializes the specified name/value pair.
            </summary>
            <param name="name">The object name.</param>
            <param name="value">The text to serialize.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.WriteEncrypted(System.String,System.String)">
            <summary>
            Serializes the specified text as an encrypted string.
            </summary>
            <param name="name">The object name.</param>
            <param name="value">The string to encrypt &amp; serialize.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write(System.String,System.DateTime)">
            <summary>
            Serializes the specified <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="name">The object name.</param>
            <param name="value">The object to serialize.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write(System.String,System.Boolean)">
            <summary>
            Serializes the specified boolean value.
            </summary>
            <param name="name">The value name.</param>
            <param name="value">The value to serialize.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write(System.String,System.Int32)">
            <summary>
            Serializes the specified integer value.
            </summary>
            <param name="name">The value name.</param>
            <param name="value">The value to serialize.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write(System.String,System.Int64)">
            <summary>
            Serializes the specified long value.
            </summary>
            <param name="name">The value name.</param>
            <param name="value">The value to serialize.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Serializes the specified <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type stored in the list.</typeparam>
            <param name="name">The list name.</param>
            <param name="list">The list to serialize.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write(System.String,System.Collections.IList)">
            <summary>
            Serializes the specified <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="name">The list name.</param>
            <param name="list">The list to serialize.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write``2(System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Serializes the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="name">The dictionary name.</param>
            <param name="dictionary">The dictionary to serialize.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Write(System.String,System.Collections.IDictionary)">
            <summary>
            Serializes the specified <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="name">The dictionary name.</param>
            <param name="dictionary">The dictionary to serialize.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">Something went wrong with serialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.DeserializeRootObject(System.String,System.String,System.String)">
            <summary>
            Deserializes the root object identified by the specified name from the contents of the specified file.
            </summary>
            <param name="fileName">The file storing the serialized object.</param>
            <param name="name">The object identifier.</param>
            <param name="typeName">The object type (see <see cref="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.AddType(System.String,System.Type)"/>).</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.DeserializeRootObject(System.IO.TextReader,System.String,System.String)">
            <summary>
            Deserializes the root object identified by the specified name from the contents of the specified file.
            </summary>
            <param name="reader">The stream containing the serialized object.</param>
            <param name="name">The object identifier.</param>
            <param name="typeName">The object type (see <see cref="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.AddType(System.String,System.Type)"/>).</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadInt64(System.String)">
            <summary>
            Deserializes the object identified by the specified name as an <em>Int64</em>.
            </summary>
            <param name="name">The object identifier.</param>
            <returns>The deserialized <em>Int64</em>.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadInt64(System.String,System.Boolean)">
            <summary>
            Optionally deserializes the object identified by the specified name as an <em>Int64</em>.
            </summary>
            <param name="name">The object identifier.</param>
            <param name="isOptional">If true, this function will not throw an exception if the identifier is not found.</param>
            <returns>The deserialized <em>Int64</em>, or zero if <paramref name="isOptional"/> is true and the identifier is not found.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadInt(System.String)">
            <summary>
            Deserializes the object identified by the specified name as an <em>int</em>.
            </summary>
            <param name="name">The object identifier.</param>
            <returns>The deserialized <em>int</em>.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadInt(System.String,System.Boolean)">
            <summary>
            Optionally deserializes the object identified by the specified name as an <em>int</em>.
            </summary>
            <param name="name">The object identifier.</param>
            <param name="isOptional">If true, this function will not throw an exception if the identifier is not found.</param>
            <returns>The deserialized <em>int</em>, or zero if <paramref name="isOptional"/> is true and the identifier is not found.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadBool(System.String)">
            <summary>
            Deserializes the object identified by the specified name as a <em>bool</em>.
            </summary>
            <param name="name">The object identifier.</param>
            <returns>The deserialized <em>bool</em>.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadBool(System.String,System.Boolean)">
            <summary>
            Optionally deserializes the object identified by the specified name as a <em>bool</em>.
            </summary>
            <param name="name">The object identifier.</param>
            <param name="isOptional">If true, this function will not throw an exception if the identifier is not found.</param>
            <returns>The deserialized <em>bool</em>, or zero if <paramref name="isOptional"/> is true and the identifier is not found.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadDateTime(System.String)">
            <summary>
            Deserializes the object identified by the specified name as a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="name">The object identifier.</param>
            <returns>The deserialized <em>DateTime</em> object.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadDateTime(System.String,System.Boolean)">
            <summary>
            Optionally deserializes the object identified by the specified name as a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="name">The object identifier.</param>
            <param name="isOptional">If true, this function will not throw an exception if the identifier is not found.</param>
            <returns>The deserialized <em>DateTime</em> object, or zero if <paramref name="isOptional"/> is true
            and the identifier is not found.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadString(System.String)">
            <summary>
            Deserializes the object identified by the specified name as a <em>string</em> object.
            </summary>
            <param name="name">The object identifier.</param>
            <returns>The deserialized <em>string</em> object.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadString(System.String,System.Boolean)">
            <summary>
            Optionally deserializes the object identifier by the specified name as a <em>string</em> object,
            decrypting it if necessary.
            </summary>
            <param name="name">The object identifier.</param>
            <param name="isOptional">If true, this function will not throw an exception if the identifier is not found.</param>
            <returns>The deserialized <em>string</em> object, or zero if <paramref name="isOptional"/> is true
            and the identifier is not found.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadObject(System.String)">
            <summary>
            Deserializes the object identified by the specified name.
            </summary>
            <param name="name">The object identifier.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">.
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadObject(System.String,System.Boolean)">
            <summary>
            Deserializes the object identified by the specified name.
            </summary>
            <param name="name">The object identifier.</param>
            <param name="isOptional">If false, this function will throw an exception if the identifier is not found.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">.
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.Read(System.String,RedGate.Shared.Utils.IO.Serialization.DeserializationMethod)">
            <summary>
            Deserializes an object using the specified <see cref="T:RedGate.Shared.Utils.IO.Serialization.DeserializationMethod"/>.
            </summary>
            <param name="name">The object identifier.</param>
            <param name="objectRef">The <see cref="T:RedGate.Shared.Utils.IO.Serialization.DeserializationMethod"/> to use.</param>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadList``1(System.String)">
            <summary>
            Deserializes the object identified by the specified name as an <see cref="T:System.Collections.Generic.IList`1"/> object.
            </summary>
            <typeparam name="T">The type stored in the IList.</typeparam>
            <param name="name">The object identifier.</param>
            <returns>The deserialized <see cref="T:System.Collections.Generic.IList`1"/> object.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadList(System.String)">
            <summary>
            Deserializes the object identified by the specified name as an <see cref="T:System.Collections.IList"/> object.
            </summary>
            <param name="name">The object identifier.</param>
            <returns>The deserialized <see cref="T:System.Collections.IList"/> object.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadDictionary``2(System.String)">
            <summary>
            Deserializes the object identified by the specified name as an <see cref="T:System.Collections.Generic.IDictionary`2"/> object.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="name">The object identifier.</param>
            <returns>The deserialized <see cref="T:System.Collections.Generic.IDictionary`2"/> object.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter.ReadDictionary(System.String)">
            <summary>
            Deserializes the object identified by the specified name as an <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="name">The object identifier.</param>
            <returns>The deserialized <see cref="T:System.Collections.IDictionary"/> object.</returns>
            <exception cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            Something went wrong with deserialization.</exception>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.SerializationException">
            <summary>
            Base exception for Serialization errors.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException"/> class.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException"/> class with a specified error message. 
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileException">
            <summary>
            Serialization error caused by an incorrectly formatted file.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileException"/> class.
            </summary>
            <param name="fileName">The name of the file that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="fileName">The name of the file that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="fileName">The name of the file that caused the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileException.FileName">
            <summary>
            Gets the name of the file that is incorrectly formatted.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileTypeException">
            <summary>
            Serialization error caused by an unexpected type name in the file.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileTypeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileTypeException"/> class.
            </summary>
            <param name="fileName">The name of the file that caused the exception.</param>
            <param name="typeName">The type name that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileTypeException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileTypeException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="fileName">The name of the file that caused the exception.</param>
            <param name="typeName">The type name that caused the exception.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidFileTypeException.TypeName">
            <summary>
            Gets the type name that caused the exception.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.SerializationParameterConversionException">
            <summary>
            Serialization error caused by an error raised when converting a parameter. This
            could be because the serialized file has been edited manually.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationParameterConversionException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationParameterConversionException"/> class.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="fileName">The name of the file that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationParameterConversionException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationParameterConversionException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="fileName">The name of the file that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationParameterConversionException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationParameterConversionException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="fileName">The name of the file that caused the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationParameterConversionException.Parameter">
            <summary>
            Gets the name of the parameter that caused the exception.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationParameterConversionException.FileName">
            <summary>
            Gets the name of the file that caused the exception.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.SerializationNotSupportedException">
            <summary>
            Serialization error caused by a class not implementing the <see cref="T:RedGate.Shared.Utils.IO.Serialization.IRedGateSerializable"/> interface.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationNotSupportedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationNotSupportedException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="typeName">The type name that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationNotSupportedException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationNotSupportedException"/> with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="typeName">The type name that caused the exception.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationNotSupportedException.Parameter">
            <summary>
            Gets the name of the parameter that caused the exception.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationNotSupportedException.TypeName">
            <summary>
            Gets the type name that caused the exception.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidTypeException">
            <summary>
            Serialization error caused by a type name not being recognised by the deserializer.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidTypeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidTypeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="typeName">The type name that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidTypeException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidTypeException"/> with the specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="typeName">The type name that caused the exception.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidTypeException.Parameter">
            <summary>
            Gets the parameter that caused the exception.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidTypeException.TypeName">
            <summary>
            Gets the type name that caused the exception.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidVersionException">
            <summary>
            Serialization error caused by attempting to deserialize a file for which the
            serialization version is different to the specified object version.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidVersionException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidVersionException"/> class.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="typeName">The type name that caused the exception.</param>
            <param name="version">The version that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidVersionException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidVersionException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="typeName">The type name that caused the exception.</param>
            <param name="version">The version that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidVersionException.#ctor(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidVersionException"/> class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="typeName">The type name that caused the exception.</param>
            <param name="version">The version that caused the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidVersionException.Version">
            <summary>
            Gets the version that caused the exception.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidVersionException.Parameter">
            <summary>
            Gets the parameter that caused the exception.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationInvalidVersionException.TypeName">
            <summary>
            Gets the type name that caused the exception.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.SerializationParameterMissingException">
            <summary>
            Serialization error caused by a missing parameter.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationParameterMissingException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationParameterMissingException"/> class.
            </summary>
            <param name="fileName">The name of the file that caused the exception.</param>
            <param name="parameter">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationParameterMissingException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationParameterMissingException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="fileName">The name of the file that caused the exception.</param>
            <param name="parameter">The name of the parameter that caused the exception.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationParameterMissingException.Parameter">
            <summary>
            Gets the parameter that caused the exception.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationParameterMissingException.FileName">
            <summary>
            Gets the name of the file that caused the exception.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.SerializationParameterEmptyException">
            <summary>
            Serialization error caused by an empty parameter.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationParameterEmptyException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationParameterEmptyException"/> class.
            </summary>
            <param name="fileName">The name of the file that caused the exception.</param>
            <param name="parameter">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.SerializationParameterEmptyException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.SerializationParameterEmptyException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="fileName">The name of the file that caused the exception.</param>
            <param name="parameter">The name of the parameter that caused the exception.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationParameterEmptyException.Parameter">
            <summary>
            Gets the parameter that caused the exception.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.SerializationParameterEmptyException.FileName">
            <summary>
            Gets the name of the file that caused the exception.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.ISerializeTypeBinder">
            <summary>
            Defines methods to map from a <see cref="T:System.Type"/> object to a type name.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeTypeBinder.AddType(System.String,System.Type)">
            <summary>
            Adds a type binding to the known set of mappings.
            </summary>
            <param name="name">The name of the type that is used in the <see cref="T:RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter"/>.</param>
            <param name="type">The .NET type that that can be serialized.</param>
            <returns><em>True</em> if the type mapping was added successfully.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeTypeBinder.ResolveName(System.String)">
            <summary>
            Returns the <see cref="T:System.Type"/> object corresponding to the specified type name.
            </summary>
            <param name="name">The type name to retrieve.</param>
            <returns>The type corresponding to the specified name.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ISerializeTypeBinder.ResolveType(System.Type)">
            <summary>
            Returns the type name corresponding to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to retrieve the name for.</param>
            <returns>The name of the specified type.</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.TypeBinder">
            <summary>
            Provides a default implementation of <see cref="T:RedGate.Shared.Utils.IO.Serialization.ISerializeTypeBinder"/>.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs">
            <summary>
            Provides data for a resolution event.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs"/> class 
            to resolve the specified type name to a <see cref="P:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.Type"/> object.
            </summary>
            <param name="name">The type name to resolve.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs"/> class
            to resolve the specified <see cref="P:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.Type"/> object to a type name.
            </summary>
            <param name="type">The <see cref="P:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.Type"/> object to resolve.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs"/> class
            with the specified type name and <see cref="P:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.Type"/> object.
            </summary>
            <param name="name">The type name that was used in the resolution.</param>
            <param name="type">The <see cref="P:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.Type"/> object that was used in the resolution.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.HasBeenHandled">
            <summary>
            Gets or sets a boolean indicating if this event has been handled successfully.
            </summary>
            <remarks>If this is true, it is expected that the resolution was successful.</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.Type">
            <summary>
            Gets or sets the <see cref="P:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.Type"/> used in the resolution.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs.Name">
            <summary>
            Gets or sets the type name used in the resolution.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandler">
            <summary>
            Represents the method that handles a resolution event (see <see cref="T:RedGate.Shared.Utils.IO.Serialization.ISerializeTypeBinder"/>).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="eventArgs">A <see cref="T:RedGate.Shared.Utils.IO.Serialization.ResolutionEventHandlerArgs"/> that contains the event data.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.Serialization.XMLSerializeFormatter">
            <summary>
            Serializes and deserializes data into XML.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.XMLSerializeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <em>XMLSerializeFormatter</em> class using the default type binder.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.XMLSerializeFormatter.#ctor(RedGate.Shared.Utils.IO.Serialization.ISerializeTypeBinder)">
            <summary>
            Initializes a new instance of the <em>XMLSerializeFormatter</em> class using the specified type binder.
            </summary>
            <param name="binder">The <em>ISerializeTypeBinder</em> to use when resolving types.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.Serialization.XMLSerializeFormatter.WriteOutComments">
            <summary>
            Writes out any custom attributes associated with the root assembly as an XML comment.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Utils.IO.Serialization.XMLSerializeFormatter.Resolver">
            <summary>
            Occurs when a type resolution request is made.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.Serialization.XMLSerializeFormatter.PreferredCulture">
            <summary>
            Sets the preferred culture to use for this object.
            </summary>
            <remarks>
            This should always be CultureInfo.InvariantCulture. Unfortunately, versions of the serializer prior
            to version 6.1.0 saved and loaded dates only in the current culture. This means that if you create a
            file in the US culture and load it in the UK culture you get the day and month swapped over.
            <para/>
            Using the invariant culture fixes this, but means that US dates will sometimes be swapped in files
            saved out by older versions of the formatter. If it is critical that these dates are loaded in correctly,
            you should change this value to match the culture the file was saved under. If the date is only used for
            display purposes, it is probably more advisable not to try to work out the culture it was saved as and
            put up with an occasionally messed up display.
            <para/>
            New files are always saved using the invariant culture regardless of this setting.
            </remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.TempFiles">
            <summary>
            A class to manage <em>TempFile</em> instances. Each file can have a defined pre- and postfix string applied to it.
            </summary>
            <remarks>The temporary filename postfix used in several function calls should not include the final .</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFiles.#ctor">
            <summary>
            Initializes a new instance of the <em>TempFiles</em> class with no default pre- or postfix.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFiles.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <em>TempFiles</em> class with the specified prefix
            that will be applied to all created <em>TempFile</em> filenames.
            </summary>
            <param name="preFix">The temporary file name prefix.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFiles.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <em>TempFiles</em> class with the specified prefix
            and default postfix that will be applied to all created <em>TempFile</em> filenames.
            </summary>
            <param name="preFix">The temporary file name prefix.</param>
            <param name="postFix">The temporary file name postfix.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFiles.CreateNewTempFile(System.String)">
            <summary>
            Creates a new temporary file with the specified postfix.
            </summary>
            <param name="postFix">The temporary file name postfix.</param>
            <returns>The name of the temporary file created, in DOS-compatible 8.3 format.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFiles.CreateNewTempFile">
            <summary>
            Creates a new temporary file with the default postfix.
            </summary>
            <returns>The name of the temporary file created, in DOS-compatible 8.3 format.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFiles.AddNewTempFile(System.String)">
            <summary>
            Adds a new temporary file with the specified postfix to the list of files managed by this instance,
            but does not create it on the filesystem. This file will be deleted when
            <em>Dispose</em> is called, if it exists.
            </summary>
            <param name="postFix">The temporary file name postfix.</param>
            <returns>The name of the temporary file.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFiles.AddNewTempFile">
            <summary>
            Adds a new file temporary file with the default postfix to the list of files managed by this instance,
            but does not create it on the filesystem. This file will be deleted when
            <em>Dispose</em> is called, if it exists.
            </summary>
            <returns>The name of the temporary file.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFiles.DisposeFile(System.String)">
            <summary>
            Disposes of the specified file managed by this instance.
            </summary>
            <param name="fileName">The file name to delete.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.TempFile">
            <summary>
            Represents a temporary file created on the filesystem. The class can optionally delete the temporary file on disposal,
            and use 8.3 format for filenames if required.
            </summary>
            <remarks>The temporary filename postfix used in several function calls should not include the final .</remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFile.#cctor">
            <summary>
            Ensures that the "Red Gate" folder exists off the temp directory.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <em>TempFile</em> class that will be deleted on disposal, using 8.3 filename format.
            </summary>
            <param name="preFix">The prefix to apply to the filename.</param>
            <param name="postFix">The postfix to apply to the filename.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFile.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <em>TempFile</em> class using 8.3 filename format.
            </summary>
            <param name="preFix">The prefix to apply to the filename.</param>
            <param name="postFix">The postfix to apply to the filename.</param>
            <param name="deleteFileOnDispose">If <em>true</em>, the file will be deleted when <em>Dispose</em> is called.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFile.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <em>TempFile</em> class.
            </summary>
            <param name="preFix">The prefix to apply to the filename.</param>
            <param name="postFix">The postfix to apply to the filename.</param>
            <param name="deleteFileOnDispose">If <em>true</em>, the file will be deleted when <em>Dispose</em> is called.</param>
            <param name="useLongFileName">If <em>true</em>, the filename will not be DOS-compatible.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFile.GetTempPath">
            <summary>
            Returns the path to the temp directory which Red Gate tools should use.
            This API is not publically supported.
            </summary>
            <returns>The full path to the temp directory.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFile.AutoGenerateFileName(System.String,System.String)">
            <summary>
            AutoGenerates a unique temporary filename.
            </summary>
            <param name="preFix">The prefix to apply to the filename.</param>
            <param name="postFix">The postfix to apply to the filename.</param>
            <returns>The temporary filename.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFile.AutoGenerateShortFileName(System.String,System.String)">
            <summary>
            Autogenerates a unique temporary filename in DOS-compatible 8.3 format.
            </summary>
            <param name="preFix">The prefix to apply to the filename.</param>
            <param name="postFix">The postfix to apply to the filename.</param>
            <returns>The temporary filename.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFile.Delete">
            <summary>
            Deletes the file represented by this instance.
            </summary>
            <returns><em>True</em> if the file was deleted.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFile.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TempFile.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.TempFile.DeleteFileOnDispose">
            <summary>
            Gets or sets a boolean indicating if the temporary file will be deleted when <em>Dispose</em> is called.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.TempFile.FileName">
            <summary>
            Gets the file name of the temporary file.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.IO.TemporaryFileManager">
            <summary>
            A class to manange a set of temporary files. The temporary files are deleted when Dispose or the finalizer is called.
            </summary>
            <remarks>
            Each TemporaryFileManager can have a pre- and postfix applied to each file/directory.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GenerateName">
            <summary>
            Generates a new file or directory name with the default extension.
            This will be unmanaged by any <see cref="T:RedGate.Shared.Utils.IO.TemporaryFileManager"/> instance.
            </summary>
            <returns>A new temporary file or directory name.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GenerateName(System.String)">
            <summary>
            Generates a new file or directory name with the specified extension.
            This will be unmanaged by any <see cref="T:RedGate.Shared.Utils.IO.TemporaryFileManager"/> instance.
            </summary>
            <param name="extension">The extension to apply to the name, without the dot. Can be null or empty for no extension.</param>
            <returns>A new temporary file or directory name.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GenerateName(System.String,System.String)">
            <summary>
            Generates a new file or directory name with the specified prefix and extension.
            This will be unmanaged by any <see cref="T:RedGate.Shared.Utils.IO.TemporaryFileManager"/> instance.
            </summary>
            <param name="prefix">The prefix to apply to the name.</param>
            <param name="extension">The extension to apply to the name, without the dot. Can be null or empty for no extension.</param>
            <returns>A new temporary file or directory name.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.TemporaryFileManager"/> class with an empty prefix.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.TemporaryFileManager"/> class with the specified prefix.
            </summary>
            <param name="prefix">The prefix to apply to all temporary file and directory names.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.IO.TemporaryFileManager"/> class with the specified prefix
            and default extension.
            </summary>
            <param name="prefix">The prefix to apply to all temporary file and directory names.</param>
            <param name="defaultExtension">The default extension for all new temporary files (can be overridden per-file).</param>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GenerateUniqueFilePath(System.String,System.String)">
            <summary>
            Generates a unique filename within the specified subdirectory of <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.
            </summary>
            <param name="parentDir">The subdirectory under which to create the file, relative to the <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.</param>
            <param name="extension">The extension to apply to the filename, without the dot.</param>
            <returns>The full path to the temporary file.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GenerateUniqueDirectoryPath">
            <summary>
            Generates a unique directory name within the specified subdirectory of <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>
            </summary>
            <returns>The full path to the directory.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GetNewTempFile">
            <summary>
            Creates a new temporary file in <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/> that will be deleted on disposal of the current instance.
            </summary>
            <returns>The full path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">You do not have permissions to create a file on <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GetNewTempFile(System.String)">
            <summary>
            Creates a new temporary file with the specified extension in <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>
            that will be deleted on disposal of the current instance.
            </summary>
            <param name="extension">The extension to apply to the file.</param>
            <returns>The full path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">You do not have permissions to create a file on <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GetNewTempFile(System.String,System.String)">
            <summary>
            Creates a new temporary file with the specified extension in the specified subdirectory of <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>
            that will be deleted on disposal of the current instance.
            </summary>
            <param name="subDir">The subdirectory of <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/> to create the file in.</param>
            <param name="extension">The extension to apply to the file.</param>
            <returns>The full path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">You do not have permissions to create a file on <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified subdirectory <paramref name="subDir"/> does not exist.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GetNewTempFile(System.Boolean,System.Boolean)">
            <summary>
            Returns the path to a new temporary file in <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.
            </summary>
            <param name="createFile">If <em>true</em>, the file is also created.</param>
            <param name="deleteOnDispose">If <em>true</em>, the file will be deleted on disposal of this instance if it exists.</param>
            <returns>The full path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">You do not have permissions to create a file on <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GetNewTempFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the path to a new temporary file with the specified extension
            in the specified subdirectory of <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.
            </summary>
            <param name="subDir">The subdirectory to create the temporary file under.</param>
            <param name="extension">The extension to apply to the file.</param>
            <param name="createFile">If <em>true</em>, the file is also created.</param>
            <param name="deleteOnDispose">If <em>true</em>, the file will be deleted on disposal of this instance if it exists.</param>
            <returns>The path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">You do not have permissions to create a file on <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified subdirectory <paramref name="subDir"/> does not exist.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GetNewTempDirectory">
            <summary>
            Creates a new temporary directory in <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/> that will be deleted on disposal of the current instance.
            </summary>
            <returns>A <see cref="T:System.IO.DirectoryInfo"/> object representing the new directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">You do not have the necessary permissions to create a temporary directory.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.GetNewTempDirectory(System.Boolean)">
            <summary>
            Creates a new temporary directory in <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.
            </summary>
            <param name="deleteOnDispose">
            If <em>true</em>, the directory and its contents will be recursively deleted on disposal of this instance, if it exists.
            </param>
            <returns>A <see cref="T:System.IO.DirectoryInfo"/> object representing the new directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">You do not have the necessary permissions to create a temporary directory.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.RegisterFileOrDirectory(System.String)">
            <summary>
            Add a file or directory to be managed by this <see cref="T:RedGate.Shared.Utils.IO.TemporaryFileManager"/> instance. It will be deleted on disposal
            of this instance.
            </summary>
            <param name="path">The absolute path to be managed by this instance</param>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> does not exist as a file or directory</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.DeleteFile(System.String)">
            <summary>
            Deletes the specified temporary file.
            </summary>
            <param name="filename">The path of the temporary file to delete.
            This must have been returned by a previous call to <em>GetNewTempFile</em>.</param>
            <returns><em>True</em> if the file was successfully deleted. <em>False</em> if the file is currently in use.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="filename"/> is not registered as a temporary file.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.TemporaryFileManager.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified temporary directory and all its contents.
            </summary>
            <param name="dirname">The path of the temporary directory to delete.
            This must have been returned by a previous call to <em>GetNewTempDirectory</em>.</param>
            <returns><em>True</em> if the directory was successfully deleted. <em>False</em> if the directory is currently in use.</returns>
            <exception cref="T:System.UnauthorizedAccessException">You do not have write permission to the directory.</exception>
        </member>
        <member name="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath">
            <summary>
            Returns the default temporary directory used for all temporary files.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.DosTemporaryFileManager.ConvertToShortPathName(System.String)">
            <summary>
            Converts the specified path into 8.3 format.
            </summary>
            <param name="path">The full path to convert.</param>
            <returns><paramref name="path"/> in 8.3 format, or the empty string if something went wrong.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.IO.DosTemporaryFileManager.GetNewTempFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the path to a new temporary file with the specified extension
            in the specified subdirectory of <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>, in 8.3 format.
            </summary>
            <param name="subDir">The subdirectory to create the temporary file under.</param>
            <param name="extension">The extension to apply to the file.</param>
            <param name="createFile">If <em>true</em>, the file is also created.</param>
            <param name="deleteOnDispose">If <em>true</em>, the file will be deleted on disposal of this instance if it exists.</param>
            <returns>The path of the temporary file in 8.3 format.</returns>
            <exception cref="T:System.UnauthorizedAccessException">You do not have permissions to create a file on <see cref="P:RedGate.Shared.Utils.IO.TemporaryFileManager.DefaultTempPath"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified subdirectory <paramref name="subDir"/> does not exist.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="T:RedGate.Shared.Utils.MostRecentlyUsed">
            <summary>
            A class for storing a Most Recently Used list in the registry for persistance between application instances.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.MostRecentlyUsed.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.MostRecentlyUsed"/> class using the default MRU size.
            </summary>
            <param name="registryKey">The root registry key to store the MRU list under.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.MostRecentlyUsed.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.MostRecentlyUsed"/> class using the specified MRU size.
            </summary>
            <param name="registryKey">The root registry key to store the MRU list under.</param>
            <param name="MRUlength">The maximum number of values to store in the MRU list.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.MostRecentlyUsed.AddItemToMRUList(System.String)">
            <summary>
            Adds the specified string to the MRU list, replacing the oldest value.
            </summary>
            <param name="s"></param>
        </member>
        <member name="P:RedGate.Shared.Utils.MostRecentlyUsed.List">
            <summary>
            Retrieves the MRU list.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.ProgressExecResult">
            <summary>
            Describes the possible results from a <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/>.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecResult.UNKNOWN">
            <summary>
            The task result is unknown.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecResult.OK">
            <summary>
            The task completed successfully.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecResult.CANCELLED">
            <summary>
            The task was cancelled.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecResult.THREAD_THREW_EXCEPTION">
            <summary>
            A task thread threw an exception.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.ProgressExecState">
            <summary>
            Describes the possible states of a currently executing <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/>.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecState.UNKNOWN">
            <summary>
            Unknown state.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecState.INITIALIZING">
            <summary>
            The progress bar is initializing itself.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecState.RUNNING">
            <summary>
            Running the tasks.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecState.CANCELLING">
            <summary>
            User attempting to cancel the operation.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecState.CANCELLED">
            <summary>
            The operation has been suceessfully cancelled.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecState.ABORTED">
            <summary>
            The operation has been aborted because of an unexpected exception.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.ProgressExecState.SUCCESSFULLY_COMPLETED">
            <summary>
            All the tasks have sucessfully completed.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.ProgressHelpEventArgs">
            <summary>
            Contains information on a <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressHelpEvent"/>.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressHelpEventArgs.Handled">
            <summary>
            Gets or sets a value indicating if the event has been handled.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.ProgressHelpEvent">
            <summary>
            Represents a method to handle a request for help.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="eventArgs">A <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressHelpEventArgs"/> object describing the help event.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.PROGRESS_TASK_ITEM">
            <summary>
            Describes the possible execution states of a <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/>.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.PROGRESS_TASK_ITEM.UNKNOWN">
            <summary>
            The task has been constructed.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.PROGRESS_TASK_ITEM.INITIALIZED">
            <summary>
            The task has been initialized.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.PROGRESS_TASK_ITEM.RUNNING">
            <summary>
            The task is running.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.PROGRESS_TASK_ITEM.FINISHED_OK">
            <summary>
            The task has finished successfully.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.PROGRESS_TASK_ITEM.CANCELLED">
            <summary>
            The task has been cancelled.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Utils.ProgressTasks.PROGRESS_TASK_ITEM.ABORTED">
            <summary>
            The task has been aborted.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask">
            <summary>
            A <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/> represents an execution unit to be executed asynchronously. A task can either have
            a single <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTaskMethod"/> to execute, or a list of sub-tasks that will be executed in order.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.#ctor">
            <summary>
            It's OK to build an empty step. 
            This step can be 
            (i) Left just empty.
            	There is just nothing to run and it will complete imeadiately
            (ii) Have sub tasks set. These sub-tasks will be executed in order 
            	(A task with sub tasks, cannot have a task itself.)
            
            <code> 
            Adding a blank step....
            ProgressTasks tasks = new ProgressTasks();
            
            ProgressTask  thisTask = new ProgressTask();
            thisTask.TaskName = "Complete";
            tasks.Add(thisTask);
            
            Add a task with sub-tasks...
            ProgressTasks tasks = new ProgressTasks();
            ProgressTask thisTask = new ProgressTask();
            
            thisTask.TaskName = "Register Databases";
            {
            	ProgressTasks subTasks = new ProgressTasks();
            	subTasks.Add(new ProgressTask(new ProgressTaskMethod(m_Database1.Register), m_Database1));
            	subTasks[0].TaskName = "Register Database 1";
            	
            	
            	subTasks.Add(new ProgressTask(new ProgressTaskMethod(m_Database2.Register), m_Database2));
            	subTasks[1].TaskName = "Register Database 2";
            	
            	thisTask.SetTasks(subTasks);
            }
            tasks.Add(thisTask);
            
            </code>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.#ctor(RedGate.Shared.Utils.ProgressTasks.ProgressTaskMethod,RedGate.Shared.Utils.ICancellable)">
            <summary>
            A non empty task must have a valid method to call and an relevant <see cref="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.ICancellable"/> item 
            </summary>
            <param name="method">A method that will be called on the Pool of threads</param>
            <param name="cancellable">An <see cref="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.ICancellable"/> object that is called when the user clicks on the cancel button</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.AddSubTaskToEnd(RedGate.Shared.Utils.ProgressTasks.ProgressTask)">
            <summary>
            Adds a new sub-task to be executed after the existing tasks.
            </summary>
            <param name="task">The <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/> to execute.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.AddSubTaskToStart(RedGate.Shared.Utils.ProgressTasks.ProgressTask)">
            <summary>
            Add a new sub-task to be executed before th existing tasks.
            </summary>
            <param name="task">The <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/> to execute.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.SetTasks(System.Collections.Generic.ICollection{RedGate.Shared.Utils.ProgressTasks.ProgressTask})">
            <summary>
            Sets the sub-tasks that will be run.
            </summary>
            <param name="tasks">A list of <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask">ProgressTasks</see> to execute.</param>
            <exception cref="T:System.InvalidOperationException">
            This <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/>
            already has a single <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTaskMethod"/> set.
            </exception>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.ProgressTitleBarText">
            <summary>
            Returns the <see cref="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.ProgressText"/> in a form suitable for use in a title bar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.TaskStart(RedGate.Shared.Utils.StatusEventHandler)">
            <summary>
            Starts execution of the task.
            </summary>
            <param name="statusHandler">The <see cref="T:RedGate.Shared.Utils.StatusEventHandler"/> to receive status events.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.TaskStop(RedGate.Shared.Utils.ProgressTasks.PROGRESS_TASK_ITEM)">
            <summary>
            Stops execution of the task.
            </summary>
            <param name="newState">The new task state to set.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.FireHelpEvent(RedGate.Shared.Utils.ProgressTasks.ProgressHelpEventArgs)">
            <summary>
            Fires the <see cref="E:RedGate.Shared.Utils.ProgressTasks.ProgressTask.HelpRequested">HelpRequested</see> event.
            </summary>
            <param name="hlpevent">The <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressHelpEventArgs"/> to pass to the event handlers.</param>
            <returns><em>True</em> if the event was handled successfully.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.GetTimeToComplete(System.Int32)">
            <summary>
            Returns a nicely formatted estimate of the time remaining.
            </summary>
            <param name="percentComplete">The percentage completed so far.</param>
            <returns>A string containing the estimate of the execution time remaining.</returns>
            <remarks>
            This simply uses the time taken to execute the current percentage to extrapolate the finish time.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.ProgressTask.ExecuteSubTasks">
            <summary>
            This is the worker code that calls each of the tasks in turn. 
            Each call is made on the current thread because this code is already running in its own
            thread.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.Method">
            <summary>
            Gets the method that will be executed.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.SubTasksRunConcurrent">
            <summary>
            Gets or sets a value indicating if sub-tasks can be run concurrently.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Utils.ProgressTasks.ProgressTask.HelpRequested">
            <summary>
            Occurs when help has been requested.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.IsIndeterminate">
            <summary>
            Gets and sets a value indicating if the task is indeterminate, ie. if progress information should be returned.
            The default is that progress information is returned (IsDeterminate == <em>false</em>).
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.State">
            <summary>
            Gets the current state of the task.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.ProgressText">
            <summary>
            Gets and Sets the Progress Text.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.Weight">
            <summary>
            Gets and sets importance of this task relative to others within a group of tasks. The default is 100.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.ICancellable">
            <summary>
            Gets the current <see cref="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.ICancellable"/> item.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.TaskName">
            <summary>
            Gets and sets the task name.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.HasARealTask">
            <summary>
            Gets a value indicating if this <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/> has a single method, or is executing a series of sub-tasks.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.ProgressTask.Status">
            <summary>
            Gets and sets the current task status.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.ProgressTaskMethod">
            <summary>
            A delegate to represent a task to be executed.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs">
            <summary>
            Class containing arguments for an <see cref="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEvent"/>.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs.#ctor(RedGate.Shared.Utils.ProgressTasks.ProgressTask,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs"/> class.
            </summary>
            <param name="task">The <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/> which executed the worker thread.</param>
            <param name="exception">The <see cref="T:System.Exception"/> that was thrown.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs.LogEvent">
            <summary>
            Logs the exception to the <see cref="T:RedGate.Shared.Utils.ExceptionLogger"/> class.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs.WorkerException">
            <summary>
            Gets the exception that was thrown.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs.HasBeenHandled">
            <summary>
            Gets and sets a value indicating if this event has been handled.
            </summary>
            <remarks>If it is handled, it is not displayed inside the main UI.</remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs.Task">
            <summary>
            Gets the <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/> which caused the exception.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEvent">
            <summary>
            Represents a method that is called when a worker thread throws an exception.
            </summary>
            <param name="sender">The cause of this event.</param>
            <param name="eventArgs">A <see cref="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs"/> object containing the event arguments.</param>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadFinishedEventArgs">
            <summary>
            Class containing arguments for an <see cref="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadFinishedEvent"/>.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.Shared.Utils.ProgressTasks.WorkerThreadFinishedEventArgs.#ctor(RedGate.Shared.Utils.ProgressTasks.ProgressExecState)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadFinishedEventArgs"/> class.
            </summary>
            <param name="taskState">The final executing task state.</param>
        </member>
        <member name="P:RedGate.Shared.Utils.ProgressTasks.WorkerThreadFinishedEventArgs.TasksState">
            <summary>
            Gets the final state of the completed task.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadFinishedEvent">
            <summary>
            Represents a method that is called when a worker thread completes execution.
            </summary>
            <param name="sender">The cause of this event.</param>
            <param name="eventArgs">A <see cref="T:RedGate.Shared.Utils.ProgressTasks.WorkerThreadFinishedEventArgs"/> object containing the event arguments.</param>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.Shared.Utils.Registry.FastLocalRegistryAccess">
            <summary>
            This class wraps functionality to access the registry that is simpler to use than
            that provided by the <see cref="N:Microsoft.Win32"/> namespace.
            </summary>
            <remarks>
            It is essential that instances of this class be correctly disposed of so that
            all open registry keys are closed. Note that use of this class over
            <see cref="T:RedGate.Shared.Utils.Registry.LocalRegistryAccess"/> can lead to a performance improvement of around
            20% if keys are being repeatedly accessed, but at the expense of greater memory
            usage.
            </remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Registry.IRegistryAccess">
            <summary>
            Interface defining methods that can be used to access the windows registry.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.IRegistryAccess.HasKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Indicates whether or not the specified key exists in the registry.
            </summary>
            <param name="key">The parent key.</param>
            <param name="subKeyName">The subkey name to find.</param>
            <returns>
            <value>True</value> if the subkey exists under the specified key,
            otherwise <value>false</value>.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.IRegistryAccess.HasValue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Indicates whether or not the specified key has a value with the supplied
            name.
            </summary>
            <param name="key">The parent key.</param>
            <param name="subKeyName">The subkey name.</param>
            <param name="valueName">The subkey value.</param>
            <returns>
            <value>True</value> if a value with the specified name exists,
            otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.IRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.String,System.Object)">
            <summary>
            Gets a value from the registry given a registry key, subkey, and the
            name of the value.
            </summary>
            <param name="key">The parent key.</param>
            <param name="subKeyName">The subkey name.</param>
            <param name="valueName">The subkey value.</param>
            <param name="defaultValue">Default value to use if no such value exists in the registry.</param>
            <returns>Specified value, or supplied default if no such value exists in the registry.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.IRegistryAccess.GetSubKeyNames(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Gets the names of all the subkeys below the specified subkey.
            </summary>
            <remarks>
            Returns only names subkeys that are the immediate children of the
            specified subkey.
            </remarks>
            <param name="key">The parent key.</param>
            <param name="subKeyName">The subkey name.</param>
            <returns>The names of subkeys that are immediate children of the specified key.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.IRegistryAccess.GetValueNames(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Gets the names of all the values stored in the specified subkey.
            </summary>
            <param name="key">The parent key.</param>
            <param name="subKeyName">The subkey name.</param>
            <returns>The names of values stored in the specified subkey.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.FastLocalRegistryAccess.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Utils.Registry.FastLocalRegistryAccess"/> class.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.Registry.LocalRegistryAccess">
            <summary>
            This class wraps functionality to access the registry that is simpler to use than
            that provided by the <see cref="N:Microsoft.Win32"/> namespace.
            </summary>
            <remarks>
            This class provides memory efficient access to the registry since all keys are
            closed immediately after they have been accessed. However, if the same key(s) are
            being repeatedly accessed, and where performance is an important consideration use
            of <see cref="T:RedGate.Shared.Utils.Registry.FastLocalRegistryAccess"/> is recommended, since this caches keys
            and only closes them when disposed of. The downside of this approach is that memory
            usage can be significantly higher.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.LocalRegistryAccess.HasKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Indicates whether or not the specified key exists in the registry.
            </summary>
            <param name="key">Key.</param>
            <param name="subKeyName">Sub key name.</param>
            <returns>
            <value>True</value> if the subkey exists under the specified key,
            otherwise <value>false</value>.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.LocalRegistryAccess.HasValue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Indicates whether or not the specified key has a value with the supplied
            name.
            </summary>
            <param name="key">Key.</param>
            <param name="subKeyName">Subkey name.</param>
            <param name="valueName">Value name</param>
            <returns>
            <value>True</value> if a value with the specified name exists,
            otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.LocalRegistryAccess.GetValue(Microsoft.Win32.RegistryKey,System.String,System.String,System.Object)">
            <summary>
            Gets a value from the registry given a registry key, subkey, and the
            name of the value.
            </summary>
            <param name="key">Key.</param>
            <param name="subKeyName">Subkey name.</param>
            <param name="valueName">Value name.</param>
            <param name="defaultValue">Default value to use if no such value exists in the registry.</param>
            <returns>Specified value, or supplied default if no such value exists in the registry.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.LocalRegistryAccess.GetSubKeyNames(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Gets the names of all the subkeys below the specified subkey.
            </summary>
            <remarks>
            Returns only names of subkeys that are the immediate children of the
            specified subkey.
            </remarks>
            <param name="key">Key.</param>
            <param name="subKeyName">Subkey name.</param>
            <returns>Names of subkeys that are immediate children of the specified key.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.LocalRegistryAccess.GetValueNames(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Gets the names of all the values stored in the specified subkey.
            </summary>
            <param name="key">Key.</param>
            <param name="subKeyName">Subkey name.</param>
            <returns>Names of values stored in subkey.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.LocalRegistryAccess.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.Registry.RegistryAccessFactory">
            <summary>
            Factory for creating instances implementing the
            <see cref="T:RedGate.Shared.Utils.Registry.IRegistryAccess"/> interface.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Registry.RegistryAccessFactory.GetLocalRegistryAccess(System.Boolean)">
            <summary>
            Gets an instance of <see cref="T:RedGate.Shared.Utils.Registry.IRegistryAccess"/> that can be used
            to access the registry on the local machine.
            </summary>
            <remarks>
            Where repeated access to the registry keys is likely, and where registry
            access is likely to be heavy and over a prolonged period, it is recommended
            that <paramref name="hintFast"/> be set to <value>true</value>, since this
            will return an instance that caches accessed keys. Clearly this will in many
            cases result in greater memory utilisation. It also becomes absolutely
            essential to ensure that Dispose is called
            since otherwise many open registry keys will be held until the process
            exits.
            </remarks>
            <param name="hintFast">
            Set <value>true</value> if performance is a priority, otherwise set
            <value>false</value> to get an instance that makes more efficient use
            of memory.
            </param>
            <returns>An instance of the <see cref="T:RedGate.Shared.Utils.Registry.IRegistryAccess"/> interface.</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.Registry.SysInfo">
            <summary>
            Accesses handy system information.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Registry.SysInfo.NumberOfCpus">
            <summary>
            Gets the number of CPUs.
            </summary>
            <remarks>
            This value is retrieved from the registry, so if the expected key
            does not exist <value>-1</value> is returned.
            </remarks>
        </member>
        <member name="T:RedGate.Shared.Utils.Threading.ReliableTimer">
            <summary>
            A timer that actually works, and only uses one thread.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ReliableTimer.OnTick(System.EventArgs)">
            <summary>
            Fires the <see cref="E:RedGate.Shared.Utils.Threading.ReliableTimer.Tick"/> event with the specified EventArgs.
            </summary>
            <param name="e">The EventArgs object to pass to the event handlers.</param>
        </member>
        <member name="E:RedGate.Shared.Utils.Threading.ReliableTimer.Tick">
            <summary>
            This event fires every <see cref="P:RedGate.Shared.Utils.Threading.ReliableTimer.Period"/> milliseconds.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ReliableTimer.Period">
            <summary>
            Gets or sets the number of milliseconds between ticks. Setting this to zero
            or <see cref="F:System.Threading.Timeout.Infinite"/> pauses the timer, setting it negative stops the timer.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Utils.StringUtils">
            <summary>
            Various string-related utility functions.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.IsBlankOrNull(System.Object)">
            <summary>
            Checks if <paramref name="obj"/> is null, or it's string representation is blank or null.
            </summary>
            <param name="obj">The object to test.</param>
            <returns>
            <em>True</em> if <paramref name="obj"/> is null, or the string representation
            of <paramref name="obj"/> is blank or null.
            </returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.CollapseInteriorWhitespace(System.String)">
            <summary>
            Removes redundant interior whitespace from the supplied string (c.f when HTML
            with huge chunks of whitesepace is rendered).  Reduces all sections of extended
            whitespace to a single space character.  Also trims whitespace from the ends of
            the string.
            </summary>
            <param name="source">source string.</param>
            <returns>string with internal whitespace collapsed.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.FindNonWordBreakingChunk(System.String,System.Int32,System.Int32)">
            <summary>
            Used for word-wrapping.  Finds a non-word breaking chunk of characters of length &lt;=
            fixedWidth starting at startIndex.  Note that if no such chunk exists this method will
            break a word, but only if no alternative is left.
            </summary>
            <param name="source">source string.</param>
            <param name="startIndex">start index.</param>
            <param name="fixedWidth">maximum length of chunk to be found.</param>
            <returns>non-word breaking chunk &lt;= fixedWidth in length, or a word-breaking chunk if no non-word breaking chunk exists.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.FormatFixedWidth(System.String,System.Int32,System.Int32)">
            <summary>
            Takes the supplied string and formats it to the specified fixed width
            (including any indent specified) with word-wrapping.  Useful for console
            applications limited to a screen width of 80 characters.
            </summary>
            <param name="source">source string.</param>
            <param name="width">fixed width of resultant text.</param>
            <param name="indent">number of characters by which each line should be indented.</param>
            <returns>string formatted to specified width.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.FormatFixedWidth(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Takes the supplied string and formats it to the specified fixed width
            (including any indent specified) with word-wrapping.  Useful for console
            applications limited to a screen width of 80 characters.
            </summary>
            <param name="source">source string.</param>
            <param name="width">fixed width of resultant text.</param>
            <param name="indent">number of characters by which each line should be indented.</param>
            <param name="stripWhitespace"></param>
            <returns>string formatted to specified width.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.FormatFixedWidth(System.String,System.Int32,System.String)">
            <summary>
            Takes the supplied string and formats it to the specified fixed width
            (including any indent specified) with word-wrapping.  Useful for console
            applications limited to a screen width of 80 characters.
            </summary>
            <param name="source">source string.</param>
            <param name="width">fixed width of resultant text.</param>
            <param name="prefix"></param>
            <returns>string formatted to specified width.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.FormatFixedWidth(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Takes the supplied string and formats it to the specified fixed width
            (including any indent specified) with word-wrapping.  Useful for console
            applications limited to a screen width of 80 characters.
            </summary>
            <param name="source">source string.</param>
            <param name="width">fixed width of resultant text.</param>
            <param name="prefix"></param>
            <param name="stripWhitespace"></param>
            <returns>string formatted to specified width.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.GetDisplayableList(System.Object[],System.String,System.String)">
            <summary>
            Gets a displayable list of values delimited by the specified delimiter string,
            and with the specified prefix.
            </summary>
            <param name="values">Values to be displayed.</param>
            <param name="valuePrefix">Prefix to be applied to values.</param>
            <param name="delimiter">Delimiter string used to separate displayed values.</param>
            <returns>String representation of value array.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.GetDisplayableList(System.Object[],System.String)">
            <summary>
            Gets a displayable list of values delimited by the specified delimiter string.
            </summary>
            <param name="values">Values to be displayed.</param>
            <param name="delimiter">Delimiter string used to separate displayed values.</param>
            <returns>String representation of value array.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.GetDisplayableList``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>
            Gets a displayable list of values delimited by the specified delimiter string,
            and with the specified prefix.
            </summary>
            <param name="values">Values to be displayed.</param>
            <param name="valuePrefix">Prefix to be applied to values.</param>
            <param name="delimiter">Delimiter string used to separate displayed values.</param>
            <returns>String representation of value array.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.GetDisplayableList``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Gets a displayable list of values delimited by the specified delimiter string.
            </summary>
            <param name="values">Values to be displayed.</param>
            <param name="delimiter">Delimiter string used to separate displayed values.</param>
            <returns>String representation of value array.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.LeftTruncate(System.String,System.Int32,System.Int32)">
            <summary>
            Left truncates a string with ellipsis marks, such that if the string is longer
            than the specified maximum length it will be truncated close to its beginning
            and the truncated characters replaced with an ellipsis mark. This preserves the
            end of the string which should contain the most relevant information.
            </summary>
            <param name="source">Source string.</param>
            <param name="prefixLength">Prefix length in characters.</param>
            <param name="maxLength">Maximum length of truncated string.</param>
            <returns>Truncated string.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.StringUtils.LeftTruncate(System.String,System.Single,System.Int32,System.Int32)">
            <summary>
            Left truncates a string with ellipsis marks, such that if the string is longer
            than the specified maximum length it will be truncated close to its beginning
            and the truncated characters replaced with an ellipsis mark. This preserves the
            end of the string which should contain the most relevant information.
            </summary>
            <param name="source">Source string.</param>
            <param name="prefixFraction">Prefix length as a fraction of maximum truncated string length.</param>
            <param name="minPrefixLength">Minimum length of prefix in characters.</param>
            <param name="maxLength">Maximum length of truncated string.</param>
            <returns>Truncated string.</returns>
        </member>
        <member name="T:RedGate.Shared.Utils.Threading.ConfigurableThreadPool">
            <summary>
            Thread pool implementation that is much more configurable that the standard
            .NET thread pool.
            </summary>
            <remarks>
            <para>
            If the thread pool is created to contain N threads, then the number of threads owned
            by the thread pool will actually be N + 1. The +1 is the management thread used to
            dequeue work items thus ensuring that when all threads are in use when a new work item
            is queued the calling thread will not be blocked. This appears to be one of the most
            serious limitations of the standard .NET thread pool, and is particularly problematic
            when the invoking thread is the main thread in a GUI application.
            </para>
            <para>
            Note also that the thread pool will not create N threads as soon as it is created,
            but rather will create additional threads as they are needed up to the specified maximum
            number. Only the management thread will be created straight away.
            </para>
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.#ctor">
            <summary>
            Creates a new thread pool.
            </summary>
            <remarks>
            The number of threads in the pool will be four times
            the number of CPUs installed on the system, or 4 if the number of CPUs cannot be
            determined. The <see cref="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.ThreadPriority"/> will initally be set to
            <see cref="F:System.Threading.ThreadPriority.Lowest"/> but can be changed later,
            and for each <see cref="T:System.Threading.Thread"/> the <see cref="P:System.Threading.Thread.IsBackground"/> property will
            be set <code>false</code>.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.#ctor(System.Int32)">
            <summary>
            Creates a new thread pool of the specified size.
            </summary>
            <remarks>
            The <see cref="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.ThreadPriority"/> of all threads will initially be set to
            <see cref="F:System.Threading.ThreadPriority.Lowest"/> but can be changed later, and for each
            <see cref="T:System.Threading.Thread"/> the <see cref="P:System.Threading.Thread.IsBackground"/> property will be
            set <code>false</code>.
            </remarks>
            <param name="maxThreads">Maximum number of threads in pool.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <code>maxThreads</code> is less than 1.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.#ctor(System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Creates a new thread pool of the specified size and with the <see cref="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.ThreadPriority"/>
            of each <see cref="T:System.Threading.Thread"/> set to the specified value (this can be changed later).
            </summary>
            <remarks>
            For each <see cref="T:System.Threading.Thread"/> the <see cref="P:System.Threading.Thread.IsBackground"/> property
            will be set <code>false</code>.
            </remarks>
            <param name="maxThreads">Maximum number of threads in pool.</param>
            <param name="defaultPriority">Default priority of threads - can be changed later.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <code>maxThreads</code> is less than 1.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new thread pool of the specified size. The <see cref="P:System.Threading.Thread.IsBackground"/>
            property of each <see cref="T:System.Threading.Thread"/> will be set to the supplied value.
            </summary>
            <remarks>
            The <see cref="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.ThreadPriority"/> of each <see cref="T:System.Threading.Thread"/> will be set
            to <see cref="F:System.Threading.ThreadPriority.Lowest"/>.
            </remarks>
            <param name="maxThreads">Maximum number of threads in pool.</param>
            <param name="useBackgroundThreads">Whether or not to use background threads.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <code>maxThreads</code> is less than 1.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.#ctor(System.Int32,System.Threading.ThreadPriority,System.Boolean)">
            <summary>
            Creates a new thread pool of the specified size, with the <see cref="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.ThreadPriority"/> of
            each <see cref="T:System.Threading.Thread"/>, and the <see cref="P:System.Threading.Thread.IsBackground"/> property of each
            <see cref="T:System.Threading.Thread"/> set to the specified values.
            </summary>
            <param name="maxThreads">Maximum number of threads in pool.</param>
            <param name="defaultPriority">Default priority at which threads should run - can be changed later.</param>
            <param name="useBackgroundThreads">Whether or not to use background threads.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <code>maxThreads</code> is less than 1.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.BeginInvoke(System.Delegate)">
            <summary>
            Queues a work item that is expected to return a result. The return value
            from this method can be used later to retrieve the result.
            </summary>
            <param name="method">Work item.</param>
            <returns>Value that can be used to retrieve return value of work item method once it has executed.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Queues a work item that is expected to return a result. The return value
            from this method can be used later to retrieve the result.
            </summary>
            <param name="method">Work item.</param>
            <param name="parms">Parameters to work item method.</param>
            <returns>Value that can be used to retrieve return value of work item method once it has executed.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.BeginInvoke(System.Delegate,System.AsyncCallback)">
            <summary>
            Queues a work item that is expected to return a result. The return value
            from this method can be used later to retrieve the result.
            </summary>
            <param name="method">Work item.</param>
            <param name="callback">Callback method that will be invoked when execution of the work item method is complete.</param>
            <returns>Value that can be used to retrieve return value of work item method once it has executed.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.BeginInvoke(System.Delegate,System.Object[],System.AsyncCallback)">
            <summary>
            Queues a work item that is expected to return a result. The return value
            from this method can be used later to retrieve the result.
            </summary>
            <param name="method">Work item.</param>
            <param name="parms">Parameters to work item method.</param>
            <param name="callback">Callback method that will be invoked when execution of the work item method is complete.</param>
            <returns>Value that can be used to retrieve return value of work item method once it has executed.</returns>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.Invoke(System.Delegate)">
            <summary>
            Queues the supplied work item. Any return value of the work item method
            will be discarded.
            </summary>
            <param name="method">Work item.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.Invoke(System.Delegate,System.AsyncCallback)">
            <summary>
            Queues the supplied work item. Any return value of the work item method
            will be discarded.
            </summary>
            <param name="method">Work item.</param>
            <param name="callback">Callback method that will be invoked when execution of the work item method is complete.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.Invoke(System.Delegate,System.Object[])">
            <summary>
            Queues the supplied work item. Any return value of the work item method
            will be discarded.
            </summary>
            <param name="method">Work item.</param>
            <param name="parms">Parameters to work item method.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.Invoke(System.Delegate,System.Object[],System.AsyncCallback)">
            <summary>
            Queues the supplied work item. Any return value of the work item method
            will be discarded.
            </summary>
            <param name="method">Work item.</param>
            <param name="parms">Parameters to work item method.</param>
            <param name="callback">Callback method that will be invoked when execution of the work item method is complete.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.EndInvoke(System.IAsyncResult)">
            <summary>
            Retrieves the return value of the asynchronous operation represented by the
            <see cref="T:System.IAsyncResult"/> passed.
            </summary>
            <remarks>
            <p>If the asynchronous operation has not been completed, this function will block
            until the result is available.</p>
            <p>Any exception thrown by the asynchronous operation will be rethrown by this
            method.</p>
            </remarks>
            <param name="result">The <see cref="T:System.IAsyncResult"/> object that represents a specific invoke asynchronous operation,
            returned when calling <see cref="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.BeginInvoke(System.Delegate)"/>.</param>
            <returns>The <see cref="T:System.Object"/> generated by the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">The value of <code>result</code> is <code>null</code>.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:RedGate.Shared.Utils.Threading.ConfigurableThreadPool"/> has been disposed of.</exception>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.CancelPendingTasks">
            <summary>
            Cancels all pending tasks. Any attempt to retrieve the result of such a task using
            <see cref="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.EndInvoke(System.IAsyncResult)"/> will result in a <see cref="T:System.Reflection.TargetInvocationException"/>
            being thrown. This exception will wrap an <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <remarks>
            <p>Cancelled tasks remain in the queue until executed by a worker thread, at which point
            the <see cref="T:System.OperationCanceledException"/> will be thrown. Therefore you should not
            expect to see the number of pending tasks immediately decrease. This will only happen
            once any currently executing task(s) are complete, and the worker threads start processing
            the cancelled tasks.</p>
            <p>Cancellation of any task currently executing is your responsibility since the
            <see cref="T:RedGate.Shared.Utils.Threading.ConfigurableThreadPool"/> cannot safely guarantee to cancel such tasks without
            risking the corruption of application state. Therefore it leaves them to complete their
            execution.</p>
            <p>As stated above, pending tasks are immediately marked for cancellation but are not
            immediately removed from the queue. However, it is safe to immediately begin queuing up
            new tasks after calling this method since the new tasks will not be marked as being
            cancelled, and the worker threads will process them normally once they are reached.</p>
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.WorkerThreadExitHandler(System.Object,System.EventArgs)">
            <summary>
            Means that if a worker thread exits because of an exception a new thread
            can be created in the pool.
            </summary>
            <param name="sender">Worker thread.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.Dispose">
            <summary>
            Disposes of the thread pool and its worker threads.
            </summary>
            <remarks>
            If <see cref="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.WaitForExitOnDispose"/> is set <value>true</value> this method
            will block until all worker threads have exited, otherwise it will return
            immediately.
            </remarks>
        </member>
        <member name="E:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.UnhandledException">
            <summary>
            Fired if an unhandled exception occurs in any thread-pool thread.
            </summary>
            <remarks>
            Unhandled exceptions do not terminate thread-pool threads, but are reported
            via this event, and are thrown by the <see cref="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.EndInvoke(System.IAsyncResult)"/> method. Be
            warned that this event can be fired on <strong>any</strong> worker thread.
            </remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.MaxThreadCount">
            <summary>
            Maximum number of threads in pool.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.CurrentThreadCount">
            <summary>
            Number of threads currently in pool.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.BusyThreadCount">
            <summary>
            Number of threads in pool that are currently busy processing
            work items.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.AvailableThreadCount">
            <summary>
            Number of threads in pool that are currently available to do work
            (i.e. that are not currently busy).
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.PendingItemCount">
            <summary>
            Number of outstanding work items in queue waiting to be processed
            by worker threads.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.IsBusy">
            <summary>
            Indicates whether or not the thread pool is busy: i.e. whether any threads
            are working and / or whether any work items are pending.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.ThreadPriority">
            <summary>
            Gets / sets priority of worker threads.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.UseBackgroundThreads">
            <summary>
            Indicates whether or not the pool is using background threads
            to carry out work.
            </summary>
            <remarks>
            If the pool is using background threads then the application will exit
            regardless of whether any threads are still working, if not then the
            application will not be able to exit until all threads have finished
            working.
            </remarks>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.WaitForExitOnDispose">
            <summary>
            Indicates whether or not invoking <see cref="M:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.Dispose"/> will block until
            all threads in the pool have stopped running.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Utils.Threading.ConfigurableThreadPool.IsDelegateValidationEnabled">
            <summary>
            Indicates whether or not delegates will be validated when queued up
            for execution by a thread pool thread.
            </summary>
            <remarks>
            The default value for this property is <code>true</code>, however in
            production systems it is recommended you set it to <code>false</code>
            because the validation uses reflection, which may incur a significant
            performance hit if many work items are being queued.
            </remarks>
        </member>
    </members>
</doc>
