<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedGate.SQLCompare.Engine</name>
    </assembly>
    <members>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareException">
            <summary>This exception is used as the general exception for SQL Compare.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor">
            <summary>Constructs a SqlCompareException exception.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor(System.String)">
            <summary>Constructs a SqlCompareException exception.</summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor(System.String,System.Exception)">
            <summary>Constructs a SqlCompareException exception.</summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an SqlCompareException exception.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextStoplists">
            <summary>
            A collection of full text stoplists.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SerializableDatabaseObjectCollection`1">
            <summary>
            A collection of database objects that can be serialized to disk.
            </summary>
            <typeparam name="T">The type stored in the collection.</typeparam>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SerializableCollection`1">
            <summary>A collection that can be serialized to disk.</summary>
            <remarks>For internal use by SQL Compare.</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.KeyedCollection`1">
            <summary>
            A collection that can store items by key as well as by list index.
            </summary>
            <typeparam name="T">The type stored in the <see cref="T:RedGate.SQLCompare.Engine.KeyedCollection`1"/>.</typeparam>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.KeyedCollection`1.m_InnerList">
            <summary>
            The inner list to store Ts.
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.KeyedCollection`1.m_KeyDictionary">
            <summary>
            Internal keyed dictionary.
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.KeyedCollection`1.#ctor">
            <summary>
            Empty constructor - doesn't do anything. It is up to the caller to initialize the instance members.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.KeyedCollection`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Removes all elements in <paramref name="toRemove"/> from the collection.
            </summary>
            <param name="toRemove"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.KeyedCollection`1.GetKey(`0)">
            <summary>
            For internal use.
            </summary>
            <param name="value">For internal use</param>
            <returns>For internal use</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.KeyedCollection`1.GetEnumerator">
            <summary>Returns the list enumerator.</summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.CaseSensitive">
            <summary>
            True if the keys are stored case-sensitively.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.InnerList">
            <summary>
            For internal use.
            </summary>
            <returns>For internal use</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.KeyDictionary">
            <summary>
            For internal use.
            </summary>
            <returns>For internal use</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.Count">
            <summary>
            Returns the number of elements stored in the <see cref="T:RedGate.SQLCompare.Engine.KeyedCollection`1"/>.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.Item(System.Int32)">
            <summary>
            Returns elements by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.Item(System.String)">
            <summary>
            Returns elements by key.
            </summary>
            <param name="key"></param>
            <returns>The value, or default(<typeparamref name="T"/>) if not found.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableCollection`1.SerializeItem(`0,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableCollection`1.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDatabaseObjects`1">
            <summary>A collection of database objects.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObjects`1.Item(System.String)">
            <summary>For internal use only.</summary>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableDatabaseObjectCollection`1.GetKey(`0)">
            <summary>
            For internal use.
            </summary>
            <param name="value">For internal use</param>
            <returns>For internal use</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SerializableDatabaseObjectCollection`1.Item(System.String,System.String)">
            <summary>
            Returns a database object given its owner and name.
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStoplists.SerializeItem(RedGate.SQLCompare.Engine.FullTextStoplist,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStoplists.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TableFields">
            <summary>
            A collection of Fields belonging to several different tables
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKey">
            <summary>An asymmetric key.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseObjectWithAuthorization">
            <summary>
            A database object that can have its owner altered using ALTER AUTHORIZATION.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ScriptableDatabaseObject">
            <summary>
            Represents a scriptable database object. Also has default implementations of
            some of the IDatabaseObject methods &amp; properties
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDatabaseObject">
            <summary>An interface implemented by database objects.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabaseObject.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares two database objects.</summary>
            <returns>
            	<em>True</em> if the database objects are identical; otherwise
            <em>false.</em>
            </returns>
            <param name="target">The object to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.FullyQualifiedName">
            <summary>The fully-qualified name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.Name">
            <summary>The name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.Owner">
            <summary>The owner or schema of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.Database">
            <summary>The database to which the object belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.ObjectType">
            <summary>The type of the object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares two database objects.</summary>
            <returns>
            	<em>True</em> if the database objects are identical; otherwise
            <em>false.</em>
            </returns>
            <param name="target">The object to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Options that may influence the scripting.</param>
            <returns>Regions that contain the script.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Name">
            <summary>The name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.FullyQualifiedName">
            <summary>The fully-qualified name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Owner">
            <summary>The owner or schema of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Database">
            <summary>The database to which the object belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.ScriptSource">
            <summary>
            The script source for this object, if the database source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.ObjectType">
            <summary>The type of the object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IHasAuthorization">
            <summary>
            Marks objects that have an owner instead of a schema. Note that some objects can have both
            an owner and a schema; in this instance, <see cref="T:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization"/> is used instead.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseObjectWithAuthorization.ScriptSourceAuthorization">
            <summary>
            The script source for any ALTER AUTHORIZATION statement.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseObjectWithAuthorization.FullyQualifiedOwner">
            <summary>
            The fully qualified owner of the object.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IHasPermissions">
            <summary>The database object may have permissions associated with it.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IHasPermissions.Permissions">
            <summary>
            The permissions of the object.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKey.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the asymmetric key with a specified asymmetric key.</summary>
            <returns>
            	<em>True</em> if the asymmetric keys are identical; otherwise,
            <em>false.</em>
            </returns>
            <param name="targetObject">The asymmetric key to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKey.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options, for example quoted identifier on or off.</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.ObjectType">
            <summary>Returns ObjectType.AsymmetricKey</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.Permissions">
            <summary>
            The permissions on this asymmetric key.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.ThumbPrint">
            <summary>The thumb print for the asymmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.KeyAlgorithm">
            <summary>
            The key algorithm.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.KeyLength">
            <summary>The length of the asymmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.PrivateKeyEncryption">
            <summary>The encryption type of the asymmetric key's private key.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption">
            <summary>How the private key of the asymmetric key is encrypted.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.NotAvailable">
            <summary>NA = There is no private key for the asymmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.MasterKey">
            <summary>MK = Private key is encrypted by the master key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.PrivateKey">
            <summary>PW = Private key is encrypted by a user-defined password.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.ServiceKey">
            <summary>
            SK = Private key is encrypted by the service master key.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm">
            <summary>The asymmetric key encryption algorithm.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm.RSA512">
            <summary>
            1R = RSA 512
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm.RSA1024">
            <summary>
            1R = RSA 1024
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm.RSA2048">
            <summary>
            1R = RSA 2048
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKeys">
            <summary>A collection of asymmetric keys.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKeys.SerializeItem(RedGate.SQLCompare.Engine.AsymmetricKey,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKeys.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.BlobStore">
            <summary>
            Summary description for BlobStore.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Certificate">
            <summary>A certificate.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificate.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the certificates are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the certificate with a specified certificate.</summary>
            <param name="targetObject">The certificate to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificate.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ObjectType">
            <summary>Returns ObjectType.Certificate</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.Permissions">
            <summary>
            The permissions on this certificate.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.SerialNumber">
            <summary>
            The certificate's serial number.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.StartDate">
            <summary>The start date of the certificate.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ExpiryDate">
            <summary>
            The expiry date of the certificate.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ActiveForDialog">
            <summary>
            True if the certificate is available to the initiator of a Service Broker dialog
            conversation.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.IssuerName">
            <summary>The name of the certificate's issuer.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.KeyEncryptionType">
            <summary>
            The certificate's private key encryption type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.Subject">
            <summary>
            The certificate's subject.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ThumbPrint">
            <summary>The thumb print for this certificate.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption">
            <summary>
            How the private key of the certificate is encrypted.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.NotAvailable">
            <summary>NA = There is no private key for the certificate.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.MasterKey">
            <summary>MK = Private key is encrypted by the master key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.PrivateKey">
            <summary>PW = Private key is encrypted by a user-defined password.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.ServiceKey">
            <summary>
            SK = Private key is encrypted by the service master key.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Certificates">
            <summary>A collection of certificates.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificates.SerializeItem(RedGate.SQLCompare.Engine.Certificate,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificates.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.CheckConstraint">
            <summary>A check constraint.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ISysobjectIdentifiable">
            <summary>
            For classes that store object that can be uniquely identified using a sys.objects identifier.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ISysobjectIdentifiable.SysobjectID">
            <summary>
            The sysobject identier of the object.
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraint.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the check constraint with a specified check constraint.</summary>
            <returns>Compares the table with a specified table.</returns>
            <param name="obj">The constraint to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Database">
            <summary>The database to which the object belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.ObjectType">
            <summary>Returns ObjectType.CheckConstraint.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Fields">
            <summary>The fields in the check constraint.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.NoCheck">
            <summary>
            True if the constraint is marked as WITH NOCHECK (that is, it is not
            trusted).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.SysobjectID">
            <summary>
            The sysobject identier of the object.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Name">
            <summary>The constraint name.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.FullyQualifiedName">
            <summary>The fully-qualified name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Owner">
            <summary>The owner or schema of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.NotForReplication">
            <summary>True if the check constraint is marked <em>not for replication</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Disabled">
            <summary>True if the check constraint is disabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Text">
            <summary>The constraint text.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.ScriptSource">
            <summary>
            The location of the creation script for this object if the database source is set to 
            scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.ScriptSourceNocheck">
            <summary>
            The location of any ALTER TABLE ... NOCHECK CONSTRAINT commands on the constraint.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.CheckConstraints">
            <summary>A collection of check constraints.</summary>
            <moduleiscollection/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.SerializeItem(RedGate.SQLCompare.Engine.CheckConstraint,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.GetKey(RedGate.SQLCompare.Engine.CheckConstraint)">
            <summary>
            Generates a key for a check constraint.
            </summary>
            <param name="value">The check constraint for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.Sort">
            <summary>
            Sorts triggers based on their names (this is generally used for collections of tables, so the table name
            does not need to be considered.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraints.Item(System.String)">
            <summary>
            Returns a check constraint given a name.
            </summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraints.Item(RedGate.SQLCompare.Engine.Table,System.String)">
            <summary>
            Returns a check constraint given a table and a name.
            </summary>
            <param name="table">The table component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.CheckConstraintComparer.Compare(RedGate.SQLCompare.Engine.CheckConstraint,RedGate.SQLCompare.Engine.CheckConstraint)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrAssemblies">
            <summary>A collection of Common Language Runtime (CLR) assemblies.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssemblies.SerializeItem(RedGate.SQLCompare.Engine.ClrAssembly,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssemblies.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssemblies.Item(System.Int32)">
            <summary>Returns a CLR assembly given its identifier.</summary>
            <param name="index">The system id of the assmebly.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionSet">
            <summary>
            The code access permissions for CLR assemblies.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionSet.SAFE">
            <summary>Safe.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionSet.EXTERNAL_ACCESS">
            <summary>External access.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionSet.UNSAFE">
            <summary>Unsafe.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrAssembly">
            <summary>A Common Language Runtime (CLR) assembly.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssembly.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the assemblies are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the assembly with a specified assembly.</summary>
            <param name="targetObject">The assembly to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssembly.CanBeAlteredTo(RedGate.SQLCompare.Engine.ClrAssembly)">
            <summary>
            This method check if a CLR assembly can be altered to the target assembly, i.e. all of 
            its method signatures are the same.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssembly.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Options that may influence the scripting.</param>
            <returns>Regions that contain the script.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.ID">
            <summary>The sysobject identifier for the CLR assembly.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.Permissions">
            <summary>
            The permissions on this CLR assembly.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.ScriptSourceVisibility">
            <summary>
            The script source for any ALTER ASSEMBLY statements attached to this assembly
            other than adding files
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.PermissionSet">
            <summary>
            The code access permission for the CLR assembly.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.CLRName">
            <summary>
            The CLR name of the assembly.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.Visibility">
            <summary>
            Indicates whether the assembly's visibility is set to on or off.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.Files">
            <summary>The files that belong to the assembly.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.ExtendedProperties">
            <summary>The extended properties defined for the CLR assembly.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyComparerException">
            <summary>
            This exception is used when two CLR assemblies are compared.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyComparerException.#ctor">
            <summary>
            Constructs an AssemblyComparerException exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyComparerException.#ctor(System.String)">
            <summary>
            Constructs an AssemblyComparerException exception.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyComparerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an AssemblyComparerException exception.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyComparerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an ClrAssemblyComparerException exception.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData">
            <remarks>
            This is a partial class in order to keep the files to a manageable size.
            The relevant files are: ClrAssemblyMetaData.cs, ClrAssemblyMetaDataSubClasses.cs.
            This file contains the main methods of ClrAssemblyMetaData.
            </remarks>
            <remarks>
            This is a partial class in order to keep the files to a manageable size.
            The relevant files are: ClrAssemblyMetaData.cs, ClrAssemblyMetaDataSubClasses.cs.
            This file contains the subclasses of ClrAssemblyMetaData.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.RvaToOffset(System.UInt32)">
            <summary>
            Converts relative virtual addresses to physical offsets.
            </summary>
            <param name="rva"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.#ctor(System.Byte[],RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaDataOptions)">
            <summary>
            Constructs the AssemblyMetaData class. 
            </summary>
            <param name="assembly">Byte-array image of the assembly to load</param>
            <param name="options">Determines which parts of the assembly to analyse</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.ProcessParameters(RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.Tables,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Metadata tables - Param (0x08) ECMA 335.4 - §22.33
            </summary>
            <param name="tables"></param>
            <param name="binaryReader"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.ProcessModule(RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.Tables,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Assembly tables - Module (0x00) ECMA 335.4 - §22.30
            </summary>
            <param name="tables"></param>
            <param name="binaryReader"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.ProcessAssemblyName(RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.Tables,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Assembly tables - Assembly (0x20) ECMA 335.4 - §22.2
            </summary>
            <param name="tables"></param>
            <param name="binaryReader"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.ProcessFields(RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.Tables,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Metadata tables - Field (0x04) ECMA 335.4 - §22.15
            </summary>
            <param name="tables"></param>
            <param name="binaryReader"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.ProcessMethods(RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.Tables,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Metadata tables - MethodDef (0x06) ECMA 335.4 - §22.26
            </summary>
            <param name="tables"></param>
            <param name="binaryReader"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.ProcessTypeDef(RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.Tables,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Metadata tables - TypeDef (0x02) ECMA 335.4 - §22.37
            </summary>
            <param name="tables"></param>
            <param name="binaryReader"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.ProcessAssemblyRef(RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.Tables,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Metadata tables - AssemblyRef (0x23) ECMA 335.4 - §22.5
            </summary>
            <param name="tables"></param>
            <param name="binaryReader"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.ProcessTypeRef(RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.Tables,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Metadata tables - TypeRef (0x01) ECMA 335.4 - §22.38
            </summary>
            <param name="tables"></param>
            <param name="binaryReader"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.GetStringFromStringStream(System.Int32)">
            <summary>
            Gets a UTF8 string from the string stream (note that the string stream might not be contiguous and
            may contain all kinds of crap)
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.GetGuidFromGuidStream(System.Int32,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Gets a guid string from the guid stream (note that the guid stream might not be contiguous and
            may contain all kinds of crap)
            </summary>
            <param name="number">Index of GUID in GUID stream, beginning with 1.</param>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.GetBlobFromBlobStream(System.Int32,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Gets a binary blob from the blob stream. (note that the blob stream might not be contiguous and
            may contain all kinds of crap)
            </summary>
            <param name="offset"></param>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.GetPEHeaderOffset(System.UInt32,RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader)">
            <summary>
            Gets the PE file header offset from the dos stub
            </summary>
            <param name="dosStubOffset"></param>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrMetaData.ClrAssemblyMetaData.TableType">
            <summary>
            'Types' in .NET metadata may be simple types, coded token types, tables or heap indexes.
            Thus this enum describes all tables and codedtoken types as well as describing all types.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader">
            <summary>
            Replaces BinaryReader - the method signatures are compatible.
            FastBinaryReader is faster for reading from byte arrays, as the methods are all non-virtual,
            whereas all the BinaryReader methods are both virtual themselves and call virtual methods on the
            underlying Stream.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader.ReadUInt64">
            <remarks>These reading functions are largely copied from BinaryReader using Lutz's Reflector.
            Be careful making changes - putting the casts in the wrong way can break them.</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrMetaData.FastBinaryReader.BaseStreamStruct">
            <summary>
            This class allows the FastBinaryReader class to behave like BinaryReader with the BaseStream property.
            (Note that BinaryReader has no Position property itself.)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrFile">
            <summary>A Common Language Runtime (CLR) file.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrFile.ScriptSource">
            <summary>
            The script source for this CLR file.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrFile.Name">
            <summary>The name of the CLR file.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrFile.Contents">
            <summary>
            The raw data of the CLR assembly file.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrFiles">
            <summary>A collection of CLR files.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrFiles.Add(RedGate.SQLCompare.Engine.ClrFile)">
            <exclude/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ConnectionProperties">
            <summary>The connection properties used to connect to a SQL Server database.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.#ctor">
            <summary>Constructor for the ConnectionProperties class.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.#ctor(System.String,System.String)">
            <summary>Constructor for integrated security.</summary>
            <param name="serverName">The SQL Server name.</param>
            <param name="databaseName">The database name.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Constructor for SQL security.</summary>
            <param name="serverName">The SQL Server name.</param>
            <param name="databaseName">The database name.</param>
            <param name="userName">The user name to use to connect to the SQL Server.</param>
            <param name="password">The password to use to connect to the SQL Server.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used in serialization.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.ToDBConnectionInformation">
            <summary>
            Returns a DBConnectionInformation object representing the current connection properties.
            </summary>
            <returns>A DBConnectionInformation object with the same connection information as this object.</returns>
            <remarks>
            This can be passed to <see cref="M:RedGate.Shared.SQL.ExecutionBlock.BlockExecutor.ExecuteBlock(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.Shared.SQL.DBConnectionInformation)"/>
            to use these connection properties to run a synchronization script on the database represented by
            the current ConnectionProperties object.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.ServerName">
            <summary>The name of the SQL Server to connect to.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.DatabaseName">
            <summary>The name of the database to connect to.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.IntegratedSecurity">
            <summary>
            True to use integrated authentication, false for SQL Server
            authentication.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.UserName">
            <summary>The user name to use when connecting to the SQL Server.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.Password">
            <summary>The password to use when connecting to the SQL Server.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.ConnectionString">
            <summary>
            Returns the connection string for this connection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Contract">
            <summary>A contract.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IIsSystemObject">
            <summary>
            Indicates that an object instance is a system object when implemented by a
            class.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IIsSystemObject.IsSystemObject">
            <summary>Indicates that the object is a system object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.PatchUpAfterDeserialization2(RedGate.SQLCompare.Engine.Database)">
            <summary>
            Prerequisites: services loaded!, message types are available
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the contracts are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the contract with a specified contract.</summary>
            <param name="targetObject">The contract to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.Name">
            <summary>The name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.ExtendedProperties">
            <summary>The extended properties defined for the contract.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.Permissions">
            <summary>
            The permissions on this contract.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.IsSystemObject">
            <summary>Indicates whether the object is a system object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.Usages">
            <summary>The message types used by the contract.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.Services">
            <summary>The services that depend on the contract.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Contracts">
            <summary>A collection of contracts.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contracts.SerializeItem(RedGate.SQLCompare.Engine.Contract,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contracts.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseEncryption">
            <summary>
            The type of encryption applied to the database.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseEncryption.None">
            <summary>
            No encryption.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseEncryption.AES128">
            <summary>
            AES 128-bit encryption.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseEncryption.AES192">
            <summary>
            AES 192-bit encryption.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseEncryption.AES256">
            <summary>
            AES 256-bit encryption.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseEncryption.TripleDes">
            <summary>
            Triple DES 192-bit encryption.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Database">
            <summary>A SQL Server database.</summary>
            <remarks>
            	<para>
                    Use <see cref="M:RedGate.SQLCompare.Engine.Database.Register(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)"/> to register the database from a live server or
                    <see cref="M:RedGate.SQLCompare.Engine.Database.LoadFromDisk(System.String)"/> to load a database from a snapshot.
                </para>
            	<para>
                    Registering a database is a long-running operation. Status feedback is provided
                    via the <see cref="P:RedGate.SQLCompare.Engine.Database.Status"/> event handler. To cancel the operation, call
                    CancelOperation.
                </para>
            	<para>
                    You must call <see cref="M:RedGate.SQLCompare.Engine.Database.Dispose(System.Boolean)"/> when you have finished using a
                    Database object.
                </para>
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.#cctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SaveToDisk(System.String)">
            <summary>Saves the database to disk.</summary>
            <example>
                The example shows how you save and load a snapshot.
                <code lang="CS">
            //register a database using integrated security
            Database db1=new Database();
            db1.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             
            //save the database to disk
            db1.SaveToDisk(@"c:\WidgetStaging.snp");
             
            Database db2=new Database();
            db2.LoadFromDisk(@"c:\WidgetStaging.snp");
             
            //dispose of the objects
            db1.Dispose();
            db2.Dispose();
                </code>
            	<code lang="VB">
            'register a database using integrated security
            Dim db1 As New Database()
            db1.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             
            'save the database to disk
            db1.SaveToDisk("c:\WidgetStaging.snp")
             
            Dim db2 As New Database()
            db2.LoadFromDisk("c:\WidgetStaging.snp")
             
            'dispose of the objects
            db1.Dispose()
            db2.Dispose()
                </code>
            </example>
            <param name="fileName">The name of the snapshot file to be created.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SaveToFolder(System.String)">
            <summary>
            Saves the database as a set of creation scripts to the specified folder.
            </summary>
            <param name="folderName"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SaveToFolder(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions)">
            <summary>
            Saves the database as a set of creation scripts to the specified folder.
            </summary>
            <param name="folderName"></param>
            <param name="wtf">Options to control how the script files are written to the folder.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.LoadFromDisk(System.String)">
            <summary>Loads the database from disk.</summary>
            <remarks>Progress events are fired via the Status event.</remarks>
            <example>
            See <see cref="M:RedGate.SQLCompare.Engine.Database.SaveToDisk(System.String)"/> for a code sample.
            </example>
            <param name="fileName">The name of the database snapshot file to load.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads the database from a stream. This is an alternative to the LoadFromDisk method.
            </summary>
            <param name="f">The open stream from which to read the database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetConnectionPropertiesFromFile(System.String)">
            <summary>Reads connection properties from a file.</summary>
            <returns>Connection properties.</returns>
            <remarks>
            Provides a way to retrieve SQL Server name, database name, and other connection
            information from a .snp file without loading the file.
            </remarks>
            <param name="fileName">The name of a .scdb file.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Register(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>Registers a database.</summary>
            <remarks>
            Connects to a database and retrieves all schema information. The database object
            can then be saved to disk or used in a comparison. Progress feedback is provided via
            the Status event.
            </remarks>
            <example>
                This example shows how you register a database from a live server, with feedback.
                <code lang="CS">
            using System;
            using RedGate.Shared.Utils;
            using RedGate.SQLCompare.Engine;
             
            namespace ConsoleApplication2
            {
                /// &lt;summary&gt;
                /// Summary description for SQLDataCompareSnippets.
                /// &lt;/summary&gt;
                public class Class1
                {
             
                    public static void Main()
                    {
                        Class1 c1=new Class1();
                        c1.Run();
                    }
             
                    private void StatusCallback(object sender, StatusEventArgs e)
                    {
                        //fired by the SqlProvider to indicate events
             
                        if (e.Message!=null)
                        {
                            Console.WriteLine(e.Message);
                        }
             
                        if (e.Percentage!=-1)
                        {
                            Console.WriteLine("{0}%", e.Percentage);
                        }
             
                    }
             
                    private void Run()
                    {
                        Database db=new Database();
                        db.Status+=new StatusEventHandler(StatusCallback);
                        db.Register(new ConnectionProperties(".", "WidgetStaging"),Options.Default);
                        db.Dispose();
                    }
                }
            }
                </code>
            	<code lang="VB">
            Option Explicit On 
             
            Imports RedGate.Shared.Utils
            Imports RedGate.SQLCompare.Engine
             
            Module Module3
             
                Sub Main()
             
                    Dim c As Class1 = New Class1()
             
                    c.Run()
                    Console.WriteLine("Press [Enter]")
                    Console.ReadLine()
             
                End Sub
             
                Public Class Class1
             
                    Sub StatusCallback(ByVal sender As Object, ByVal e As StatusEventArgs)
             
                        If Not (e.Message Is Nothing) Then
                            Console.WriteLine(e.Message)
                        End If
             
                        If e.Percentage &lt;&gt; -1 Then
                            Console.WriteLine("{0}%", e.Percentage)
                        End If
             
             
                    End Sub
             
                    Sub Run()
             
                        Dim db As New Database()
                        db.Status = New StatusEventHandler(AddressOf Me.StatusCallback)
                        db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
                        db.Dispose()
                    End Sub
             
             
                End Class
            End Module
                </code>
            </example>
            <param name="connectionProperties">The connection properties associated with the database.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Register(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Registers the database from creation scripts that are stored in the folder specified 
            by the path parameter.
            </summary>
            <param name="path">The path to the folder that contains the creations scripts.</param>
            <param name="dbinfo">This is an optional parameter. If the specified folder contains
            the SQL Compare generated xml file with the necessary database information, it does not need 
            to be specified. However, if the folder does not contain this information, or this information
            needs to be overriden, then this parameter must be set.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForDataCompare(RedGate.SQLCompare.Engine.ConnectionProperties)">
            <summary>
            Registers a database for SQL Data Compare.
            </summary>
            <param name="connectionProperties">The connection properties to use for the database connection.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForDataCompare(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Registers a database for SQL Data Compare.
            </summary>
            <param name="connectionProperties">The connection properties to use for the database connection.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForDependencyViewer(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Internal use only.
            </summary>
            <param name="connectionProperties">Internal use only.</param>
            <param name="options">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterGetObjectOwners(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Internal use only.
            </summary>
            <param name="connectionProperties">Internal use only.</param>
            <param name="options">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForSqlPrompt(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options,System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
            <param name="connectionProperties">Internal use only.</param>
            <param name="options">Internal use only.</param>
            <param name="includeSystemObjects">Internal use only.</param>
            <param name="includeDependencies">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForRefactoring(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Internal use only.
            </summary>
            <param name="connectionProperties">Internal use only.</param>
            <param name="options">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForRefactoring(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
            <param name="connectionProperties">Internal use only.</param>
            <param name="options">Internal use only.</param>
            <param name="includeSystemObjects">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SetupPrivateVariables(RedGate.SQLCompare.Engine.Options)">
            <summary>
            
            </summary>
            <param name="options"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CreateEmptyTarget">
            <summary>
            For internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the database with another database.</summary>
            <returns>
                A <see cref="T:RedGate.SQLCompare.Engine.Differences"/> collection containing the differences between the
                two databases.
            </returns>
            <remarks>
            	<para>
                    When two databases have been compared they can be synchronized using the
                    <see cref="T:RedGate.SQLCompare.Engine.Work"/> class. Note that all objects that differ are selected
                    for synchronization by default.
                </para>
            	<para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <example>
                This example shows how you compare two databases and print out a summary of the
                differences. 
                <code lang="CS">
            Database db1=new Database();
            Database db2=new Database();
             
            db1.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
            db2.Register(new ConnectionProperties(".", "WidgetProduction"), Options.Default);
             
            Differences differences=db1.CompareWith(db2, Options.Default);
             
            foreach (Difference difference in differences)
            {
                Console.WriteLine("{0} {1} {2}", difference.Type.ToString(), difference.DatabaseObjectType.ToString(), difference.Name);
            }
             
            //dispose of the objects
            db1.Dispose();
            db2.Dispose();
                </code>
            	<code lang="VB">
            Dim db1 As New Database()
            Dim db2 As New Database()
             
            db1.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
            db2.Register(New ConnectionProperties(".", "WidgetProduction"), Options.Default)
             
            Dim differences As Differences = db1.CompareWith(db2, Options.Default)
             
            Dim difference As Difference
             
            For Each difference In differences
                Console.WriteLine("{0} {1} {2}", difference.Type.ToString(), difference.DatabaseObjectType.ToString(), difference.Name)
            Next
             
            'dispose of the objects
            db1.Dispose()
            db2.Dispose()
                </code>
            </example>
            <param name="targetDatabase">The database to compare with.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>Compares the database with another database.</summary>
            <returns>
                A <see cref="T:RedGate.SQLCompare.Engine.Differences"/> collection containing the differences between the
                two databases.
            </returns>
            <remarks>
            	<para>
                    When two databases have been compared they can be synchronized using the
                    <see cref="T:RedGate.SQLCompare.Engine.Work"/> class. Note that all objects that differ are selected
                    for synchronization by default.
                </para>
            	<para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <param name="targetDatabase">The database to compare with.</param>
            <param name="options">Comparison options.</param>
            <param name="mappings">Owner mappings.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetDependencies(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the dependencies of a particular string of SQL code. Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetDependenciesFromExpression(System.String)">
            <summary>
            For defaults and column dependencies
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetDependencyStacks">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.AddDependencyStack(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.String},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.Stack{System.String[]})">
            <summary>
            For internal use only.
            </summary>
            <param name="id"></param>
            <param name="objectIDs"></param>
            <param name="objectNames"></param>
            <param name="dependencyStack"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SanitizeDatabaseDependencyRelated(System.Boolean)">
            <summary>
            This goes through the just populated database, and sanitizes it, and adds links if they
            were missed. This step first expands dependencies, and sanitizes the database.
            Prerequisite: SanitizeDatabaseCleanDanglingObjects
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SanitizeDatabaseCleanDanglingObjects(RedGate.SQLCompare.Engine.Options)">
            <summary>
            This goes through the just populated database, and sanitizes it, and adds links if they
            were missed.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CancelOperation">
            <summary>Cancels the current operation.</summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.OnStatus(RedGate.Shared.Utils.StatusEventArgs)">
            <summary>
            Fire the status events
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Dispose(System.Boolean)">
            <summary>Disposes of the object.</summary>
            <remarks>
            It is important to dispose of the object to delete any temporary files it
            uses.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Clone">
            <summary>
            A deep clone of the database object.
            </summary>
            <returns>A deep clone of the database object.</returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetFullyQualifiedName(System.String)">
            <summary>
            Converts full names to names with []. E.g. dbo.table -> [dbo].[table]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetAvailableOptions">
            <summary>Returns a list of available options.</summary>
            <returns>A list of options.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.ParseObjectName(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Breaks up a name into its constituent parts, such as object name, owner name, database name, and server name.
            </summary>
            <param name="fullyQualifiedName"></param>
            <param name="serverName"></param>
            <param name="databaseName"></param>
            <param name="ownerName"></param>
            <param name="objectName"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.FixTextualObjectName(System.String,System.String,System.String,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Fix the text definition of a schema object to deal with object renames
            </summary>
            <param name="text"></param>
            <param name="newOwner"></param>
            <param name="newName"></param>
            <param name="options"></param>
            <param name="quotedIdentifiers"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.FixTextualObjectName(System.String,System.String,System.String,System.String,System.String,RedGate.SQLCompare.Engine.Options,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Fix the text definition of a schema object or DML trigger to deal with object renames.
            </summary>
            <param name="text"></param>
            <param name="newOwner"></param>
            <param name="newName"></param>
            <param name="newParentOwner"></param>
            <param name="newParentName"></param>
            <param name="options"></param>
            <param name="quotedIdentifiers"></param>
            <param name="trigger"></param>
            <param name="refactored"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RetrieveCaseInformationFromLiveDatabase(System.Data.SqlClient.SqlConnection)">
            <summary>
            This static method returns true if the database in question is using
            a case sensitive collation.
            </summary>
            <param name="connection">A connection to the database to be checked. If the connection
            that is provided is closed, it will be opened again, then closed.</param>
            <returns>True if the database collation is case sensitive.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetLiveDatabaseCaseSensitivity(System.Data.SqlClient.SqlConnection)">
            <summary>
            Internal use only.
            </summary>
            <param name="connection">Internal use only.</param>
            <returns>Internal use only.</returns>
            <exclude/>
            <excludeToc/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.DateScripted">
            <summary>The date the database object was created.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ParserMessages">
            <summary>
            A list of parser messages generated during population from a script folder.
            This will be null if the database source is not a set of scripts.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.MajorVersion">
            <summary>
            The major version of the SQL Server for the database. This reflects the
            compatibility mode of the database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ServerMajorVersion">
            <summary>
                The major server version of the SQL Server for the database. This may be different
                from the <see cref="P:RedGate.SQLCompare.Engine.Database.MajorVersion">MajorVersion</see> property if the database is
                running in a compatibility mode.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ServerVersionNumber">
            <summary>
            The full version number of the SQL Server.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.CaseSensitive">
            <summary>
            Indicates whether the database has been set up as case sensitive.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.CaseSensitiveServer">
            <summary>
            Information about the database coillation. This information is only
            populated for the refactoring tool.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Collation">
            <summary>
            The collation of the database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.EncryptionEnabled">
            <summary>
            Whether database encryption is enabled for this database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.EncryptionAlgorithm">
            <summary>
            The transparent database encryption algorithm set for the database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ExtendedProperties">
            <summary>Database-level extended properties.</summary>
            <remarks>
            The collection contains extended properties that have been defined at the
            database level. Individual database objects (such as tables and users) can also have
            extended properties defined on them.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ConnectionProperties">
            <summary>The connection properties for the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.FullTextEnabled">
            <summary>True if the database has full text enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Tables">
            <summary>The tables in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.StoredProcedures">
            <summary>The stored procedures in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Views">
            <summary>The views in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Defaults">
            <summary>The defaults in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.UserDefinedTypes">
            <summary>The user-defined types in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Rules">
            <summary>The rules in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Functions">
            <summary>The user-defined functions in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Users">
            <summary>The users in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Triggers">
            <summary>The DML triggers in the database.</summary>
            <remarks>This will not be implemented for a while, hence it is internal now. Dead code!</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.DdlTriggers">
            <summary>The DDL triggers in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Roles">
            <summary>The roles in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Schemas">
            <summary>
            The schemas in the database. Note that schemas were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Assemblies">
            <summary>
            The CLR assemblies in the database. Note that CLR assemblies were introduced in
            SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.MessageTypes">
            <summary>
            The message types in the database. Note that message types were introduced in SQL
            Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Synonyms">
            <summary>
            The synonyms in the database. Note that synonyms were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.EventNotifications">
            <summary>
            The database-level event notifications in the database. Note that event
            notifications were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Routes">
            <summary>
            The routes in the database. Note that routes were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Queues">
            <summary>
            The queues in the database. Note that queues were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Contracts">
            <summary>
            The contracts in the database. Note that contracts were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Services">
            <summary>
            The services in the database. Note that services were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.XmlSchemaCollections">
            <summary>
            The XML schema collections in the database. Note that XML schema collections were
            introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.PartitionSchemes">
            <summary>
            The partition schemes in the database. Note that partitions schemes were
            introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.PartitionFunctions">
            <summary>
            The partition functions in the database. Note that partition functions were
            introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ServiceBindings">
            <summary>
            The service bindings in the database. Note that service bindings were introduced
            in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Certificates">
            <summary>
            The certificates in the database. Note that certificates were introduced in SQL
            Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.SymmetricKeys">
            <summary>
            The symmetric keys in the database. Note that symmetric keys were introduced in
            SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.AsymmetricKeys">
            <summary>
            The asymmetric keys in the database. Note that asymmetric keys were introduced in
            SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Dependencies">
            <summary>The dependencies in the database.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ClrAssemblyDependencies">
            <summary>The dependencies of the CLR assemblies in the database.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.FullTextCatalogs">
            <summary>The full-text catalogs in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.FullTextStoplists">
            <summary>
            The full-text stoplists in the database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Status">
            <summary>Used to provide status events.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Cancel">
            <summary>
            Indicates whether the database registration has been canceled.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Database.ColumnStacker">
            <summary>
            This used to create the dependency stack with the parser.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.ColumnStacker.MatchedSqlColumn(System.String[],System.Int32)">
            <summary>
            Called when the parser matches a dependent column.
            </summary>
            <param name="objectName"></param>
            <param name="count"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Database.ObjectStacker">
            <summary>
            This used to create the dependency stack with the parser.
            It contains of string[4] with the object name as the first element!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.ObjectStacker.MatchedSqlObject(System.String[],System.Int32)">
            <summary>
            Called when the parser matches a dependent object.
            </summary>
            <param name="objectName"></param>
            <param name="count"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ObjectStacker.Stack">
            <summary>
            A stack with the object names that are identified as dependent objects.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DBPopulationOptions">
            <summary>Options used when populating databases.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.Populate(RedGate.SQLCompare.Engine.DBPopulationOptions)">
            <summary>
            This method populates the entire database based on the information in a live database.
            </summary>
            <param name="popOptions">Population Options</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateObjectOwners(RedGate.SQLCompare.Engine.DBPopulationOptions)">
            <summary>
            This method populates only the objectOwners.
            This is for the refactoring tool!
            </summary>
            <param name="popOptions">Population Options</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.LightWeightPopulate">
            <summary>
            This method populates part of the database based on the information in a live database.
            Mainly used for sql data compare. Note that dependencies are set, but their
            transitive closure is not calculated.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.GetString(System.String)">
            <summary>
            Internationalization support.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateCounterInformation(RedGate.SQLCompare.Engine.DBPopulationOptions)">
            <summary>
            Populates counter information for progress trancking :)
            Prerequisites: Version
            Modifies: 
            </summary>
            <param name="popOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateCaseInformation(RedGate.SQLCompare.Engine.DBPopulationOptions)">
            <summary>
            Populates the case sensitivity. It is primarily used in SQL Refactorer!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.RetrieveCaseInformation(System.Data.SqlClient.SqlConnection)">
            <summary>
            Retrieves case sensitivity infromation the case sensitivity. It is primarily used in SQL Refactorer!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateVersionInformation">
            <summary>
            Populates the version information. This is among the very first steps that need to be 
            performed, as the version information that it retrieves is used to determine 
            the scripts that are used subsequently. This method sets the m_MajorVersion and
            m_Database.Guid variables.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateFullTextCatalogs">
            <summary>
            Populates the full text catalogs.
            Prerequisites: Version information.
            Modifies: FullTextCatalogs
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateObjectNames">
            <summary>
            Populates local m_ObjectNames and m_ObjectIDs collections.
            Prerequisites: version information.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateAssemblies">
            <summary>
            Populates the assemblies.
            Prerequisite: Version
            Modifies: Assemblies
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateAssemblyDependencies">
            <summary>
            Populates the assembly dependencies.
            Prerequisite: Version, Assmeblies
            Modifies: Database assembly dependency collection
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulatePartitions">
            <summary>
            Populates Partition functions,
            
            Prerequisites: Version
            Modifies: PartitionFunctions, 
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateTables">
            <summary>
            Populates the tables in the database. It does not retrieve field information,
            just the name of the tables, and some of their properties.
            
            Prerequisites: The database must have the FullTextCatalogs and the PartitionsSchemes populated.
            Also, version information must be known!
            Modifies: Tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateObjectText(RedGate.SQLCompare.Engine.DBPopulationOptions,System.Boolean)">
            <summary>
            Populates Comments.
            Prerequsite: m_ObjectIds, m_ObjectNames, functions, XML Schema Collections!
            Modifies: Comments.
            </summary>
            <param name="popOptions"></param>
            <param name="isForDataCompare"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateDefaults">
            <summary>
            Populates defaults
            Prerequisites: version, 
            Modifies: Defaults
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateRules">
            <summary>
            Populates Rules
            Prerequisites: Version
            Modifies: Rules
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateUDTs">
            <summary>
            Populates user defined types
            Prerequisites: version, Assemblies, Defaults, Rules
            Modifies: UserDefinedTypes
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateTableUDTs">
            <summary>
            Populates user defined table types
            Prerequisites: version, Assemblies, Defaults, Rules, UserDefinedTypes
            Modifies: UserDefinedTypes
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateXmlSchemaCollections">
            <summary>
            Populates XML schemata
            Prerequisites: version
            Modifies: XMLSchemaData, XmlSchemaCollections
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateXmlSchemaCollectionDependencies">
            <summary>
            Populates XML schemata dependencies (e.g. for stored procedures)
            Prerequisites: version, xml schema collections,
            Modifies: XMLSchemaData, XmlSchemaCollections
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateFunctions">
            <summary>
            Populates functions
            Prerequisites: version, Assemblies, Users
            Modifies: Functions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateTableColumns">
            <summary>
            Populates columns for tables and functions!
            Prerequisites: Tables, Defaults, Rules, XMLCollections, Comments, object text!
            Modifies: DependencyStack
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateViews">
            <summary>
            Populates Views
            Prerequisites: version, 
            Modifies: Views
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateViewColumns(System.Boolean)">
            <summary>
            Populates view columns. This is a much simpler thing than for tables, since
            the view script is available, thus udts, ... are not looked up :)
            Prerequisites: Version, Views
            Modifies: Views
            
            At the moment this is used only in SQL Prompt
            </summary>
            <param name="includeAllDetails">Indicates whether all details should be included like datatypes, etc. This is used for prompt and datacompare</param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateStoredProcedures">
            <summary>
            Populates stored procedures
            Prerequisites: Assemblies, Users
            Modifies: StoredProcedures
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateIndexes">
            <summary>
            Populates index information.
            Prerequisites: Version, Tables, Views
            Modifies: Indexes
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateSqlServerPost2kStatistics">
            <summary>
            Populates statistics information.
            Prerequisites: Version, Tables, Views
            Modifies: Indexes
            Note that this used only for SqlServer2005/8 servers (includind 2k compatibility modes),
            for 2k servers this is populated with indexes.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateForeignKeys">
            <summary>
            Populates foreign keys
            Prerequisites: Version, Tables, 
            Modifies: ForeignKeys, Dependencies
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateConstraints">
            <summary>
            Populates Constraints
            Prerequisites: Tables
            Modifies: Constraints, DependencyStack, Tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateTriggers">
            <summary>
            Populates Triggers
            Prerequisites: Version, Tables, Views, Assemblies, Users
            Modifies: Triggers, Dependencies, Tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateDdlTriggers">
            <summary>
            Populates ddl triggers
            Prerequisites: Version, Assemblies, Users
            Modifies: DdlTriggers
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateUdtDependencies">
            <summary>
            Populates udt dependencies
            Prerequisites: Version, UserDefinedTypes, Tables, StoredProcedures, Functions
            Modifies: Tables, StoredProcedures, Functions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateUsers">
            <summary>
            Populates Users
            Prerequisites: Version
            Modifies: Users
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateRoles">
            <summary>
            Populates roles
            Prerequisites: Version, 
            Modifies: Roles
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateRoleMembership">
            <summary>
            Populates role membership
            Prerequisites: Roles, Users
            Modifies: Roles
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateExtendedProperties">
            <summary>
            Populates extended properties
            Prerequisites: UserDefinedTypes, Users, Tables, Views, Defaults, Rules, StoredProcedures, Functions, and most
            of the SqlServer2005 objects!!!
            Modifies: ExtendedProperties, Tables, Views, Defaults, Rules, StoredProcedures, Functions
            Note: This does not make sense on pre SS2K, for those we ignore this.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulatePermissions">
            <summary>
            Populates permissions
            Prerequisites: Tables, Views, Functions, StoredProcedures,
            Assemblies, Types, XMLSchemaCollections, MessageTypes, ServiceContracts, Services,
            RemoteServiceBindings, Routes, ...
            Modifies: Tables, Views, Functions, StoredProcedures, ...
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulatePermissionsPreSqlServer2005">
            <summary>
            Populates permissions
            Prerequisites: Tables, Views, Functions, StoredProcedures
            Modifies: Tables, Views, Functions, StoredProcedures
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulatePermissionsPostSqlServer2005">
            <summary>
            Populates permissions
            Prerequisites: Tables, Views, Functions, StoredProcedures
            Modifies: Tables, Views, Functions, StoredProcedures
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateSchemas">
            <summary>
            Populates schemas 
            Prerequisites: version
            Modifies: Schemas
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateAssemblyFiles">
            <summary>
            Populates assembly files
            Prerequisites: Assemblies
            Modifies: AssemblyData
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateSynonyms">
            <summary>
            Populates synonyms
            Prerequisites: Version, Users
            Modifies: Synonyms
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateMessageTypes">
            <summary>
            Populates message types
            Prerequisites: Version, XmlSchemaCollections
            Modifies: 
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateContracts">
            <summary>
            Populates contracts
            Prerequisites: Version
            Modifies: Contracts
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateContractMessages">
            <summary>
            Populates contract messages
            Prerequisites: Version, Contracts
            Modifies: Contracts
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateQueues">
            <summary>
            Populates queues
            Prerequisites: Version
            Modifies: 
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateCertificates">
            <summary>
            Populates Certificates
            Prerequisites: Version
            Modifies: Certificates
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateSymmetricKeys">
            <summary>
            Populates Symmetric Keys
            Prerequisites: Version
            Modifies: SymmetricKeys
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateAsymmetricKeys">
            <summary>
            Populates Asymmetric Keys
            Prerequisites: Version
            Modifies: AsymmetricKeys
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateServices">
            <summary>
            Populates services
            Prerequisites: Version, Queues
            Modifies: Services
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateServiceBindings">
            <summary>
            Populates remote service bindings
            Prerequisites: Version, Services
            Modifies: ServiceBindings
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateServiceContracts">
            <summary>
            Populates service contracts
            Prerequisites: Version, Services, Contracts
            Modifies: Contracts
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateRoutes">
            <summary>
            Populates reoutes
            Prerequisites: Version
            Modifies: Routes
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateParameters">
            <summary>
            Populates parameters
            Prerequisites: Version, StoredProcedures, Functions, XmlSchemaCollections
            Modifies: 
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateEventNotifications">
            <summary>
            Populates event notifications
            Prerequisites: Version, EventNotifications, Tables, Views, Functions, ...
            Modifies: 
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFactory.PopulateDatabaseSettings">
            <summary>
            Populates some database settings (now only checks if fulltext is enabled).
            Prerequisites: Version
            Modifies: The database's fullTextEnabled flag, database encryption.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactoryHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactoryHelper.GetSqlTableUdtScript(RedGate.Shared.SQL.Server.SQLVersion)">
            <summary>
            This retrieves the hidden table name for user defined table types.
            </summary>
            <param name="majorVersion"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactoryHelper.GetSqlParameterScript(RedGate.Shared.SQL.Server.SQLVersion,System.Boolean)">
            <summary>
            The system stuff is basically always included if executed on master!!
            </summary>
            <param name="majorVersion"></param>
            <param name="includeSystemObjects"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabaseHelper.GetEncryptedText(RedGate.SQLCompare.Engine.DatabaseHelperResultSet,System.Int32)">
            <summary>
            Get the decrypted text for an object. Do not call if you are not
            viewing decrypted objects as it has significant performance impacts. 
            (6-7 seconds on ICUST_1) 
            </summary>
            <param name="resultSet"></param>
            <param name="objectID"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction">
            <summary>The database-level permission.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.None">
            <summary>
            None, this is for internal use only.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Alter">
            <summary>
             Alter (AL ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyAsymmetricKey">
            <summary>
             Alter Any Asymmetric Key (ALAK) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyApplicationRole">
            <summary>
             Alter Any Application Role (ALAR) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyAssembly">
            <summary>
             Alter Any Assembly (ALAS) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyCertificate">
            <summary>
             Alter Any Certificate (ALCF) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyDataspace">
            <summary>Alter Any Data Space (ALDS)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyDatabaseEventNotification">
            <summary>
             Alter Any Database Event Notification (ALED) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyFulltextCatalog">
            <summary>Alter Any Full Text Catalog (ALFT)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyMessageType">
            <summary>
             Alter Any Message Type (ALMT) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyRole">
            <summary>
             Alter Any Role (ALRL) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyRoute">
            <summary>
             Alter Any Route (ALRT) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyRemoteServiceBinding">
            <summary>
             Alter Any Remote Service Binding (ALSB) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyContract">
            <summary>
             Alter Any Contract (ALSC) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnySymmetricKey">
            <summary>
             Alter Any Symmetric Key (ALSK) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnySchema">
            <summary>
             Alter Any Schema (ALSM) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyService">
            <summary>
             Alter Any Service (ALSV) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyDatabaseDdlTrigger">
            <summary>Alter Any Database DDL Trigger (ALTG)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyUser">
            <summary>
             Alter Any User (ALUS) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Authenticate">
            <summary>
             Authenticate (AUTH) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.BackupDatabase">
            <summary>Back Up Database (BADB)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.BackupLog">
            <summary>Back Up Log (BALO)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Control">
            <summary>
             Control (CL ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Connect">
            <summary>
             Connect (CO ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.ConnectReplication">
            <summary>
             Connect Replication (CORP) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Checkpoint">
            <summary>
             Checkpoint (CP ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateAggregate">
            <summary>
             Create Aggregate (CRAG) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateAsymmetricKey">
            <summary>
             Create Asymmetric Key (CRAK) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateAssembly">
            <summary>
             Create Assembly (CRAS) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateCertificate">
            <summary>
             Create Certificate (CRCF) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateDatabase">
            <summary>
             Create Database (CRDB) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateDefault">
            <summary>
             Create Default (CRDF) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateDatabaseDdlEventNotification">
            <summary>Create Database DDL Event Notification (CRED)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateFunction">
            <summary>
             Create Function (CRFN) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateFulltextCatalog">
            <summary>Create Full Text Catalog (CRFT)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateMessageType">
            <summary>
             Create Message Type (CRMT) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateProcedure">
            <summary>
             Create Procedure (CRPR) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateQueue">
            <summary>
             Create Queue (CRQU) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateRole">
            <summary>
             Create Role (CRRL) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateRoute">
            <summary>
             Create Route (CRRT) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateRule">
            <summary>
             Create Rule (CRRU) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateRemoteServiceBinding">
            <summary>
             Create Remote Service Binding (CRSB) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateContract">
            <summary>
             Create Contract (CRSC) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateSymmetricKey">
            <summary>
             Create Symmetric Key (CRSK) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateSchema">
            <summary>
             Create Schema (CRSM) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateSynonym">
            <summary>
             Create Synonym (CRSN) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateService">
            <summary>
             Create Service (CRSV) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateTable">
            <summary>
             Create Table (CRTB) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateType">
            <summary>
             Create Type (CRTY) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateView">
            <summary>
             Create View (CRVW) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateXmlSchemaCollection">
            <summary>Create XML Schema Collection (CRXS)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Delete">
            <summary>Delete (DL)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Execute">
            <summary>Execute (EX)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Impersonate">
            <summary>Impersonate (IM)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Insert">
            <summary>
             Insert (IN ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Receive">
            <summary>Receive (RC)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.References">
            <summary>References (RF)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Select">
            <summary>Select (SL)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Send">
            <summary>Send (SN)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Showplan">
            <summary>
             Showplan (SPLN) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.SubscribeQueryNotifications">
            <summary>
             Subscribe Query Notifications (SUQN) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.TakeOwnership">
            <summary>
             Take Ownership (TO ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Update">
            <summary>Update (UP)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.ViewDefinition">
            <summary>View Definition (VW)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.ViewDatabaseState">
            <summary>
             View Database State (VWDS) 
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseLevelPermission">
            <summary>A database-level permission.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseLevelPermission.GetPermissionActionName(RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction)">
            <summary>Returns the SQL text name for a database-level permission.</summary>
            <returns>The SQL text name for a database-level permission.</returns>
            <param name="pa">The permission action for which the SQL name is requested.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermission.UserName">
            <summary>The user or role to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermission.Action">
            <summary>The action to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermission.Type">
            <summary>The type of permission.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseLevelPermissions">
            <summary>A collection of database-level permissions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.Equals(RedGate.SQLCompare.Engine.DatabaseLevelPermissions,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the database-level permisssions are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>
            Compares the database-level permission with a specified database-level
            permission.
            </summary>
            <param name="targetPermissions">The database-level permissions to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.User">
            <summary>
            Sets the user of these permissions
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.Item(RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction)">
            <summary>
            The permission type for a specific permission action.
            </summary>
            <param name="permission">The permission type.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseObjectResolver">
            <summary>
            Resolver class for the AST parser.
            </summary>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.#ctor(RedGate.SQLCompare.Engine.Database)">
            <summary>
            
            </summary>
            <param name="database"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ColumnsInObject(RedGate.SQLCompare.ASTParser.Resolvers.ISqlObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ObjectForName(RedGate.SQLCompare.ASTParser.Syntax.Element,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="schema"></param>
            <param name="name"></param>
            <param name="server"></param>
            <param name="database"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ResolveSchemaScopedObjectFromCategory``1(RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.Engine.KeyedCollection{``0},System.String,System.String)">
            <summary>
            Tries to resolve a schema object based on its name and owner.
            If the owner is not specified, it first tries to look at
            the owner hint. If this is not successful, it checks dbo as owner. If this does 
            not help either, then we return null.
            </summary>
            <param name="category"></param>
            <param name="fullName"></param>
            <param name="sqlTypeHint"></param>
            <param name="name"></param>
            <param name="objectCollection"></param>
            <param name="ownerHint"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ResolveTrigger(System.String,System.String,System.String,System.String)">
            <summary>
            Tries to resolve a schema object based on its name and owner.
            If the owner is not specified, it first tries to look at
            the owner hint. If this is not successful, it checks dbo as owner. If this does 
            not help either, then we return null.
            </summary>
            <param name="fullName"></param>
            <param name="name"></param>
            <param name="ownerHint"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.FindTriggerInCollection(System.String,System.String,RedGate.SQLCompare.Engine.Triggers)">
            <summary>
            Finds a trigger in the Triggers collection.
            </summary>
            <param name="schema"></param>
            <param name="triggerName"></param>
            <param name="triggers"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ResolveDBScopedObjectFromCategory``1(RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.Engine.KeyedCollection{``0})">
            <summary>
            Tries to resolve a schema object based on its name and owner.
            If the owner is not specified, it first tries to look at
            the owner hint. If this is not successful, it checks dbo as owner. If this does 
            not help either, then we return null.
            </summary>
            <param name="category"></param>
            <param name="fullName"></param>
            <param name="sqlTypeHint"></param>
            <param name="name"></param>
            <param name="objectCollection"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseObjectResolver.Database">
            <summary>
            Access to the database object.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ResolveSystemObjects">
            <summary>
            If set to true then system objects are also resolved (note that for that the database
            must be populated with system objects).
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextStoplist">
            <summary>
            A full text stoplist.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStoplist.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares two database objects.</summary>
            <returns>
            	<em>True</em> if the database objects are identical; otherwise
            <em>false.</em>
            </returns>
            <param name="target">The object to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStoplist.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Options that may influence the scripting.</param>
            <returns>Regions that contain the script.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStoplist.FullyQualifiedName">
            <summary>The fully-qualified name of the stoplist.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStoplist.ObjectType">
            <summary>The type of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStoplist.Stopwords">
            <summary>
            Returns the words in this stoplist.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.GroupingStyle">
            <summary>
            An enumeration of the possible grouping styles supported by the main grid.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.GroupingStyle.Comparison">
            <summary>
            Indicates that the results should be grouped by the result of the comparison (this is the default style)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.GroupingStyle.ObjectType">
            <summary>
            Indicates that the results should be grouped by the type of object involved
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.GroupingStyle.Flat">
            <summary>
            Indicates that the results should not be grouped at all
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Index">
            <summary>
            An index.
            </summary>
            <remarks>
            This includes primary keys, unique constraints, xml and spatial indexes, and statistics.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Index.#ctor(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Semi shallow clone of the index. For deep clone it needs to have the following modified:
            PrimaryXMLIndex reference.
            </summary>
            <param name="index"></param>
            <param name="newParent"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Index.#ctor(RedGate.SQLCompare.Engine.NullableBinaryReader,System.Single)">
            <summary>
            Reads in the information for this index. Note that <paramref name="versionNumber"/>
            should be the same as that passed in from <see cref="M:RedGate.SQLCompare.Engine.Index.DeserializeIndex(RedGate.SQLCompare.Engine.NullableBinaryReader)"/>. Subclasses
            should use their own version numbers for their own information.
            </summary>
            <param name="reader"></param>
            <param name="versionNumber"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Index.Clone(RedGate.SQLCompare.Engine.Table)">
            <summary>
            Used by the refactorer.
            </summary>
            <param name="newParent"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Item(RedGate.SQLCompare.Engine.Index.IndexFlags)">
            <summary>
            Shortcut to get/set a specific index flag.
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.IsPartitioned">
            <summary>
            Indicates whether the index is built on a partition scheme. If it is, the name of
            the partition scheme is returned by the <see cref="P:RedGate.SQLCompare.Engine.Index.FileGroup"/> property.
            </summary>
            <remarks>
            This can be true for xml and spatial indexes, as they inherit their partitioning
            from the parent table if it isn't otherwise specified.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FileGroup">
            <summary>The filegroup or the partition scheme on which the index is defined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Fields">
            <summary>The fields in the index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.ScriptSource">
            <summary>
            The location of the creation script for this object if the database source is set to 
            scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Relational">
            <summary>True if this is a relational index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Statistics">
            <summary>True if the index is a statistic.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Spatial">
            <summary>True if the index is a spatial index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Xml">
            <summary>True if the index is an XML index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.NoRecompute">
            <summary>True if the index is defined with NORECOMPUTE.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Pad">
            <summary>The index padding.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.IgnoreDuplicateKeys">
            <summary>True if set to ignore duplicate keys.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FillFactor">
            <summary>The fill factor.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.AllowRowLocks">
            <summary>True if the index allows row locks.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.AllowPageLocks">
            <summary>True if the index allows page locks.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.IsDisabled">
            <summary>
            Indicates whether the index is disabled.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Name">
            <summary>The name of the index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Owner">
            <summary>
            The owner of the index. This is undefined.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FullyQualifiedName">
            <summary>The fully-qualified name of the index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Database">
            <summary>The database to which the index belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.ObjectType">
            <summary>Returns ObjectType.Index</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ITextObject">
            <summary>
            A database object that has its definition stored in the database as text.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ITextObject.Text">
            <summary>
            Returns the object text.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IEncryptedTextObject">
            <summary>
            A text object that can be encrypted and have other options applied to the textual definition.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IEncryptedTextObject.QuotedIdentifierOn">
            <summary>
            Returns a value indicating if quoted identifier is on in the object definition.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IEncryptedTextObject.AnsiNullsOn">
            <summary>
            Returns a value indicating if ANSI nulls are on in the object definition.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IEncryptedTextObject.Encrypted">
            <summary>
            Returns a value indicating if the object text was encrypted.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IEncryptedTextObject.TextID">
            <summary>
            Returns the ID of the syscomments entry of this object's text.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TesselationScheme">
            <summary>
            The tesselation scheme for the spatial index.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TesselationScheme.GeometryGrid">
            <summary>
            GEOMETRY_GRID
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TesselationScheme.GeographyGrid">
            <summary>
            GEOGRAPHY_GRID
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SpatialIndexType">
            <summary>
            The type of the spatial index. In SQL Server 2008 this can be either geometry or geography.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexType.Geometry">
            <summary>
            Geometry
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexType.Geography">
            <summary>
            Geography
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.GridDensity">
            <summary>
            The grid density for the levels of the spatial index.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.GridDensity.LOW">
            <summary>
            LOW (16)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.GridDensity.MEDIUM">
            <summary>
            MEDIUM (64)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.GridDensity.HIGH">
            <summary>
            HIGH (256)
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.BoundingBoxXMin">
            <summary>
            The x-coordinate of the lower-left corner of the bounding box.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.BoundingBoxXMax">
            <summary>
            The x-coordinate of the upper-right corner of the bounding box.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.BoundingBoxYMin">
            <summary>
            The y-coordinate of the lower-left corner of the bounding box.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.BoundingBoxYMax">
            <summary>
            The y-coordinate of the upper-right corner of the bounding box.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.Level1Grid">
            <summary>
            The first tesselation level's grid density.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.Level2Grid">
            <summary>
            The second tesselation level's grid density.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.Level3Grid">
            <summary>
            The third tesselation level's grid density.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.Level4Grid">
            <summary>
            The fourth tesselation level's grid density.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.CellsPerObject">
            <summary>
            The number of tesselation cells per objects.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.SpatialIndexType">
            <summary>
            The type of the spatial index. In SQL Server 2008 it can be either geometry or
            geography.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.TesselationScheme">
            <summary>
            The tesselation scheme of the spatial index.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Statistics.Filter">
            <summary>
            The filtering condition on the index. This property exists in SQL Server 2008 and later.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.XmlIndexType">
            <summary>The type of XML index.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.XmlIndexType.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.XmlIndexType.Value">
            <summary>Value.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.XmlIndexType.Path">
            <summary>Path.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.XmlIndexType.Property">
            <summary>Property.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlIndex.XmlIndexType">
            <summary>
            The type of the XML index. This type can be <em>Value</em>, <em>Path</em>,
            <em>Property</em>, or <em>None</em>.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlIndex.XmlPrimaryIndex">
            <summary>The primary XML index, if this index is a secondary XML index.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.LiveDatabaseSource">
            <summary>A standard SQL Server database.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.Deserialize(System.Int32,RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>Deserializes data.</summary>
            <param name="nVersionId">The serialization version.</param>
            <param name="obj">The ISerializeFormatter for deserialization.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.Serialize(RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>Serializes the specified object.</summary>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.IsDifferentSource(RedGate.Shared.SQL.IDataSource)">
            <summary>Compares the data source with a specified data source.</summary>
            <returns><em>true</em> if the data sources are different.</returns>
            <param name="comparisonDataSource">The data source to compare.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.Clone">
            <summary>Clones the data source.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.ToConnectionProperties">
            <summary>Returns the ConnectionProperties.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.IsWriteable">
            <summary>The data source can be written to.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.DatabaseName">
            <summary>Gets or sets the name of the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.IntegratedSecurity">
            <summary>
            Specifies whether Windows Integrated security or SQL authentication is
            used.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.Password">
            <summary>Gets or sets the password for the SQL user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.SavePassword">
            <summary>
            Specifies whether the password should be written to disk when serializing the
            project.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.ServerName">
            <summary>Gets or sets the name of the SQL Server.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.UserName">
            <summary>
            Gets or sets the SQL Server user name with which to connect to the SQL
            Server.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.Version">
            <summary>Gets the current serialized version number of LiveDatabaseSource.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SnapshotSource">
            <summary>A SQL Server database encapsulated within a snapshot.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.UpdateFromSnapshot">
            <summary>
            Refreshes the properties of this datasource from the 
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.#ctor">
            <summary>Constructs a snapshot.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.#ctor(System.String)">
            <summary>Constructs the snapshot file name.</summary>
            <param name="snapshotFileName">The file name of the snapshot.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.IsDifferentSource(RedGate.Shared.SQL.IDataSource)">
            <summary>Compares the data source with a specified data source.</summary>
            <returns><em>true</em> if the data sources are different.</returns>
            <param name="comparisonDataSource">The data source to compare.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.Clone">
            <summary>Clones the data source.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.Deserialize(System.Int32,RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>Deserializes data.</summary>
            <returns><em>true</em> if the data can be deserialized.</returns>
            <param name="versionId">The serialization version.</param>
            <param name="formatter">The ISerializeFormatter for deserialization.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.Serialize(RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>Serializes data.</summary>
            <param name="formatter">The ISerializeFormatter for serialization.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.IsWriteable">
            <summary>The data source <strong>cannot</strong> be written to.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.DatabaseName">
            <summary>Gets or sets the name of the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.ServerName">
            <summary>Gets or sets the name of the SQL Server.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.CreationTime">
            <summary>
            Gets the creation time of the snapshot file (the time at which the file was last
            written to).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.FileName">
            <summary>Gets or sets the snapshot file name.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.IsValid">
            <summary>
            True if this snapshot represents a valid data source that can be used in comparison. If false, then
            there is a problem with the snapshot file - for example, it could not be found or is in the wrong
            format.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.Version">
            <summary>Gets the current serialized version number of the snapshot.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.InvalidSnapshotType">
            <summary>
            An enumeration of the errors that can occur when reading a snapshot.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.InvalidSnapshotType.FileNotFound">
            <summary>
            The file is not found.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.InvalidSnapshotType.InvalidFile">
            <summary>
            Invalid file.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.InvalidSnapshotFileException">
            <summary>
            An exception thrown when a snapshot is invalid.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.InvalidSnapshotFileException.Type">
            <summary>
            Information about the snapshot if there was a failure.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlType">
            <summary>A SQL Server data type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Other">
            <summary>
            Unknown or UDT
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.ClrType">
            <summary>
            CLR type
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Table">
            <summary>
            Table type
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Empty">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Binary">
            <summary>
            binary
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Varbinary">
            <summary>
            varbinary
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Char">
            <summary>
            char
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Varchar">
            <summary>
            varchar
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.NChar">
            <summary>
            nchar
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.NVarchar">
            <summary>
            nvarchar
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.DateTime">
            <summary>
            datetime
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.SmallDatetime">
            <summary>
            smalldatetime
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Decimal">
            <summary>
            decimal
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Numeric">
            <summary>
            numeric
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Float">
            <summary>
            float
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Real">
            <summary>
            real
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Integer64">
            <summary>
            integer64
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Integer32">
            <summary>
            integer32
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Integer16">
            <summary>
            integer16
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Byte">
            <summary>
            byte
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Money">
            <summary>
            money
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.SmallMoney">
            <summary>
            smallmoney
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Boolean">
            <summary>
            boolean
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Timestamp">
            <summary>
            timestamp
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Guid">
            <summary>
            guid
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Image">
            <summary>
            image
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.NText">
            <summary>
            ntext
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Text">
            <summary>
            text
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Variant">
            <summary>
            variant
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Date">
            <summary>
            date
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Time">
            <summary>
            time
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.DateTimeOffset">
            <summary>
            datetimeoffset
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.DateTime2">
            <summary>
            datetime2
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Datatype.GetSqlType(System.String)">
            <summary>
            Helper method to get the enumeration for base sql type string.
            </summary>
            <param name="typeName">The name of the base SQL type </param>
            <returns>SqlType enumeration entry.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DdlTrigger">
            <summary>A DDL trigger.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDependsOnClrAssembly">
            <summary>
            This interface is used to mark database objects that can be directly dependent on
            a CLR assembly. For example a stored procedure may refer to an assembly.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDependsOnClrAssembly.Assembly">
            <summary>
            The CLR assembly for the implementing object, if this is a CLR object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDependsOnClrAssembly.CLRObject">
            <summary>
            True if the implementing object is a CLR object.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IExecuteAs">
            <summary>
            Used by database objects that can be executed as a specific user. This is used
            only for SQL Server 2005 and 2008.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IExecuteAs.ExecuteAsType">
            <summary>
            The EXECUTE AS clause used for the object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IExecuteAs.ExecuteAs">
            <summary>
            The user whose security context is to be used.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTrigger.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the DDL trigger with a specified DDL trigger.</summary>
            <returns><em>True</em> if the DDL triggers are identical; otherwise <em>false</em>.</returns>
            <param name="value">The DDL trigger to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTrigger.Equals(RedGate.SQLCompare.Engine.DdlTrigger,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the DDL trigger with the specified DDL trigger.</summary>
            <returns><em>True</em> if the DDL triggers are identical; otherwise <em>false</em>.</returns>
            <param name="target">The DDL trigger to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTrigger.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifiers on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ObjectType">
            <summary>Returns ObjectType.DdlTrigger</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.After">
            <summary>True if the trigger is an <em>after</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.InsteadOf">
            <summary>True if the trigger is an <em>instead of</em> trigger<em>.</em></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.IsDisabled">
            <summary>True if the trigger is <em>disabled</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.FullyQualifiedName">
            <summary>The fully-qualified name of the DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.CLRObject">
            <summary>True if the DDL trigger is a Common Language Runtime (CLR) DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.QuotedIdentifierOn">
            <summary>True if the trigger was created with <em>quoted identifiers on.</em></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.AnsiNullsOn">
            <summary>True if the trigger was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.Encrypted">
            <summary>True if the DDL trigger definition is <em>encrypted</em>.</summary>
            <remarks>The contents of the trigger cannot be decrypted.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.EventTypes">
            <summary>
            The event types for the DDL trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ExecuteAsType">
            <summary>
            The EXECUTE AS clause used for the object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the DDL
            trigger. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.Assembly">
            <summary>The CLR assembly for the DDL trigger, for a CLR DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.AssemblyClass">
            <summary>The CLR assembly class name for the DDL trigger, for a CLR DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.AssemblyMethod">
            <summary>The CLR assembly method name for the DDL trigger, for a CLR trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.Text">
            <summary>The text of the DDL trigger, if it is not a CLR DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ExtendedProperties">
            <summary>The extended properties defined for the DDL trigger.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DdlTriggers">
            <summary>A collection of DDL triggers.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTriggers.SerializeItem(RedGate.SQLCompare.Engine.DdlTrigger,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Internal.
            </summary>
            <param name="value"></param>
            <param name="writer"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTriggers.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Internal
            </summary>
            <param name="reader"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Default">
            <summary>A database default.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObject">
            <summary>A schema object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObject.ToString">
            <summary>
            Returns the fully-qualified name of the object prefixed with the object
            type.
            </summary>
            <returns>The fully-qualified name of the object prefixed with the object type.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.Name">
            <summary>The name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.Owner">
            <summary>The owner or schema of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.FullyQualifiedName">
            <summary>The fully-qualified name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.ID">
            <summary>
            The identifier of the object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.ExtendedProperties">
            <summary>
            The extended properties on the schema object.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Default.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the defaults are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the default with a specified default.</summary>
            <param name="target">The object to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Default.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.ObjectType">
            <summary>Returns ObjectType.Default</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.SysobjectID">
            <summary>The sysobject identifier for the default.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.Text">
            <summary>The text of the default.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Defaults">
            <summary>A collection of defaults.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Defaults.SerializeItem(RedGate.SQLCompare.Engine.Default,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Defaults.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Dependencies">
            <summary>
            The core object dependencies within a database.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.AddDependency(System.Int32,System.Int32,System.Boolean)">
            <summary>For internal use only.</summary>
            <param name="id"></param>
            <param name="dependencyID"></param>
            <param name="strong"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.IsDependent(System.Int32,System.Int32)">
            <summary>For internal use only.</summary>
            <param name="id"></param>
            <param name="dependencyID"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.OrderedList``1(System.Collections.Generic.IDictionary{System.Int32,``0})">
            <summary>For internal use only.</summary>
            <param name="workitems">Workitems are needed only for circle resolution with
            stored procs, etc. Null can be passed in in case of assemblies.</param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.OrderListPart1(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Iteration one, ignores directed circles.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.OrderListPart2WorkItem(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IDictionary{System.Int32,RedGate.SQLCompare.Engine.WorkItem})">
            <summary>
            Adds all the non-schemabound items to the start of the sync list.
            </summary>
            <param name="list"></param>
            <param name="items"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.OrderListPart2SchemaBinding(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IDictionary{System.Int32,RedGate.SQLCompare.Engine.SchemaBinding})">
            <summary>
            Adds all the non-schemabound items to the start of the sync list.
            </summary>
            <param name="list"></param>
            <param name="items"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetParents(System.Int32)">
            <summary>For internal use only.</summary>
            <param name="id"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetShallowParents(System.Int32)">
            <summary>For internal use only.</summary>
            <param name="id"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.ResetNodes">
            <summary>
            Sets <em>removed</em> to false for all the nodes, that is, for all the
            dependencies.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetUnresetChildren(System.Int32)">
            <summary>
            Enumerates all the child nodes that have not yet been marked as removed, and
            marks them as removed.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.Expand(RedGate.SQLCompare.Engine.Database)">
            <summary>
            
            </summary>
            <param name="database">Used to make this method cancelable. Can be null</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetEnumerator">
            <summary>
            Internal use.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetIds(System.UInt64,System.Int32@,System.Int32@)">
            <summary>For internal use only.</summary>
            <param name="key"></param>
            <param name="id"></param>
            <param name="depid"></param>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DifferenceType">
            <summary>The type of difference.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DifferenceType.OnlyIn1">
            <summary>The object exists only in the first database.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DifferenceType.OnlyIn2">
            <summary>The object exists only in the second database.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DifferenceType.Different">
            <summary>The object exists in both databases, but is different.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DifferenceType.Equal">
            <summary>The object exists in both databases and is identical.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Difference">
            <summary>A difference between two database objects.</summary>
            <remarks>
                See <see cref="M:RedGate.SQLCompare.Engine.Database.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options)"/> and <see cref="T:RedGate.SQLCompare.Engine.Work"/> for more
                information.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Difference.#ctor(RedGate.SQLCompare.Engine.Difference)">
            <summary>
            Shallow copy constructor
            </summary>
            <param name="toCopy"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Difference.GetHashCode">
            <summary>
            Hashcode for the difference.
            </summary>
            <returns>Hashcode for the difference.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Difference.Equals(System.Object)">
            <summary>
            Equality check.
            </summary>
            <param name="obj">Difference instance to compare against.</param>
            <returns>True if the two Difference instances are equal.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.SelectedAsDependency">
            <summary>
            For internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.SelectedImplicity">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            This is used for the UI only. It has no sideffects, thus it may be set if one wishes to.
            </remarks>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Selected">
            <summary>True if the difference is selected.</summary>
            <remarks>Set to <em>true</em> to include the difference in a migration script.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.DatabaseObjectType">
            <summary>The type of database object the difference represents.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.ObjectIn1">
            <summary>The object in the first database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Name">
            <summary>The name of the database object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.ObjectIn2">
            <summary>The object in the second database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Type">
            <summary>The type of difference.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.MustRebuildTo1">
            <summary>
            Indicates whether we must rebuild the object when migrating to database 1.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.MustRebuildTo2">
            <summary>
            Indicates whether we must rebuild the object when migrating to database 2.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Renamed">
            <summary>
            Indicates whether the object was renamed as part of a rename refactoring.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Difference.Flags.SelectedImplicitly">
            <summary>
            This field is for v5 UI to show what has been included implicitly. This is basically very similar
            to m_SelectedAsDependency, BUT it is NOT the same. Also, note that this is used before
            script generation in which m_SelectedAsDependency is used, thus it cannot be reset.
            Also, m_SelectedAsDependency is selecting more (for rebuilds), thus it cannot be used for the UI.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Differences">
            <summary>
            A collection of difference objects representing the differences between two
            databases.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Differences.m_ObjectToRename">
            <summary>
            For refactoring!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Differences.GetRenamedObject">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Differences.Add(RedGate.SQLCompare.Engine.Difference)">
            <summary>
            Adds an item to the <see cref="T:RedGate.SQLCompare.Engine.Differences"/> collection.
            </summary>
            <param name="value">The object to add.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.Database1">
            <summary>The first database to be compared.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.Database2">
            <summary>The second database to be compared.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.OwnerMappings">
            <summary>
            Access to the owner mappings.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.ObjectToRename">
            <summary>
            For refactoring!
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventNotification">
            <summary>An event notification.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotification.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the event notifications are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the event notification with a specified event notification.</summary>
            <param name="targetObject">The event notification to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotification.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.ServiceName">
            <summary>
            The name of the service.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.BrokerInstance">
            <summary>
            The broker instance.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.FanIn">
            <summary>True if the event notification has the <em>fan in</em> option enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.EventTypes">
            <summary>
            The event types.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.ExtendedProperties">
            <summary>The extended properties defined for the event notification.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventNotifications">
            <summary>A collection of event notifications.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.#ctor(System.Boolean)">
            <summary>
            This is used only for database level event notifications!! queue level ones should use the
            other constructors that set the parent!
            </summary>
            <param name="caseSensitive"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.SerializeItem(RedGate.SQLCompare.Engine.EventNotification,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.Equals(RedGate.SQLCompare.Engine.EventNotifications,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the event notification collections are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>
            Compares the event notification collection with a specified event notification
            collection.
            </summary>
            <param name="target">The object to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EngineLogger">
            <summary>
            Class to access engine logging facilities.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EngineLogger.CLRASM">
            <summary>
            Component logger for CLR-associated messages.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EngineLogger.Engine">
            <summary>
            Component logger for main engine messages.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EngineLogger.Parser">
            <summary>
            Component logger for parser messages.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventType">
            <summary>The type of event.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Insert">
            <summary>INSERT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Update">
            <summary>UPDATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Delete">
            <summary>DELETE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateTable">
            <summary>CREATE_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterTable">
            <summary>ALTER_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropTable">
            <summary>DROP_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateIndex">
            <summary>CREATE_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterIndex">
            <summary>ALTER_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropIndex">
            <summary>DROP_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateStatistics">
            <summary>CREATE_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.UpdateStatistics">
            <summary>UPDATE_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropStatistics">
            <summary>DROP_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSynonym">
            <summary>CREATE_SYNONYM</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSynonym">
            <summary>DROP_SYNONYM</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateView">
            <summary>CREATE_VIEW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterView">
            <summary>ALTER_VIEW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropView">
            <summary>DROP_VIEW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateProcedure">
            <summary>CREATE_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterProcedure">
            <summary>ALTER_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropProcedure">
            <summary>DROP_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateFunction">
            <summary>CREATE_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterFunction">
            <summary>ALTER_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropFunction">
            <summary>DROP_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateTrigger">
            <summary>CREATE_TRIGGER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterTrigger">
            <summary>ALTER_TRIGGER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropTrigger">
            <summary>DROP_TRIGGER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateEventNotification">
            <summary>CREATE_EVENT_NOTIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropEventNotification">
            <summary>DROP_EVENT_NOTIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateType">
            <summary>CREATE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropType">
            <summary>DROP_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateAssembly">
            <summary>CREATE_ASSEMBLY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAssembly">
            <summary>ALTER_ASSEMBLY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropAssembly">
            <summary>DROP_ASSEMBLY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateUser">
            <summary>CREATE_USER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterUser">
            <summary>ALTER_USER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropUser">
            <summary>DROP_USER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRole">
            <summary>CREATE_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRole">
            <summary>ALTER_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRole">
            <summary>DROP_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateApplicationRole">
            <summary>CREATE_APPLICATION_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterApplicationRole">
            <summary>ALTER_APPLICATION_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropApplicationRole">
            <summary>DROP_APPLICATION_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSchema">
            <summary>CREATE_SCHEMA</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterSchema">
            <summary>ALTER_SCHEMA</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSchema">
            <summary>DROP_SCHEMA</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateLogin">
            <summary>CREATE_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterLogin">
            <summary>ALTER_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropLogin">
            <summary>DROP_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateMessageType">
            <summary>CREATE_MESSAGE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterMessageType">
            <summary>ALTER_MESSAGE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropMessageType">
            <summary>DROP_MESSAGE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateContract">
            <summary>CREATE_CONTRACT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropContract">
            <summary>DROP_CONTRACT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateQueue">
            <summary>CREATE_QUEUE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterQueue">
            <summary>ALTER_QUEUE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropQueue">
            <summary>DROP_QUEUE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BrokerQueueDisabled">
            <summary>BROKER_QUEUE_DISABLED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateService">
            <summary>CREATE_SERVICE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterService">
            <summary>ALTER_SERVICE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropService">
            <summary>DROP_SERVICE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRoute">
            <summary>CREATE_ROUTE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRoute">
            <summary>ALTER_ROUTE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRoute">
            <summary>DROP_ROUTE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.GrantServer">
            <summary>GRANT_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DenyServer">
            <summary>DENY_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.RevokeServer">
            <summary>REVOKE_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.GrantDatabase">
            <summary>GRANT_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DenyDatabase">
            <summary>DENY_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.RevokeDatabase">
            <summary>REVOKE_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QueueActivation">
            <summary>QUEUE_ACTIVATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRemoteServiceBinding">
            <summary>CREATE_REMOTE_SERVICE_BINDING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRemoteServiceBinding">
            <summary>ALTER_REMOTE_SERVICE_BINDING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRemoteServiceBinding">
            <summary>DROP_REMOTE_SERVICE_BINDING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateXmlSchemaCollection">
            <summary>CREATE_XML_SCHEMA_COLLECTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterXmlSchemaCollection">
            <summary>ALTER_XML_SCHEMA_COLLECTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropXmlSchemaCollection">
            <summary>DROP_XML_SCHEMA_COLLECTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateEndpoint">
            <summary>CREATE_ENDPOINT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterEndpoint">
            <summary>ALTER_ENDPOINT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropEndpoint">
            <summary>DROP_ENDPOINT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreatePartitionFunction">
            <summary>CREATE_PARTITION_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterPartitionFunction">
            <summary>ALTER_PARTITION_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropPartitionFunction">
            <summary>DROP_PARTITION_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreatePartitionScheme">
            <summary>CREATE_PARTITION_SCHEME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterPartitionScheme">
            <summary>ALTER_PARTITION_SCHEME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropPartitionScheme">
            <summary>DROP_PARTITION_SCHEME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateCertificate">
            <summary>CREATE_CERTIFICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterCertificate">
            <summary>ALTER_CERTIFICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropCertificate">
            <summary>DROP_CERTIFICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateDatabase">
            <summary>CREATE_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterDatabase">
            <summary>ALTER_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropDatabase">
            <summary>DROP_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAuthorizationServer">
            <summary>ALTER_AUTHORIZATION_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAuthorizationDatabase">
            <summary>ALTER_AUTHORIZATION_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateXmlIndex">
            <summary>CREATE_XML_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AddRoleMember">
            <summary>ADD_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRoleMember">
            <summary>DROP_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AddServerRoleMember">
            <summary>ADD_SERVER_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropServerRoleMember">
            <summary>DROP_SERVER_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterExtendedProperty">
            <summary>ALTER_EXTENDED_PROPERTY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterFulltextCatalog">
            <summary>ALTER_FULLTEXT_CATALOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterFulltextIndex">
            <summary>ALTER_FULLTEXT_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterInstance">
            <summary>ALTER_INSTANCE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterMessage">
            <summary>ALTER_MESSAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterPlanGuide">
            <summary>ALTER_PLAN_GUIDE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRemoteServer">
            <summary>ALTER_REMOTE_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BindDefault">
            <summary>BIND_DEFAULT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BindRule">
            <summary>BIND_RULE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateDefault">
            <summary>CREATE_DEFAULT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateExtendedProcedure">
            <summary>CREATE_EXTENDED_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateExtendedProperty">
            <summary>CREATE_EXTENDED_PROPERTY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateFulltextCatalog">
            <summary>CREATE_FULLTEXT_CATALOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateFulltextIndex">
            <summary>CREATE_FULLTEXT_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateLinkedServer">
            <summary>CREATE_LINKED_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateLinkedServerLogin">
            <summary>CREATE_LINKED_SERVER_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateMessage">
            <summary>CREATE_MESSAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreatePlanGuide">
            <summary>CREATE_PLAN_GUIDE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRule">
            <summary>CREATE_RULE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRemoteServer">
            <summary>CREATE_REMOTE_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropDefault">
            <summary>DROP_DEFAULT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropExtendedProcedure">
            <summary>DROP_EXTENDED_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropExtendedProperty">
            <summary>DROP_EXTENDED_PROPERTY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropFulltextCatalog">
            <summary>DROP_FULLTEXT_CATALOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropFulltextIndex">
            <summary>DROP_FULLTEXT_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropLinkedServerLogin">
            <summary>DROP_LINKED_SERVER_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropMessage">
            <summary>DROP_MESSAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropPlanGuide">
            <summary>DROP_PLAN_GUIDE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRule">
            <summary>DROP_RULE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRemoteServer">
            <summary>DROP_REMOTE_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Rename">
            <summary>RENAME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.UnbindDefault">
            <summary>UNBIND_DEFAULT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.UnbindRule">
            <summary>UNBIND_RULE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSymmetricKey">
            <summary>CREATE_SYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterSymmetricKey">
            <summary>ALTER_SYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSymmetricKey">
            <summary>DROP_SYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateAsymmetricKey">
            <summary>CREATE_ASYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAsymmetricKey">
            <summary>ALTER_ASYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropAsymmetricKey">
            <summary>DROP_ASYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterServiceMasterKey">
            <summary>ALTER_SERVICE_MASTER_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateMasterKey">
            <summary>CREATE_MASTER_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterMasterKey">
            <summary>ALTER_MASTER_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropMasterKey">
            <summary>DROP_MASTER_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AddSignatureSchemaObject">
            <summary>ADD_SIGNATURE_SCHEMA_OBJECT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSignatureSchemaObject">
            <summary>DROP_SIGNATURE_SCHEMA_OBJECT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AddSignature">
            <summary>ADD_SIGNATURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSignature">
            <summary>DROP_SIGNATURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateCredential">
            <summary>CREATE_CREDENTIAL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterCredential">
            <summary>ALTER_CREDENTIAL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropCredential">
            <summary>DROP_CREDENTIAL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropLinkedServer">
            <summary>DROP_LINKED_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterLinkedServer">
            <summary>ALTER_LINKED_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateEventSession">
            <summary>CREATE_EVENT_SESSION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterEventSession">
            <summary>ALTER_EVENT_SESSION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropEventSession">
            <summary>DROP_EVENT_SESSION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateResourcePool">
            <summary>CREATE_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterResourcePool">
            <summary>ALTER_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropResourcePool">
            <summary>DROP_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateWorkloadGroup">
            <summary>CREATE_WORKLOAD_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterWorkloadGroup">
            <summary>ALTER_WORKLOAD_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropWorkloadGroup">
            <summary>DROP_WORKLOAD_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterResourceGovernorConfig">
            <summary>ALTER_RESOURCE_GOVERNOR_CONFIG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSpatialIndex">
            <summary>CREATE_SPATIAL_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateCryptographicProvider">
            <summary>CREATE_CRYPTOGRAPHIC_PROVIDER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterCryptographicProvider">
            <summary>ALTER_CRYPTOGRAPHIC_PROVIDER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropCryptographicProvider">
            <summary>DROP_CRYPTOGRAPHIC_PROVIDER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateDatabaseEncryptionKey">
            <summary>CREATE_DATABASE_ENCRYPTION_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterDatabaseEncryptionKey">
            <summary>ALTER_DATABASE_ENCRYPTION_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropDatabaseEncryptionKey">
            <summary>DROP_DATABASE_ENCRYPTION_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateBrokerPriority">
            <summary>CREATE_BROKER_PRIORITY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterBrokerPriority">
            <summary>ALTER_BROKER_PRIORITY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropBrokerPriority">
            <summary>DROP_BROKER_PRIORITY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateServerAudit">
            <summary>CREATE_SERVER_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterServerAudit">
            <summary>ALTER_SERVER_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropServerAudit">
            <summary>DROP_SERVER_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateServerAuditSpecification">
            <summary>CREATE_SERVER_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterServerAuditSpecification">
            <summary>ALTER_SERVER_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropServerAuditSpecification">
            <summary>DROP_SERVER_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateDatabaseAuditSpecification">
            <summary>CREATE_DATABASE_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterDatabaseAuditSpecification">
            <summary>ALTER_DATABASE_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropDatabaseAuditSpecification">
            <summary>DROP_DATABASE_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateFulltextStoplist">
            <summary>CREATE_FULLTEXT_STOPLIST</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterFulltextStoplist">
            <summary>ALTER_FULLTEXT_STOPLIST</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropFulltextStoplist">
            <summary>DROP_FULLTEXT_STOPLIST</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLogin">
            <summary>AUDIT_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLogout">
            <summary>AUDIT_LOGOUT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginFailed">
            <summary>AUDIT_LOGIN_FAILED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Eventlog">
            <summary>EVENTLOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Errorlog">
            <summary>ERRORLOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LockDeadlock">
            <summary>LOCK_DEADLOCK</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Exception">
            <summary>EXCEPTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpCachemiss">
            <summary>SP_CACHEMISS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpCacheinsert">
            <summary>SP_CACHEINSERT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpCacheremove">
            <summary>SP_CACHEREMOVE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpRecompile">
            <summary>SP_RECOMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ObjectCreated">
            <summary>OBJECT_CREATED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ObjectDeleted">
            <summary>OBJECT_DELETED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.HashWarning">
            <summary>HASH_WARNING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LockDeadlockChain">
            <summary>LOCK_DEADLOCK_CHAIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LockEscalation">
            <summary>LOCK_ESCALATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbErrors">
            <summary>OLEDB_ERRORS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ExecutionWarnings">
            <summary>EXECUTION_WARNINGS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SortWarnings">
            <summary>SORT_WARNINGS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.MissingColumnStatistics">
            <summary>MISSING_COLUMN_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.MissingJoinPredicate">
            <summary>MISSING_JOIN_PREDICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ServerMemoryChange">
            <summary>SERVER_MEMORY_CHANGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable0">
            <summary>USERCONFIGURABLE_0</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable1">
            <summary>USERCONFIGURABLE_1</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable2">
            <summary>USERCONFIGURABLE_2</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable3">
            <summary>USERCONFIGURABLE_3</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable4">
            <summary>USERCONFIGURABLE_4</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable5">
            <summary>USERCONFIGURABLE_5</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable6">
            <summary>USERCONFIGURABLE_6</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable7">
            <summary>USERCONFIGURABLE_7</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable8">
            <summary>USERCONFIGURABLE_8</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable9">
            <summary>USERCONFIGURABLE_9</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DataFileAutoGrow">
            <summary>DATA_FILE_AUTO_GROW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LogFileAutoGrow">
            <summary>LOG_FILE_AUTO_GROW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DataFileAutoShrink">
            <summary>DATA_FILE_AUTO_SHRINK</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LogFileAutoShrink">
            <summary>LOG_FILE_AUTO_SHRINK</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseScopeGdrEvent">
            <summary>AUDIT_DATABASE_SCOPE_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectGdrEvent">
            <summary>AUDIT_SCHEMA_OBJECT_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddloginEvent">
            <summary>AUDIT_ADDLOGIN_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginGdrEvent">
            <summary>AUDIT_LOGIN_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginChangePropertyEvent">
            <summary>AUDIT_LOGIN_CHANGE_PROPERTY_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginChangePasswordEvent">
            <summary>AUDIT_LOGIN_CHANGE_PASSWORD_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddLoginToServerRoleEvent">
            <summary>AUDIT_ADD_LOGIN_TO_SERVER_ROLE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddDbUserEvent">
            <summary>AUDIT_ADD_DB_USER_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddMemberToDbRoleEvent">
            <summary>AUDIT_ADD_MEMBER_TO_DB_ROLE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddRoleEvent">
            <summary>AUDIT_ADD_ROLE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAppRoleChangePasswordEvent">
            <summary>AUDIT_APP_ROLE_CHANGE_PASSWORD_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectAccessEvent">
            <summary>AUDIT_SCHEMA_OBJECT_ACCESS_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditBackupRestoreEvent">
            <summary>AUDIT_BACKUP_RESTORE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDbccEvent">
            <summary>AUDIT_DBCC_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditChangeAuditEvent">
            <summary>AUDIT_CHANGE_AUDIT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbCallEvent">
            <summary>OLEDB_CALL_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbQueryinterfaceEvent">
            <summary>OLEDB_QUERYINTERFACE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbDatareadEvent">
            <summary>OLEDB_DATAREAD_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanXml">
            <summary>SHOWPLAN_XML</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DeprecationAnnouncement">
            <summary>DEPRECATION_ANNOUNCEMENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DeprecationFinalSupport">
            <summary>DEPRECATION_FINAL_SUPPORT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ExchangeSpillEvent">
            <summary>EXCHANGE_SPILL_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseManagementEvent">
            <summary>AUDIT_DATABASE_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectManagementEvent">
            <summary>AUDIT_DATABASE_OBJECT_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabasePrincipalManagementEvent">
            <summary>AUDIT_DATABASE_PRINCIPAL_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectManagementEvent">
            <summary>AUDIT_SCHEMA_OBJECT_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerPrincipalImpersonationEvent">
            <summary>AUDIT_SERVER_PRINCIPAL_IMPERSONATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabasePrincipalImpersonationEvent">
            <summary>AUDIT_DATABASE_PRINCIPAL_IMPERSONATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerObjectTakeOwnershipEvent">
            <summary>AUDIT_SERVER_OBJECT_TAKE_OWNERSHIP_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectTakeOwnershipEvent">
            <summary>AUDIT_DATABASE_OBJECT_TAKE_OWNERSHIP_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BlockedProcessReport">
            <summary>BLOCKED_PROCESS_REPORT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanXmlStatisticsProfile">
            <summary>SHOWPLAN_XML_STATISTICS_PROFILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DeadlockGraph">
            <summary>DEADLOCK_GRAPH</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TraceFileClose">
            <summary>TRACE_FILE_CLOSE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditChangeDatabaseOwner">
            <summary>AUDIT_CHANGE_DATABASE_OWNER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectTakeOwnershipEvent">
            <summary>AUDIT_SCHEMA_OBJECT_TAKE_OWNERSHIP_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.FtCrawlStarted">
            <summary>FT_CRAWL_STARTED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.FtCrawlStopped">
            <summary>FT_CRAWL_STOPPED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.FtCrawlAborted">
            <summary>FT_CRAWL_ABORTED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.UserErrorMessage">
            <summary>USER_ERROR_MESSAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ObjectAltered">
            <summary>OBJECT_ALTERED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SqlStmtrecompile">
            <summary>SQL_STMTRECOMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DatabaseMirroringStateChange">
            <summary>DATABASE_MIRRORING_STATE_CHANGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanXmlForQueryCompile">
            <summary>SHOWPLAN_XML_FOR_QUERY_COMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanAllForQueryCompile">
            <summary>SHOWPLAN_ALL_FOR_QUERY_COMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerScopeGdrEvent">
            <summary>AUDIT_SERVER_SCOPE_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerObjectGdrEvent">
            <summary>AUDIT_SERVER_OBJECT_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectGdrEvent">
            <summary>AUDIT_DATABASE_OBJECT_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerOperationEvent">
            <summary>AUDIT_SERVER_OPERATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerAlterTraceEvent">
            <summary>AUDIT_SERVER_ALTER_TRACE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerObjectManagementEvent">
            <summary>AUDIT_SERVER_OBJECT_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerPrincipalManagementEvent">
            <summary>AUDIT_SERVER_PRINCIPAL_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseOperationEvent">
            <summary>AUDIT_DATABASE_OPERATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectAccessEvent">
            <summary>AUDIT_DATABASE_OBJECT_ACCESS_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbProviderInformation">
            <summary>OLEDB_PROVIDER_INFORMATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.MountTape">
            <summary>MOUNT_TAPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AssemblyLoad">
            <summary>ASSEMBLY_LOAD</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.XqueryStaticType">
            <summary>XQUERY_STATIC_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnSubscription">
            <summary>QN__SUBSCRIPTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnParameterTable">
            <summary>QN__PARAMETER_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnTemplate">
            <summary>QN__TEMPLATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnDynamics">
            <summary>QN__DYNAMICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BitmapWarning">
            <summary>BITMAP_WARNING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DatabaseSuspectDataPage">
            <summary>DATABASE_SUSPECT_DATA_PAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CpuThresholdExceeded">
            <summary>CPU_THRESHOLD_EXCEEDED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlEvents">
            <summary>DDL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServerLevelEvents">
            <summary>DDL_SERVER_LEVEL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlEndpointEvents">
            <summary>DDL_ENDPOINT_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseEvents">
            <summary>DDL_DATABASE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServerSecurityEvents">
            <summary>DDL_SERVER_SECURITY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlLoginEvents">
            <summary>DDL_LOGIN_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlGdrServerEvents">
            <summary>DDL_GDR_SERVER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlAuthorizationServerEvents">
            <summary>DDL_AUTHORIZATION_SERVER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlCredentialEvents">
            <summary>DDL_CREDENTIAL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServiceMasterKeyEvents">
            <summary>DDL_SERVICE_MASTER_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlExtendedProcedureEvents">
            <summary>DDL_EXTENDED_PROCEDURE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlLinkedServerEvents">
            <summary>DDL_LINKED_SERVER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlLinkedServerLoginEvents">
            <summary>DDL_LINKED_SERVER_LOGIN_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlMessageEvents">
            <summary>DDL_MESSAGE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlRemoteServerEvents">
            <summary>DDL_REMOTE_SERVER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseLevelEvents">
            <summary>DDL_DATABASE_LEVEL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlTableViewEvents">
            <summary>DDL_TABLE_VIEW_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlTableEvents">
            <summary>DDL_TABLE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlViewEvents">
            <summary>DDL_VIEW_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlIndexEvents">
            <summary>DDL_INDEX_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlStatisticsEvents">
            <summary>DDL_STATISTICS_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSynonymEvents">
            <summary>DDL_SYNONYM_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlFunctionEvents">
            <summary>DDL_FUNCTION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlProcedureEvents">
            <summary>DDL_PROCEDURE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlTriggerEvents">
            <summary>DDL_TRIGGER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlEventNotificationEvents">
            <summary>DDL_EVENT_NOTIFICATION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlAssemblyEvents">
            <summary>DDL_ASSEMBLY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlTypeEvents">
            <summary>DDL_TYPE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseSecurityEvents">
            <summary>DDL_DATABASE_SECURITY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlCertificateEvents">
            <summary>DDL_CERTIFICATE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlUserEvents">
            <summary>DDL_USER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlRoleEvents">
            <summary>DDL_ROLE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlApplicationRoleEvents">
            <summary>DDL_APPLICATION_ROLE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSchemaEvents">
            <summary>DDL_SCHEMA_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlGdrDatabaseEvents">
            <summary>DDL_GDR_DATABASE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlAuthorizationDatabaseEvents">
            <summary>DDL_AUTHORIZATION_DATABASE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSymmetricKeyEvents">
            <summary>DDL_SYMMETRIC_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlAsymmetricKeyEvents">
            <summary>DDL_ASYMMETRIC_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlCryptoSignatureEvents">
            <summary>DDL_CRYPTO_SIGNATURE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlMasterKeyEvents">
            <summary>DDL_MASTER_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSsbEvents">
            <summary>DDL_SSB_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlMessageTypeEvents">
            <summary>DDL_MESSAGE_TYPE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlContractEvents">
            <summary>DDL_CONTRACT_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlQueueEvents">
            <summary>DDL_QUEUE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServiceEvents">
            <summary>DDL_SERVICE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlRouteEvents">
            <summary>DDL_ROUTE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlRemoteServiceBindingEvents">
            <summary>DDL_REMOTE_SERVICE_BINDING_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlXmlSchemaCollectionEvents">
            <summary>DDL_XML_SCHEMA_COLLECTION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlPartitionEvents">
            <summary>DDL_PARTITION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlPartitionFunctionEvents">
            <summary>DDL_PARTITION_FUNCTION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlPartitionSchemeEvents">
            <summary>DDL_PARTITION_SCHEME_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDefaultEvents">
            <summary>DDL_DEFAULT_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlExtendedPropertyEvents">
            <summary>DDL_EXTENDED_PROPERTY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlFulltextCatalogEvents">
            <summary>DDL_FULLTEXT_CATALOG_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlPlanGuideEvents">
            <summary>DDL_PLAN_GUIDE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlRuleEvents">
            <summary>DDL_RULE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlEventSessionEvents">
            <summary>DDL_EVENT_SESSION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlResourceGovernorEvents">
            <summary>DDL_RESOURCE_GOVERNOR_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlResourcePool">
            <summary>DDL_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlWorkloadGroup">
            <summary>DDL_WORKLOAD_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlCryptographicProviderEvents">
            <summary>DDL_CRYPTOGRAPHIC_PROVIDER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseEncryptionKeyEvents">
            <summary>DDL_DATABASE_ENCRYPTION_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlBrokerPriorityEvents">
            <summary>DDL_BROKER_PRIORITY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServerAuditEvents">
            <summary>DDL_SERVER_AUDIT_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServerAuditSpecificationEvents">
            <summary>DDL_SERVER_AUDIT_SPECIFICATION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseAuditSpecificationEvents">
            <summary>DDL_DATABASE_AUDIT_SPECIFICATION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlFulltextStoplistEvents">
            <summary>DDL_FULLTEXT_STOPLIST_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcAllEvents">
            <summary>TRC_ALL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcDatabase">
            <summary>TRC_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcErrorsAndWarnings">
            <summary>TRC_ERRORS_AND_WARNINGS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcLocks">
            <summary>TRC_LOCKS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcObjects">
            <summary>TRC_OBJECTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcPerformance">
            <summary>TRC_PERFORMANCE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcSecurityAudit">
            <summary>TRC_SECURITY_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcServer">
            <summary>TRC_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcStoredProcedures">
            <summary>TRC_STORED_PROCEDURES</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcTsql">
            <summary>TRC_TSQL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcUserConfigurable">
            <summary>TRC_USER_CONFIGURABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcOledb">
            <summary>TRC_OLEDB</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcFullText">
            <summary>TRC_FULL_TEXT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcDeprecation">
            <summary>TRC_DEPRECATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcClr">
            <summary>TRC_CLR</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcQueryNotifications">
            <summary>TRC_QUERY_NOTIFICATIONS</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventTypes">
            <summary>A collection of EventTypes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventTypes.GetKey(RedGate.SQLCompare.Engine.EventType)">
            <summary>
            Generates a key for an event type.
            </summary>
            <param name="value">The event type for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventTypes.SerializeItem(RedGate.SQLCompare.Engine.EventType,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Internal
            </summary>
            <param name="value"></param>
            <param name="writer"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventTypes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Internal
            </summary>
            <param name="reader"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExtendedProperties">
            <summary>The extended properties associated with a database object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.SerializeItem(RedGate.SQLCompare.Engine.ExtendedProperty,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.GetKey(RedGate.SQLCompare.Engine.ExtendedProperty)">
            <summary>
            Generates a key for an extended property.
            </summary>
            <param name="value">The extended property for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.ResetInternalKeysAfterParentRename">
            <summary>
            ExtendedProperties are stored in the base class hashtable based on a key that contains the 
            parent object (table, column!) name. However, if the parent object is to be renamed (see refactoring), then
            the hashtable needs to be repopulated. This method removes all entries from the
            hastable, and repopulates it with consideration to the new parent name.
            Note, that when this is executed, the parent name must already be set to its
            new value.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.Equals(RedGate.SQLCompare.Engine.ExtendedProperties,RedGate.SQLCompare.Engine.ExtendedProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Returns true if two extended properties are identical
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.Sort">
            <summary>
            Sorts triggers based on their names (this is generally used for collections of tables, so the table name
            does not need to be considered.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperties.Item(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns an extended property given information about its types and names.
            </summary>
            <param name="level0Type">The type of the level0 object for which the extended property is specified.</param>
            <param name="level0Name">The name of the level0 object for which the extended property is specified.</param>
            <param name="level1Type">The type of the level1 object for which the extended property is specified.</param>
            <param name="level1Name">The name of the level1 object for which the extended property is specified.</param>
            <param name="level2Type">The type of the level2 object for which the extended property is specified.</param>
            <param name="level2Name">The name of the level2 object for which the extended property is specified.</param>
            <param name="name">The name of the extended property.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperties.Item(RedGate.SQLCompare.Engine.ExtendedProperty)">
            <summary>
            Returns an extended property.
            </summary>
            <param name="value">The value of the extended property to get.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.ExtendedPropertyByNameComparer.Compare(RedGate.SQLCompare.Engine.ExtendedProperty,RedGate.SQLCompare.Engine.ExtendedProperty)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExtendedProperty">
            <summary>An extended property.</summary>
            <remarks>
            See sp_addextendedproperty in <em>SQL Server Books Online</em> for more
            information.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperty.PropertyOn">
            <summary>
            The name of the object on which the extended property is defined on.
            </summary>
            <returns>The name of the object on which the extended property is defined on.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperty.PropertyDescription(RedGate.SQLCompare.Engine.Options)">
            <summary>
            Constructs the last part of the parameter list for both the create and 
            alter calls for the extended property. This does NOT include the value and name pair, so
            it says something only about the parent object!
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperty.GetObjectFromTypeAndName">
            <summary>
            This tries to identify the parent object for the extended property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperty.ToString">
            <summary>A string representation of the extended property.</summary>
            <returns>A string.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level">
            <summary>
            Retruns the level of the property.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Name">
            <summary>The name of the extended property.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Value">
            <summary>The value of the extended property.</summary>
            <remarks>This can be any data type.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level0Type">
            <summary>The Level0 type of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level0Name">
            <summary>The Level0 name of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level1Type">
            <summary>The Level1 type of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level1Name">
            <summary>The Level1 name of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level2Type">
            <summary>The Level2 type of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level2Name">
            <summary>The Level2 name of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExtendedProperty.DateTimeTypeInfo">
            <summary>
            Separate class to deal with the new 2008 datatypes. Very rare,
            so we don't want to use memory unnecessarily
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Field">
            <summary>A SQL Server field.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Field.ProcessColumnDependencies">
            <summary>
            Sets up the column level dependencies for the field.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Field.CanMigrateTo(RedGate.SQLCompare.Engine.Field)">
            <summary>
            return true if we can use a simple ALTER TABLE statement to modify the column
            to be safe, check the current and the destination column
            </summary>
            <param name="targetField"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Field.Equals(RedGate.SQLCompare.Engine.Field,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the fields are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the field with a specified field.</summary>
            <param name="targetField">The field to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ScriptSourceForFullTextColumn">
            <summary>
            The location of the creation script for the fulltext column information for this field if
            the database source is set to 
            scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IsFullTextFromInlineCreate">
            <summary>
            True if this fulltext field was set from an inline CREATE FULLTEXT INDEX statement
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ScriptSourceForDefault">
            <summary>
            The location of the creation script for the default binding of this field if the 
            database source is set to 
            scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ScriptSourceForRule">
            <summary>
            The location of the creation script for the rule binding of this field if the database 
            source is set to 
            scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ColumnID">
            <summary>For internal use only.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Owner">
            <summary>The owner of the field. This is undefined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullTextIndexed">
            <summary>True if the field is contained in a full-text index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullTextTypeColumn">
            <summary>
            The column that holds document type information. This is a SQL Server 2005
            feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullTextLanguage">
            <summary>The language of any full-text index to which the field belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Scale">
            <summary>The scale of the field.</summary>
            <remarks>Valid for numeric and decimal data types.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DefaultText">
            <summary>The text of the field's default value.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Precision">
            <summary>The precision of a decimal or numeric data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.AllowNulls">
            <summary>True if the field can contain NULL values.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IdentitySeed">
            <summary>The identity seed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IdentityCurrent">
            <summary>The current identity value.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IdentityIncrement">
            <summary>The identity increment.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Default">
            <summary>The default that is bound to the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DRIDefault">
            <summary>The Declarative Referential Integrity (DRI) default.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FilestreamUniqueIndex">
            <summary>
            The unique constraint to make it a value index for filestream columns
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Sparse">
            <summary>
            Whether this column is a sparse column
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ComputedText">
            <summary>The computed text of the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.RowGUIDCol">
            <summary>True if the field is a ROWGUIDCOL.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Collation">
            <summary>The collation order of character fields.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Rule">
            <summary>The rule bound to the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Filestream">
            <summary>
            Specifies if this is a filestream column.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.SqlType">
            <summary>The field type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Identity">
            <summary>True if the field is an identity field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Computed">
            <summary>True if the field is computed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DependentFields">
            <summary>
            Dependent fields for computed columns.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.NotForReplication">
            <summary>True if the field is marked as <em>not for replication</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Descending">
            <summary>True if the field is part of a descending index.</summary>
            <remarks>Valid only if the field belongs to an Index.Fields collection.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DefinedSize">
            <summary>The length of the field.</summary>
            <remarks>Valid only for character and binary data.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Included">
            <summary>The column is in an index, and it is included.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Persisted">
            <summary>The column is in a calculated column that is persisted.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Name">
            <summary>The name of the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.TypeSchemaName">
            <summary>The name of the schema for the field's data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.TypeName">
            <summary>The name of the field type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullyQualifiedTypeName">
            <summary>
            The name of the fully-qualified field type. For SQL Server 2005, this property
            contains the schema name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.XmlDocument">
            <summary>The referenced XML document.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ColumnSet">
            <summary>
            True if this field is a column set.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.XmlSchemaCollection">
            <summary>The referenced XML schema collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullyQualifiedName">
            <summary>The fully-qualified name of the field.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Database">
            <summary>The database to which the field belongs.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ObjectType">
            <summary>Returns ObjectType.Field</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Field.RareFieldItems">
            <summary>
            Certain field properties are rather rare. For such, it is worht to encapsulate them
            into a wrapper class, and use memory only when needed.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FieldBinding">
            <summary>
            Summary description for Binding.
            </summary>
            
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FieldBindings">
            <summary>
            Summary description for FieldBindings.
            </summary>
            
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FieldBindings.GetKey(RedGate.SQLCompare.Engine.FieldBinding)">
            <summary>
            Generates a key for a field binding.
            </summary>
            <param name="value">The field binding for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Fields">
            <summary>A collection of fields.</summary>
            <remarks>
            A table contains a collection of fields. An index also contains a collection of
            fields.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.#ctor(System.Boolean)">
            <summary>
            Constructs a field collection.
            </summary>
            <param name="caseSensitive">Indicates whether the field names are case sensitive.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.#ctor(System.Boolean,System.Int32)">
            <summary>
            Constructs a field collection.
            </summary>
            <param name="caseSensitive">Indicates whether the field names are case sensitive.</param>
            <param name="count">The initial capacity of the collection</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.#ctor(RedGate.SQLCompare.Engine.Fields)">
            <summary>
            Constructs a field collection. (shallow clone!)
            </summary>
            <param name="fields">Fields to clone</param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.SerializeItem(RedGate.SQLCompare.Engine.Field,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.GetKey(RedGate.SQLCompare.Engine.Field)">
            <summary>
            Generates a key for a field.
            </summary>
            <param name="value">The field for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.AddWithoutOrdinal(RedGate.SQLCompare.Engine.Field)">
            <summary>
            Adds a field without considering the ordinal increments!
            For refactoring only!
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FileGroup">
            <summary>A filegroup.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FileGroup.Equals(System.Object)">
            <returns><em>True</em> if the filegroups are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the filegroup with a specified filegroup.</summary>
            <param name="obj">The filegroup to compare.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FileGroup.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FileGroup.Name">
            <summary>
            The name of the filegroup.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FileGroups">
            <summary>A collection of filegroups.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter" -->
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.CanBeFiltered(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>
            True if the specified object type can be filtered.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter"/> class to exclude all objects and
            using case-insensitive matching.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor(RedGate.SQLCompare.Engine.Filter.DifferenceFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter"/> class to use the same filter
            expression as the <paramref name="toCopy"/> filter.
            </summary>
            <param name="toCopy">The filter to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor(RedGate.SQLCompare.Engine.Filter.DifferenceFilter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter"/> class to use the same filter
            expression as the <paramref name="toCopy"/> filter and the specified case-sensitivity.
            </summary>
            <param name="toCopy"></param>
            <param name="caseSensitive"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter"/> class using case-insensitive matching.
            </summary>
            <param name="includeAllObjects">If true, all objects are included. If false, all objects are filtered out.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter"/> class.
            </summary>
            <param name="caseSensitive">True if matching should be done case-sensitively.</param>
            <param name="includeAllObjects">If true, all objects are included. If false, all objects are filtered out.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor(System.Boolean,System.Collections.Generic.Dictionary{RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilter})">
            <summary>
            Constructs a new filter to use the specified filter conditions dictionary.
            </summary>
            <param name="caseSensitive"></param>
            <param name="filter"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.GetFilterStatus(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>
            Returns a value indicating the current filter status of the specified object type.
            </summary>
            <param name="type"></param>
            <returns>
            An instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilterStatus"/> enum indicating the current filter status.
            </returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="type"/> is not a valid type for filtering,
            or <paramref name="type"/> is <see cref="F:RedGate.SQLCompare.Engine.ObjectType.None"/>.
            </exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.GetFilter(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>
            Gets the filter for the specified object type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.SetObjectTypeExclude(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>
            Sets the specified object type to be unconditionally excluded.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.SetObjectTypeInclude(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>
            Sets the specified object type to be unconditionally included.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.SetObjectTypeFilter(RedGate.SQLCompare.Engine.ObjectType,System.Boolean,System.String)">
            <summary>
            Sets the specified object type to be filtered.
            </summary>
            <param name="type">The object type.</param>
            <param name="include">True if this is an inclusion filter, false if it is an exclusion filter.</param>
            <param name="filterExpression">The filter expression.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.SetObjectTypeFilter(RedGate.SQLCompare.Engine.ObjectType,System.Boolean,RedGate.SQLCompare.Engine.Filter.IFilterCondition{RedGate.SQLCompare.Engine.Difference})">
            <summary>
            Sets the specified object type to be filtered.
            </summary>
            <param name="type">The object type.</param>
            <param name="include">True if this is an inclusion filter, false if it is an exclusion filter.</param>
            <param name="filterCondition">The filter condition.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.FilterDifferences(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Difference})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the differences that
            match the filter expression.
            </summary>
            <param name="differences"></param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the differences remaining after filtering.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.DifferenceIncluded(RedGate.SQLCompare.Engine.Difference)">
            <summary>
            Returns true if the specified difference is included by the filter expression.
            </summary>
            <param name="d"></param>
            <returns>True if the difference is included, false if it is excluded.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ConstructFilterCondition(System.Boolean,antlr.collections.AST)">
            <summary>
            Constructs an IFilterCondition from the specified binary AST (without type conditions).
            </summary>
            <param name="caseSensitive"></param>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypes">
            <summary>
            A collection of the object types that can be filtered.
            </summary>
        </member>
        <member name="E:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.FilterChanged">
            <summary>
            Event that occurs when a difference filter is changed.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilter">
            <summary>
            A filter for a single object type. Can be set as include or exclude.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilter.Include">
            <summary>
            True if <see cref="P:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilter.Filter"/> specifies inclusion, false if it specifies exclusion.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilter.Filter">
            <summary>
            The filter condition.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilterStatus">
            <summary>
            The filtering status for a specific object type (see <see cref="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.GetFilterStatus(RedGate.SQLCompare.Engine.ObjectType)"/>).
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.IFilterCondition`1">
            <summary>
            A filter condition with value equality.
            </summary>
            <typeparam name="T">The type of object being filtered.</typeparam>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.IFilterCondition`1.ObjectIncluded(`0)">
            <summary>
            Returns true if the difference is included, false if it is filtered out,
            and null if this filter condition does not apply to this object.
            </summary>
            <param name="obj">The object to filter on.</param>
            <returns>
            True if this object is included, false if it is filtered out,
            and null if this condition does not apply to this object.
            </returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.True`1">
            <summary>
            A condition that always evaluates to true.
            </summary>
            <remarks>
            This is used internally when parsing a filter expression,
            and as a placeholder for unconditional type conditions.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.FilterOn">
            <summary>
            The difference property being filtered on.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterOn.Name">
            <summary>
            The difference's name is being filtered.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterOn.Schema">
            <summary>
            The difference's schema is being filtered, if it has one.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.FilterType">
            <summary>
            The filter condition to apply to filter objects.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterType.EQ">
            <summary>
            The object property should be equal to the condition value.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterType.NEQ">
            <summary>
            The object property should be not equals to the condition value.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterType.LIKE">
            <summary>
            The object property should match the LIKE regex specified in the condition value.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterType.NLIKE">
            <summary>
            The object property should not match the LIKE regex specified in the condition value.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.Condition">
            <summary>
            A filter condition on a difference's name or schema.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.Condition.#ctor(System.Boolean,antlr.collections.AST)">
            <summary>
            Initializes a new Condition from the specified AST node.
            </summary>
            <param name="caseSensitive"></param>
            <param name="element"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.Condition.Equals(RedGate.SQLCompare.Engine.Filter.Condition)">
            <summary>
            Indicates if the two conditions are equal.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.Condition.FilterOn">
            <summary>
            The difference property being filtered on.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.Condition.FilterType">
            <summary>
            The filter type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.Condition.FilterExpression">
            <summary>
            The filter expression.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.NOT`1">
            <summary>
            A NOT filter condition.
            </summary>
            <typeparam name="T">The type of object being filtered.</typeparam>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.FilterConditionCollection`1">
            <summary>
            A set of filter conditions.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.FilterConditionCollection`1.#ctor">
            <summary>
            Initializes a new FilterConditionCollection.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.FilterConditionCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new FilterConditionCollection with the specified capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.FilterConditionCollection`1.#ctor(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Filter.IFilterCondition{`0}})">
            <summary>
            Initializes a new FilterConditionCollection with the contents of the specified IEnumerable.
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.FilterConditionCollection`1.Operator">
            <summary>
            The operator to join filter conditions in the string representation of the collection (eg 'AND' or 'OR')
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.AND`1">
            <summary>
            A set of filter conditions ANDed together.
            </summary>
            <typeparam name="T">The type of object being filtered.</typeparam>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.AND`1.#ctor">
            <summary>
            Initializes a new AND.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.AND`1.#ctor(System.Int32)">
            <summary>
            Initializes a new AND with the specified capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.AND`1.#ctor(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Filter.IFilterCondition{`0}})">
            <summary>
            Initializes a new AND with the contents of the specified IEnumerable.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.OR`1">
            <summary>
            A set of filter conditions ORed together.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.OR`1.#ctor">
            <summary>
            Initializes a new OR.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.OR`1.#ctor(System.Int32)">
            <summary>
            Initializes a new OR with the specified capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.OR`1.#ctor(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Filter.IFilterCondition{`0}})">
            <summary>
            Initializes a new OR with the contents of the specified IEnumerable.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.TypeCondition">
            <summary>
            A condition on an object's type. This does not implement IFilterCondition to ensure
            it is kept separate from the others.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.ANDWithTypeConditions">
            <summary>
            An AND clause that also has type conditions applied to it.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilterFactory">
            <summary>
            Class for creating a <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter"/> from a global filter expression.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilterFactory.CreateFilter(System.Boolean,System.String)">
            <summary>
            Creates a filter from the specified filter expression.
            </summary>
            <param name="caseSensitive"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilterFactory.DNFASTReducer">
            <summary>
            Performs a DNF reduction on the specified AST.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.IFilterValidator">
            <summary>
            Determines if a difference filter is valid for some particular use.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.IFilterValidator.IsValid(RedGate.SQLCompare.Engine.Filter.DifferenceFilter)">
            <summary>
            Returns true if the specified filter is valid.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.UIFilterFormatValidator">
            <summary>
            <see cref="T:RedGate.SQLCompare.Engine.Filter.IFilterValidator"/> for the UI filter format.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FlatFieldList">
            <summary>
            Summary description for FlatFieldList.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReferentialAction">
            <summary>Referential actions for foreign keys.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.NoAction">
            <summary>No action.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.Cascade">
            <summary>No action.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.SetNull">
            <summary>No action.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.SetDefault">
            <summary>No action.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ForeignKey">
            <summary>A foreign key.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKey.Equals(RedGate.SQLCompare.Engine.ForeignKey,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the foreign keys are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the foreign key with a specified foreign key.</summary>
            <param name="value">The foreign key to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ScriptSource">
            <summary>
            The location of the creation script for object if the database source is set to 
            scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ScriptSourceNocheck">
            <summary>
            The location of any ALTER TABLE ... NOCHECK CONSTRAINT commands on the foreign key.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.Name">
            <summary>The name of the foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedTable">
            <summary>The table referenced by the foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.Fields">
            <summary>The fields in the foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedFields">
            <summary>The fields referenced by the foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.NotForReplication">
            <summary>True if the foreign key is marked as <em>not for replication</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.UpdateCascade">
            <summary>True if the foreign key is marked as <em>on update cascade</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.DeleteCascade">
            <summary>True if the foreign key is marked as <em>on delete cascade</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.UpdateReferentialAction">
            <summary>
            The referential action in case of an update.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.DeleteReferentialAction">
            <summary>
            The referential action in case of a delete.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.NoCheck">
            <summary>
            True if the foreign key is <em>not trusted</em> (it was created using WITH
            NOCHECK).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.Disabled">
            <summary>True if the foreign key is <em>disabled</em> (it is set to NOCHECK).</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ForeignKeys">
            <summary>A collection of foreign keys.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.SerializeItem(RedGate.SQLCompare.Engine.ForeignKey,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.GetKey(RedGate.SQLCompare.Engine.ForeignKey)">
            <summary>
            Generates a key for a foreign key.
            </summary>
            <param name="value">The foreign key for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.Sort">
            <summary>
            Sorts triggers based on their names (this is generally used for collections of tables, so the table name
            does not need to be considered.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKeys.Item(System.String)">
            <summary>
            Returns a foreign key given its name
            </summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.ForeignKeyComparer.Compare(RedGate.SQLCompare.Engine.ForeignKey,RedGate.SQLCompare.Engine.ForeignKey)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="T:RedGate.SQLToolkit.Engine.Licensing.frmRegistration">
            <summary>
            Summary description for frmRegistration.
            </summary>
        </member>
        <member name="F:RedGate.SQLToolkit.Engine.Licensing.frmRegistration.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.SQLToolkit.Engine.Licensing.frmRegistration.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.SQLToolkit.Engine.Licensing.frmRegistration.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextCatalog">
            <summary>A full text catalog.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the full text catalogs are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the full text catalog with a specified full text catalog.</summary>
            <param name="target">The catalog to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,System.Boolean,System.Boolean)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="includeTables">If true, it includes the fulltext table statements.</param>
            <param name="includePath">If set to true the IN PATH will not be commented out. This is used for products 
            other than SQL Compare 6.</param>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.ObjectType">
            <summary>Returns ObjectType.FullTextCatalog</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.FullyQualifiedName">
            <summary>The fully-qualified name of the catalog.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.Permissions">
            <summary>
            The permissions on this catalog.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.ViewsAndTables">
            <summary>The views and tables that belong to the catalog.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.FileGroup">
            <summary>
            The filegroup of the catalog. This is set only for SQL Server 2005
            databases.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.Path">
            <summary>The path of the catalog. This is used only for SQL Server 2005 databases.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.IsDefault">
            <summary>
            Indicates whether the catalog is the default full text catalog. This is used only
            for SQL Server 2005 databases.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.IsAccentSensitive">
            <summary>
            Indicates whether the catalog is accent sensitive. This is used only for SQL
            Server 2005 databases.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextCatalogs">
            <summary>A collection of full text catalogs.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalogs.SerializeItem(RedGate.SQLCompare.Engine.FullTextCatalog,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalogs.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FunctionType">
            <summary>The type of function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Inline">
            <summary>
            An inline function.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Scalar">
            <summary>
            A scalar function.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Table">
            <summary>
            A table function.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Aggregate">
            <summary>
            An aggregate.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Function">
            <summary>A user-defined function.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization">
            <summary>
            Represents a schema object that can also have an ALTER AUTHORIZATION applied to it
            to change the user as well (so it can have both user &amp; schema).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization.Authorization">
            <summary>
            Returns the authorization owner of the object (as opposed to the schema; see <see cref="P:RedGate.SQLCompare.Engine.SchemaObject.Owner"/>).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization.ScriptSourceAuthorization">
            <summary>
            The location of the creation script for the ALTER AUTHORIZATION statement for 
            this object if the database source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization.AuthType">
            <summary>
            Returns the object type that should be used for ALTER AUTHORIZATION statements on the object.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Function.m_IsSystemObject">
            <summary>
            This is to be used only by SQL Prompt
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Function.m_SchemaBoundFunctions">
            <summary>Schema bound functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Function.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the function with a specified function.</summary>
            <returns><em>True</em> if the functions are identical; otherwise, <em>false</em>.</returns>
            <param name="target">The function to compare with.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Function.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Function.CheckIfFunctionTableColumnsNeedRebuild(RedGate.SQLCompare.Engine.Function,RedGate.SQLCompare.Engine.Function)">
            <summary>
            Checks if a function columns have been modified in a way that requires rebuild.
            
            Note that computed columns cannot be dropped!
            </summary>
            <param name="master"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ObjectType">
            <summary>Returns ObjectType.Function</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Permissions">
            <summary>
            The permissions on this function.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.FunctionType">
            <summary>Returns the function type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.SysobjectID">
            <summary>
            The sysobject identifier for this function.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Text">
            <summary>The text of the function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.SchemaBound">
            <summary>True if the function is schema bound.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.QuotedIdentifierOn">
            <summary>True if the function was created with <em>quoted identifiers on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AnsiNullsOn">
            <summary>True if the function was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Parameters">
            <summary>The function parameters.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ReturnParameter">
            <summary>The function's return parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.NullOnNullInput">
            <summary>
            The function returns NULL on NULL input.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Assembly">
            <summary>
            The CLR assembly for the function, if this is a CLR function.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ExecuteAsType">
            <summary>
            The EXECUTE AS clause used for the object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the function.
            This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AssemblyClass">
            <summary>
            The CLR assembly class name for the function, if this is a CLR function.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AssemblyMethod">
            <summary>
            The CLR assembly method name for the function, if this is a CLR function.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ReturnFields">
            <summary>The function's return fields.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.CLRObject">
            <summary>
            True if the function is a CLR function.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Encrypted">
            <summary>True if the function definition was encrypted.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.IsSystemObject">
            <summary>
            For internal use only!!!
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AssemblyFromDeserialization">
            <summary>
            This is used when reading from scripts
            (the assembly might not available at the time the function is created)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Functions">
            <summary>A collection of functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Functions.SerializeItem(RedGate.SQLCompare.Engine.Function,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Functions.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ObjectType">
            <summary>The type of database object.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.None">
            <summary>Not used.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Table">
            <summary>Table.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.StoredProcedure">
            <summary>Stored procedure.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.View">
            <summary>View.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Default">
            <summary>Default.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.FullTextCatalog">
            <summary>Full text catalog.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Function">
            <summary>User-defined function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Role">
            <summary>Role.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Rule">
            <summary>Rule.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.User">
            <summary>User.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.UserDefinedType">
            <summary>User-defined type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Trigger">
            <summary>Trigger.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.DdlTrigger">
            <summary>DDL trigger.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Assembly">
            <summary>Assembly.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Synonym">
            <summary>Synonym.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.XmlSchemaCollection">
            <summary>XML schema collection.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.MessageType">
            <summary>Message type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Contract">
            <summary>Contract.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Queue">
            <summary>Queue.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Service">
            <summary>Service.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Route">
            <summary>Route.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.EventNotification">
            <summary>Event notification.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.PartitionScheme">
            <summary>
            Partition scheme.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.PartitionFunction">
            <summary>Partition function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Field">
            <summary>Field.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Index">
            <summary>Index.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Schema">
            <summary>Schema.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.ServiceBinding">
            <summary>Service binding.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Certificate">
            <summary>Certificate.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.SymmetricKey">
            <summary>Symmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.AsymmetricKey">
            <summary>Asymmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.CheckConstraint">
            <summary>Check constraint.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.FullTextStoplist">
            <summary>Full text stoplist.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IOwner">
            <summary>
            An interface representing an object that can 'own' other objects.
            </summary>
            <remarks>Currently used for Role, Schema, User</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExecuteAs">
            <summary>
            The EXECUTE AS clause used to create the object.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ExecuteAs.Caller">
            <summary>
            The object is set to EXECUTE AS CALLER.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ExecuteAs.Owner">
            <summary>
            The object is set to EXECUTE AS OWNER.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ExecuteAs.Dbo">
            <summary>
            The object is set to EXECUTE AS 'dbo'.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ExecuteAs.Guest">
            <summary>
            The object is set to EXECUTE AS 'guest'.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ExecuteAs.User">
            <summary>
            The object is set to EXECUTE AS a specified user.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.RelationalIndex">
            <summary>A relational index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.PrimaryKey">
            <summary>True if the index is a primary key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.Clustered">
            <summary>True if the index is clustered.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.Unique">
            <summary>True if the index is unique.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.UniqueConstraint">
            <summary>True if the index is a unique constraint.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.FullTextKey">
            <summary>True if the index is used in a full-text key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.PartitionedField">
            <summary>
            Indicates the field over which the index is partitioned. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.FilestreamFileGroup">
            <summary>
            The filegroup or partition scheme containing filestream data.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.DataCompressionPartitions">
            <summary>
            The partitions on which the table compression is set. This is a SQL Server 2008 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.DataCompressionPartitionsInternal">
            <summary>
            The partitions on which the table compression is set. This is a SQL Server 2008 feature.
            The internal version gives you direct access to the list that is stored.
            If there is no inmportant information in the list it is not stored!
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.Filter">
            <summary>
            The filtering condition on the index. This property exists in SQL Server 2008 and later.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Indexes">
            <summary>A collection of indexes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.SerializeItem(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.GetKey(RedGate.SQLCompare.Engine.Index)">
            <summary>
            Generates a key for an index.
            </summary>
            <param name="value">The index for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.Sort">
            <summary>
            Sorts indexes based on their names and fields.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Relational">
            <summary>
            An IEnumerable of all the relational indexes in this collection.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Xml">
            <summary>
            An IEnumerable of all the xml indexes in this collection.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Spatial">
            <summary>
            An IEnumerable of all the spatial indexes in this collection.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Statistics">
            <summary>
            An IEnumerable of all the statistics in this collection.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Item(System.String)">
            <summary>
            Returns an index given a name.
            </summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.IndexSortComparer.Compare(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.Index)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MappedBlobStore">
            <summary>
            A blob store that passes on all id requests not found to the unmapped blobstore.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappedBlobStore.#ctor(RedGate.SQLCompare.Engine.BlobStore)">
            <summary>
            Constructor.
            </summary>
            <param name="bs">
            The original unmapped blobstore to pass on all requests to
            that aren't in this blobstore.
            </param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseMapper">
            <summary>
            Class that applies owner mappings to a database.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.MapDatabase(RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>
            Applies the specified owner mappings to the database. This operation can take some time, during which
            you can obtain progress information through the <see cref="T:RedGate.Shared.Utils.ICancellable"/> interface implementation.
            </summary>
            <param name="origMappings">The owner mappings to apply to the database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.MapDBObject(RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Takes a database object in the unmapped database and returns the corresponding mapped database object
            in the mapped database
            </summary>
            <param name="unmapped"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.MapSchemaObject``1(``0,System.Collections.Generic.IDictionary{``0,``0})">
            <summary>
            Maps the owner amd extended properties of this schema object.
            </summary>
            <typeparam name="T">The type of schema object.</typeparam>
            <param name="obj">The schema object to map.</param>
            <param name="objMappingsToAdd">
            Contains the new object mappings to add after all schema object have been added.
            This is to try and ensure there are no clashes during mapping.
            </param>
            <returns>The new object owner, or null if no mapping was applied.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.FixTextObjectDefinition(RedGate.SQLCompare.Engine.ITextObject)">
            <summary>
            Applies all schema object mappings to the definition of this textual object.
            </summary>
            <param name="obj">The textual object to apply the mappings to.</param>
            <returns>The new object definition.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.FixComputedColumnExpression(System.String)">
            <summary>
            Applies all schema object mappings to the specified expression
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.CancelOperation">
            <summary>
            Cancels the current running operation. This will throw an instance of <see cref="T:RedGate.Shared.Utils.OperationCancelledException"/>
            at the currently executing location on the executing thread.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseMapper.Status">
            <summary>
            Gets and sets a delegate that can be used to notify of message or percentage changes.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MappingException">
            <summary>Exception thrown when an error is encountered whilst mapping.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor">
            <summary>
            Creates a new exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor(System.String)">
            <summary>
            Creates a new exception with the specified detail message.
            </summary>
            <param name="message">Detail message.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception with the specified detail message and cause.
            </summary>
            <param name="message">Detail message.</param>
            <param name="cause">Cause of exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see XML and SOAP Serialization.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PrepareStringDelegate`2">
            <summary>
            Creates the name used for comparing two objects when creating mappings.
            </summary>
            <param name="obj">The object for which the name is to be generated.</param>
            <param name="useFullName">
            If <em>true</em>, uses the fully-qualified name. If <em>false</em>, uses the
            name.
            </param>
            <param name="context">The context object passed back from the <see cref="T:RedGate.SQLCompare.Engine.Mappings`2">Mappings</see> class.</param>
            <typeparam name="TMap">The type stored in the mapping.</typeparam>
            <typeparam name="TContext">The type of the context object.</typeparam>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Mapping`1">
            <summary>
            Abstract class used to contain a mapping between two database objects.
            </summary>
            <typeparam name="T">The type stored in the mappings.</typeparam>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mapping`1.m_obj1">
            <summary>
            The object in the first database or null.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mapping`1.m_obj2">
            <summary>
            The object in the second database or null.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping`1.#ctor(`0,`0)">
            <summary>
            Creates a new mapping from obj1 to obj2. <see cref="P:RedGate.SQLCompare.Engine.Mapping`1.Include"/> is set to true if both objects
            are not null.
            </summary>
            <param name="obj1">Database object in 1 or null.</param>
            <param name="obj2">Database object in 2 or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping`1.#ctor(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="copy">Mapping object to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping`1.CompareTo(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>Sorts the Mappings.</summary>
            <returns>
            Less than zero when this instance is less than the specified object; zero when
            this instance is equal to the specified object; greater then zero when this instance is
            greater than the specified object.
            </returns>
            <param name="obj">The object to be compared.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping`1.System#ICloneable#Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mapping`1.Obj1">
            <summary>
            Returns the object from the first database
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mapping`1.Obj2">
            <summary>
            Returns the object from the second database
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mapping`1.Include">
            <summary>Specifies whether the mapping is to be included.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Mappings`2">
            <summary>
            Abstract class for creating a set of mappings from a list of database objects.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mappings`2.m_Forward">
            <summary>
            Name forward mapping from full name of obj1 to Mapping.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mappings`2.m_Backward">
            <summary>
            Name backward mapping from full name of obj2 to Mapping.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.#ctor(RedGate.SQLCompare.Engine.PrepareStringDelegate{`0,`1})">
            <summary>
            Contructor used when string preparation delegate is being changed.
            </summary>
            <param name="prepareStringDelegate">Function to be used to prepare string.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.#ctor(RedGate.SQLCompare.Engine.Mappings{`0,`1})">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="mappings">Mappings to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.Join(`0,`0)">
            <summary>Attempts to join two objects in one mapping.</summary>
            <returns>The mapping created.</returns>
            <param name="obj1">The first object, or null.</param>
            <param name="obj2">The second object, or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.ShouldInclude(`0,`0,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the
            obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.Split(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>
            Splits a mapping and creates two mappings; one to <em>null</em>, and one from
            <em>null</em>.
            </summary>
            <param name="old1">The mapping to be split, both obj1 and obj2 should be not null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.FromOne(`0)">
            <summary>
            Returns the mapping of the object in the first database.
            </summary>
            <param name="in1">object that the mapping is from, not null.</param>
            <returns>null if no mapping exists, or the mapping.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.FromOne(System.String)">
            <summary>Returns the Mapping of the object in the first database.</summary>
            <returns>If no mapping exists, <em>null</em>; otherwise, the Mapping.</returns>
            <param name="in1">The FullyQualifiedName of the object in the first database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.FromTwo(`0)">
            <summary>
            Returns the mapping of the object in the second database.
            </summary>
            <param name="in2">object that the mapping is from, not null.</param>
            <returns>null if no mapping exists, or the mapping.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.FromTwo(System.String)">
            <summary>Returns the Mapping of the object in the second database.</summary>
            <returns>If no mapping exists, <em>null</em>; otherwise, the Mapping.</returns>
            <param name="in2">The FullyQualifiedName of the object in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.Sort">
            <summary>
            Sorts the Mappings according the criteria appropriate for the object.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.GetKey(System.String)">
            <summary>
            Return the key that should be used for the specified fully qualified name.
            </summary>
            <param name="fullyQualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.CreateMappings``1(RedGate.SQLCompare.Engine.KeyedCollection{``0},RedGate.SQLCompare.Engine.KeyedCollection{``0},System.Object,System.Boolean)">
            <summary>
            Creates a mapping for each object in the collection where such a mapping is possible. All
            of the iteration is performed here and the matching can be affected by changing <see cref="M:RedGate.SQLCompare.Engine.Mappings`2.ShouldInclude(`0,`0,System.Object)"/>
            in the sub class. The main action of joining to objects together
            is performed by <see cref="M:RedGate.SQLCompare.Engine.Mappings`2.Join(`0,`0)"/> which can itself call <c>CreateMappings</c> on child database
            objects.
            </summary>
            <param name="in1">List of objects in the first database, or null.</param>
            <param name="in2">List of objects in the second database, or null.</param>
            <param name="extra">This can be used by the <see cref="M:RedGate.SQLCompare.Engine.Mappings`2.Join(`0,`0)"/> function for extra information on how to join the objects.</param>
            <param name="useFullName">Use the FullyQualifiedName for matching</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.Clear">
            <summary>
            Removes all objects from the Mappings instance.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.RemoveAt(System.Int32)">
            <summary>Removes the mapping at the specified index of the Mappings instance.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="">Mapping is null at the specified index.</exception>
            <param name="index">The index of the mapping to be removed.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.RealRemove(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>
            Removes the specified object from the mappings instance.
            </summary>
            <param name="mapping">Mapping object to be removed.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.RealAdd(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>
            Adds a mapping to this Mappings instance. This will change the forwards and backwards
            maps as necessary. This will break any mapping that will conflict with the added mapping.
            </summary>
            <param name="mapping">mapping object to be added, not null.</param>
            <returns>index of the mapping object in the Mappings.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.Add(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>Adds an <see cref="T:RedGate.SQLCompare.Engine.Mapping`1"/> to the end of the Mappings instance.</summary>
            <returns>The Mappings index at which the object has been added.</returns>
            <param name="value">The object to be added to the end of the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.Remove(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>
                Removes the first occurrence of the specified <see cref="T:RedGate.SQLCompare.Engine.Mapping`1"/> from the
                Mappings instance.
            </summary>
            <param name="value">The object to remove from the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.Contains(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>Determines whether the Mappings instance contains a specified object.</summary>
            <returns>
            	<em>true</em> if the Mappings instance contains the specified object; otherwise,
            <em>false</em>.
            </returns>
            <param name="value">The <see cref="T:RedGate.SQLCompare.Engine.Mapping`1"/> to locate in the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.IndexOf(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>
                Searches for the specified <see cref="T:RedGate.SQLCompare.Engine.Mapping`1"/> and returns the zero-based
                index of the first occurrence within the Mappings instance.
            </summary>
            <returns>
            If found, the zero-based index of the first occurrence of the object within the
            Mappings instance; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.OnValidate(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>
            Performs additional custom proccesses when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.Insert(System.Int32,RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">Throws <see cref="T:System.NotImplementedException"/> always</exception>
            <param name="index">Ignored.</param>
            <param name="value">Ignored.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.CancelOperation">
            <summary>
            Cancels the current operation.
            </summary>
            <remarks>
            An OperationCancelledException will be thrown.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`2.PrepareString(`0,System.Boolean,`1)">
            <summary>
            A default implementation of the prepare string delegate.
            </summary>
            <param name="obj"></param>
            <param name="useFullName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings`2.Context">
            <summary>
            Access to the mapping context. The type of the context is dependent on the mapped objects.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings`2.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:RedGate.SQLCompare.Engine.Mapping`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the Mapping to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings`2.Item(System.String)">
            <summary>
            Gets the mapping of the specified object name, first attempting
            to match against objects in the first database, then matching
            against objects in the second database. Returns null if
            a mapping is not found.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings`2.Status">
            <summary>
            The event handler used to receive status update events.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObjectMappingStatus">
            <summary>
            The result of the mapping.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObjectMappingStatus.Success">
            <summary>The mapping was successful.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObjectMappingStatus.UnableToCompare">
            <summary>
            The mapping succeeded, but SQL Compare is unable to compare. This is usually
            because of type comparison failure.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObjectMappingStatus.PartialSuccess">
            <summary>The mapping was a partial success; some columns remain unmapped.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObjectMappingCategories">
            <summary>
            This enum contains schema object categories. This is used to decide what to include
            in the schem mappings (no need to create a full mapping!)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObjectMapping">
            <summary>
            Contains a mapping from a schema level object to another schema level object. Also contains
            information on the criteria used for matching the two schema level objects, which can be based on an
            level 2 object or an arbitrary set of mapped fields.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMapping.#ctor(RedGate.SQLCompare.Engine.SchemaObject,RedGate.SQLCompare.Engine.SchemaObject,RedGate.SQLCompare.Engine.SchemaObjectMappingStatus)">
            <summary>
            Constructor. Calls the base constructor and initializes the index
            mappings.
            </summary>
            <param name="obj1">The view or table in the first database.</param>
            <param name="obj2">The view or table in the second database.</param>
            <param name="status">The status of the mapping.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMapping.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectMapping.Messages">
            <summary>
            Messages that explain any issues concerning the mapping; null if no issues
            exist.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectMapping.Include">
            <summary>The include property for tables.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectMapping.Status">
            <summary>The status of the Table Mapping.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObjectMappings">
            <summary>
            Holds mappings for tables or views in a schema.
            </summary>
            <example>
            	<code lang="CS">
            using System;
            using RedGate.SQLCompare.Engine;
            using RedGate.SQLDataCompare.Engine;
            using RedGate.SQLDataCompare.Engine.ResultsStore;
             
            namespace RedGate.SQLDataCompare.ExampleTests
            {
                public class SchemaObjectMappingExample
                {
                    public void RunExample()
                    {
                        Database db1=new Database();
                        Database db2=new Database();
                        ComparisonSession session=new ComparisonSession();
                        SchemaObjectMappings mappings = new SchemaObjectMappings();        
                       
                        try
                        {
                            db1.RegisterForDataCompare(new ConnectionProperties(".", "WidgetDev"));
                            db2.RegisterForDataCompare(new ConnectionProperties(".", "WidgetLive"));                                    
                            
                            // Create the mappings between a certain table
                            SchemaObjectMapping SchemaObjectMapping = (SchemaObjectMapping)mappings.Join(db1.Tables["[dbo].[WidgetPrices]"], db2.Tables["[dbo].[WidgetPrices]"]);
             
                            // Set the custom comparison key for the table
                            SchemaObjectMapping.MatchingMappings.Clear();
                            SchemaObjectMapping.MatchingMappings.Add(SchemaObjectMapping.FieldMappings["WidgetID"]);
                            SchemaObjectMapping.RefreshMappingStatus();
             
                            // Set the where clause for the comparison
                            SchemaObjectMapping.Where = new WhereClause("Active = 'Y'");
             
                            // Peform the comparison
                            session.CompareDatabases(db1, db2, mappings);
                            
                            TableDifference difference=session.TableDifferences["[dbo].[WidgetPrices]"];
             
                            // Loop through all the rows
                            foreach(Row row in difference.ResultsStore)
                            {
                                Console.WriteLine("Row {0} type {1}", row.Index, row.Type.ToString());
                                int i=0;
                                foreach (FieldPair field in difference.ResultsStore.Fields)
                                {
                                    int field1=field.OrdinalInResults1;
                                    int field2=field.OrdinalInResults2;
                            
                                    if (field1 != field2)
                                    {
                                        //get the values
                                        object value1=row.Values[field1];
                                        object value2=row.Values[field2];
                                        if (value1 == null)
                                            value1="NULL";
                                        if (value2 == null)
                                            value2="NULL";
                                        Console.WriteLine("{0}\t{1}\t{2}\t{3}",field.Field(false).Name, value1.ToString(),row.FieldDifferent(i)?"&lt;&gt;":"==",  value2.ToString());
                                    }
                                    else
                                    {
                                        //this is part of the custom index we are comparing on
                                        object value=row.Values[field1];    
                                        Console.WriteLine("*{0}\t{1}",field.Field(false).Name, value.ToString());
                                    }
                                    i++;
                                }
                            }
                        }
                        finally
                        {
                            session.Dispose();
                            db1.Dispose();
                            db2.Dispose();
                        }
                    }
                }
            }
                </code>
            	<code lang="VB">
            Option Explicit On 
             
            Imports RedGate.SQLCompare.Engine
            Imports RedGate.SQLDataCompare.Engine
            Imports RedGate.SQLDataCompare.Engine.ResultsStore
             
            Public Class SchemaObjectMappingExample
                Sub RunExample()
                    Dim session As New ComparisonSession
             
                    'register the databases for comparison
                    Dim db1 As New Database
                    Dim db2 As New Database
             
                    db1.RegisterForDataCompare(New ConnectionProperties(".", "WidgetDev"))
                    db2.RegisterForDataCompare(New ConnectionProperties(".", "WidgetLive"))
             
                    Dim mappings As New SchemaObjectMappings
             
                    Dim SchemaObjectMapping As SchemaObjectMapping = mappings.Join(db1.Tables("[dbo].[WidgetPrices]"), db2.Tables("[dbo].[WidgetPrices]"))
             
                    ' Set the custom comparison key for the table
                    SchemaObjectMapping.MatchingMappings.Clear()
                    SchemaObjectMapping.MatchingMappings.Add(SchemaObjectMapping.FieldMappings("WidgetID"))
                    SchemaObjectMapping.RefreshMappingStatus()
             
                    ' Set the where clause for the comparison
                    SchemaObjectMapping.Where = New WhereClause("Active = 'Y'")
             
                    'compare the databases
                    session.CompareDatabases(db1, db2, mappings)
             
                    Dim mapping As SchemaObjectMapping
             
             
                    Dim difference As TableDifference = session.TableDifferences("[dbo].[WidgetPrices]")
                    Dim row As row
                    For Each row In difference.ResultsStore  'loop through all the rows
                        Dim field As FieldPair
                        Dim i As Int32 = 0
                        Console.WriteLine("Row {0} type {1}", row.Index, row.Type.ToString())
                        For Each field In difference.ResultsStore.Fields
                            'work out where about in the results the field data is stored
                            'if we were comparing identical records, or records present in one
                            'database but not the other then we would not need to 
                            'use the OrdinalInResults1 and OrdinalInResults2 properties
                            'but just OrdinalInResults
                            Dim field1 As Int32 = field.OrdinalInResults1
                            Dim field2 As Int32 = field.OrdinalInResults2
             
                            If (field1 &lt;&gt; field2) Then
                                'get the values
                                Dim value1 As Object = row.Values(field1)
                                Dim value2 As Object = row.Values(field2)
                                If (value1 Is Nothing) Then
                                    value1 = "NULL"
                                End If
                                If (value2 Is Nothing) Then
                                    value2 = "NULL"
                                End If
                                If row.FieldDifferent(i) Then
                                    Console.WriteLine("{0}:{1} &lt;&gt; {2}", field.Field(False).Name, value1.ToString(), value2.ToString())
                                Else
                                    Console.WriteLine("{0}:{1} == {2}", field.Field(False).Name, value1.ToString(), value2.ToString())
                                End If
                            Else
                                'this is part of the unique index we are comparing on
                                Dim value As Object = row.Values(field1)
                                Console.WriteLine("*{0}:{1}", field.Field(False).Name, value.ToString())
                            End If
                            i += 1
                        Next
                    Next
                    'dispose of the objects
                    session.Dispose()
                    db1.Dispose()
                    db2.Dispose()
                End Sub
            End Class
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.#ctor">
            <summary>
            Default constructor, using case-sensitive keys.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.#ctor(System.Boolean)">
            <summary>
            Constructor specifying case-sensitivity.
            </summary>
            <param name="caseSensitive">
            If true, the mappings will be done using case-sensitive keys.
            If false, the keys will be case-insensitive
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.GetKey(System.String)">
            <summary>
            Return the key that should be used for the specified fully qualified name.
            </summary>
            <param name="fullyQualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.#ctor(RedGate.SQLCompare.Engine.Mappings{RedGate.SQLCompare.Engine.SchemaObject,System.Boolean})">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="schemaObjectMappings">The <see cref="T:RedGate.SQLCompare.Engine.SchemaObjectMappings"/> to be copied.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.ShouldInclude(RedGate.SQLCompare.Engine.SchemaObject,RedGate.SQLCompare.Engine.SchemaObject,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the
            obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.Join(RedGate.SQLCompare.Engine.SchemaObject,RedGate.SQLCompare.Engine.SchemaObject)">
            <summary>
            Joins two views or tables, and attempts to map their fields and indexes. If there
            are no suitable indexes, the status is set to <em>Unable to Compare</em>.
            </summary>
            <returns>The created mapping.</returns>
            <exception cref="T:System.ArgumentException" caption="">SchemaObjectMappings. Join must be called with ViewTableSuperClass arguments.</exception>
            <param name="obj1">The stored procedure in the first database.</param>
            <param name="obj2">The stored procedure in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.GetMappedName(System.String,System.Boolean)">
            <summary>
            Returns the mapped schema object name for a particular fully qualified name.
            </summary>
            <param name="key"></param>
            <param name="runOnTwo"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.GetMappedObject(System.String,System.Boolean)">
            <summary>
            Returns the mapped schema object name for a particular fully qualified name.
            </summary>
            <param name="key"></param>
            <param name="runOnTwo"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectMappings.CaseSensitive">
            <summary>
            Returns true if the keys are case-sensitive.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Members">
            <summary>A collection of role members. These can be users or roles.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Members.Sort">
            <summary>
            Sorts triggers based on their names (this is generally used for collections of tables, so the table name
            does not need to be considered.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Members.MemberComparer.Compare(RedGate.SQLCompare.Engine.IOwner,RedGate.SQLCompare.Engine.IOwner)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            </returns>
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.WarningSeverity">
            <summary>
            Warning severity.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WarningSeverity.Information">
            <summary>Information.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WarningSeverity.Low">
            <summary>Low.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WarningSeverity.Medium">
            <summary>Medium.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WarningSeverity.High">
            <summary>High.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Message">
            <summary>A message.</summary>
            <remarks>See <see cref="T:RedGate.SQLCompare.Engine.Work"/> for more information.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.WarningSeverity,System.String)">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.WarningSeverity,System.String,System.Object)">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <param name="arg0"></param>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.WarningSeverity,System.String,System.Object,System.Object)">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.WarningSeverity,System.String,System.Object[])">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <param name="args"></param>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Message.Text">
            <summary>The text of the message.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Message.DatabaseObject">
            <summary>The database object to which this message belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Message.MessageTypeID">
            <summary>The identifier of the message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Message.WarningSeverity">
            <summary>The severity of the message or warning.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Message.SeverityComparer">
            <summary>
            A comparer implementation for sorting messages based on their priorities. It
            first compares the severity, then the name of the dependent object, then the warning key.
            </summary>
            <excludetoc/>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Message.SeverityComparer.m_StickyMessageKey">
            <summary>
            A message key that should always be prioritised!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.SeverityComparer.Compare(RedGate.SQLCompare.Engine.Message,RedGate.SQLCompare.Engine.Message)">
            <summary>
            Compares two messages.
            </summary>
            <param name="x">The message to compare.</param>
            <param name="y">The message to compare with.</param>
            <returns>A negative number if the first message is smaller, 0 if the messages are the same
            in terms of sorting order.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Message.SeverityComparer.StickyMessageKey">
            <summary>
            A message key that should always be prioritized, i.e. set to be at the top of the sorted list.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Messages">
            <summary>A collection of messages.</summary>
            <remarks>
            See <see cref="T:RedGate.SQLCompare.Engine.Work"/> for more information.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.#ctor">
            <summary>Creates a new message collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.Add(RedGate.SQLCompare.Engine.Message)">
            <summary>For internal use only.</summary>
            <returns></returns>
            <exclude/>
            <param name="value">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.Sort(System.Collections.Generic.IComparer{RedGate.SQLCompare.Engine.Message})">
            <summary>
            Sorts the messages using the specified comparer.
            </summary>
            <param name="comparer">The IComparer to be used for the sorting.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageTypeValidation">
            <summary>The validation type for a message type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MessageTypeValidation.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MessageTypeValidation.Xml">
            <summary>XML.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MessageTypeValidation.Empty">
            <summary>Empty.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageType">
            <summary>A message type.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageType.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the message type with a specified message type.</summary>
            <returns>
            	<em>True</em> if the message types are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The message type to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageType.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.ObjectType">
            <summary>Returns ObjectType.MessageType</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.Permissions">
            <summary>
            The permissions on this message type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.Validation">
            <summary>The validation requirement for the message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.XmlCollection">
            <summary>The XML schema collection referenced by the message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.Contracts">
            <summary>
            The dependent contracts.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.IsSystemObject">
            <summary>
            Indicates whether the object in question is a system object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.ExtendedProperties">
            <summary>The extended properties defined for the message type.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageTypes">
            <summary>A collection of message types.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageTypes.SerializeItem(RedGate.SQLCompare.Engine.MessageType,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageTypes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageUsage">
            <summary>A message usage.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsage.Equals(RedGate.SQLCompare.Engine.MessageUsage,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the message usages are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the message usage with a specified message usage.</summary>
            <param name="target">The message usage to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageUsage.MessageType">
            <summary>
            The message type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageUsage.SentByInitiator">
            <summary>True if the message type in the usage is sent by the initiator.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageUsage.SentByTarget">
            <summary>True if the message type in the usage is sent by the target.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageUsages">
            <summary>A collection of message usages.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsages.GetKey(RedGate.SQLCompare.Engine.MessageUsage)">
            <summary>
            Generates a key for a message usage.
            </summary>
            <param name="value">The message usage for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsages.SerializeItem(RedGate.SQLCompare.Engine.MessageUsage,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsages.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.NullableBinaryReader">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryReader.ReadString">
            <summary>For internal use only.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.NullableBinaryWriter">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryWriter.Write(System.String)">
            <summary>For internal use only.</summary>
            <param name="value">For internal use only.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException">
            <summary>
            An exception that is used when a database object that is not in the
            database is requested.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException.#ctor">
            <summary>
            Constructs an ObjectNotInDatabaseException exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException.#ctor(System.String)">
            <summary>
            Constructs an ObjectNotInDatabaseException exception.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an ObjectNotInDatabaseException exception.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ObjectNotInDifferences">
            <summary>
            Exception that is used when a database object that is not in the
            differences collection is requested.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDifferences.#ctor">
            <summary>
            Constructs an ObjectNotInDifferences exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDifferences.#ctor(System.String)">
            <summary>
            Constructs an ObjectNotInDifferences exception.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDifferences.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an ObjectNotInDifferences exception.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ObjectTypeHelper">
            <summary>
            Various useful methods for ObjectType
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.OptionDescriptionAttribute">
            <summary>Options used in comparison and synchronization.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.OptionDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="friendlyName">The friendly name of the option description.</param>
            <param name="helpText">Help text.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.OptionDescriptionAttribute.FriendlyName">
            <summary>A friendly name.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.OptionDescriptionAttribute.HelpText">
            <summary>Some help text.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Options">
            <summary>Options used when comparing and synchronizing databases.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.Default">
            <summary>
            	<para>The default options for a comparison. These are:</para>
            	<list type="bullet">
            		<item>IgnoreFileGroups</item>
            		<item>IgnoreFillFactor</item>
            		<item>IgnoreUserProperties</item>
            		<item>IgnoreWhiteSpace</item>
            		<item>IgnoreWithElementOrder</item>
            		<item>IncludeDependencies</item>
            		<item>IgnoreDatabaseNames</item>
            	</list>
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ForceColumnOrder">
            <summary>Force table column order to be identical.</summary>
            <remarks>
            If additional columns are inserted into the middle of a table this option will force a rebuild of the table so the column order after synchronization is correct
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreFillFactor">
            <summary>Ignore fill factor.</summary>
            <remarks>
            Ignores the fill factor in indexes when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnorePermissions">
            <summary>Ignore permissions.</summary>
            <remarks>
            Ignores permissions on objects when comparing and synchronizing objects
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreWhiteSpace">
            <summary>Ignore white space.</summary>
            <remarks>
            Ignores white space (newlines, tabs, spaces etc.) when comparing objects
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreBindings">
            <summary>Ignore bindings.</summary>
            <remarks>
            Ignores bindings on columns and user defined types (eg sp_bindrule and sp_bindefault clauses won't be scripted)
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreQuotedIdentifiersAndAnsiNullSettings">
            <summary>Ignore SET QUOTED_IDENTIFIER and SET ANSI_NULLS statements.</summary>
            <remarks>
            Ignores these common SET statements when comparing views, stored procedures etc. Note that these statements will still appear in synchronization scripts.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.CaseSensitiveObjectDefinition">
            <summary>Treat items as case sensitive.</summary>
            <remarks>
            Treats object names such as ATable and atable as different, and carries out case sensitive comparisons on stored procedures etc.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreExtendedProperties">
            <summary>
            Ignore extended properties
            </summary>
            <remarks>
            Ignores extended properties when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreFullTextIndexing">
            <summary>Ignore full text indexing.</summary>
            <remarks>
            Ignores full text indexes, catalogs etc. when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.NoSQLPlumbing">
            <summary>Do not include plumbing for transactional synchronization scripts.</summary>
            <remarks>
            Removes transactions from the synchronization scripts to produce more readable SQL
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreCollations">
            <summary>Ignore collation order.</summary>
            <remarks>
            Ignores collation orders on character datatype columns when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreComments">
            <summary>Ignore comments.</summary>
            <remarks>
            Ignores comments when comparing views, stored procedures etc. Note that comments will still appear in the synchronization scripts
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIndexes">
            <summary>Ignore indexes.</summary>
            <remarks>
            Ignores indexes, unique constraints and primary keys when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreKeys">
            <summary>Ignore foreign keys.</summary>
            <remarks>
            Ignores foreign keys when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreChecks">
            <summary>Ignore check constraints.</summary>
            <remarks>
            Ignores check constraints when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreTriggers">
            <summary>Ignore DML triggers.</summary>
            <remarks>
            Ignores DML triggers when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IncludeDependencies">
            <summary>Include dependencies.</summary>
            <remarks>
            Includes dependent objects when comparing and synchronizing databases. For example, if a view depends on a table then the table will be synchronized when synchronizing the view
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreInsteadOfTriggers">
            <summary>Ignore INSTEAD OF triggers.</summary>
            <remarks>
            Ignores INSTEAD OF triggers when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreFileGroups">
            <summary>Ignore filegroups, partition schemes, and partition functions.</summary>
            <remarks>
            Ignores FILEGROUP clauses when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIdentitySeedAndIncrement">
            <summary>Ignore identity seed and increment values.</summary>
            <remarks>
            Ignores identity seed and increment values when comparing databases. Note that they will still appear in synchronization scripts
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreWithNocheck">
            <summary>Ignore WITH NOCHECK on foreign keys and check constraints.</summary>
            <remarks>
            Ignores disabled and not trusted flags on foreign keys. Ignores the 'not trusted' flag on foreign keys and check constraints. Note that if foreign keys or constraints are disabled then this will still be flagged.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreConstraintNames">
            <summary>Ignore constraint names.</summary>
            <remarks>
            Ignores the names of foreign keys, indexes, primary keys, default, unique and check constraints when comparing. The names will still be scripted.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreStatistics">
            <summary>Ignore statistics.</summary>
            <remarks>
            Ignores statistics when comparing and synchronizing
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.DoNotOutputCommentHeader">
            <summary>Do not output comment header.</summary>
            <remarks>
            Do not include the comment in the header of the output script
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.AddWithEncryption">
            <summary>
            Add WITH ENCRYPTION option to stored procedures etc.
            </summary>
            <remarks>
            Add WITH ENCRYPTION option to stored procedures etc.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreSynonymDependencies">
            <summary>
            Ignore dependencies through synonyms.
            </summary>
            <remarks>
            Ignore dependencies through synonyms.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.SeparateTriggers">
            <summary>
            Separate triggers from tables and views.
            </summary>
            <remarks>
            Separate triggers from tables and views.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreOwners">
            <summary>
            Ignore owners when checking for equality.
            </summary>
            <remarks>
            Ignore owners when checking for equality.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreQueueEventNotifications">
            <summary>
            Ignore event notifications on queues.
            </summary>
            <remarks>
            Ignore event notifications on queues.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.TargetIsPre2005">
            <summary>Flag target database as prior to SQL Server 2005. Internal use only.</summary>
            <remarks>
            Target database is pre SQL Server 2005.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.UseClrUdtToStringForClrMigration">
            <summary>
            If a CLR assembly must be changed, unbind the dependent types from tables using
            ToString, and then convert these table values back to CLR type.
            </summary>
            <remarks>
            Target database is post SQL Server 2005.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ConsiderNextFilegroupInPartitionSchemes">
            <summary>
            If set, the next filegroups in partition schemes are compared with the filegroups
            that have a partition range associated with them.
            </summary>
            <remarks>
            Target database is post SQL Server 2005.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreCertificatesAndCryptoKeys">
            <summary>
            Ignore certificates, symmetric keys, and asymmetric keys in SQL Server 2005
            databases.
            </summary>
            <remarks>
            Target database is post SQL Server 2005.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreTriggerOrder">
            <summary>
            Ignore trigger order.
            </summary>
            <remarks>
            Target server is either SQL Server 2000 or later.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreUsers">
            <summary>
            Ignore users' permissions and role memberships.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreUserProperties">
            <summary>
            Ignore user properties.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.DisableAndReenableDdlTriggers">
            <summary>Disable and later re-enable DDL triggers. SQL Server 2005 only.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreWithElementOrder">
            <summary>
            Ignore the order of <em>with elements</em> in non CLR stored procedures,
            functions, triggers, DDL triggers, and views.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIndexLockProperties">
            <summary>
            Ignore the lock properties of indexes.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreReplicationTriggers">
            <summary>
            Ignore replication triggers.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIdentityProperties">
            <summary>
            Ignores identity properties.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreNotForReplication">
            <summary>
            Ignores NOT FOR REPLICATION.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.TargetIsPre2008">
            <summary>Flag target database as prior to SQL Server 2008. Internal use only.</summary>
            <remarks>
            Target database is pre SQL Server 2008.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreDataCompression">
            <summary>
            Ignores data compression.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreDatabaseAndServerName">
            <summary>
            Ignores database and server names in synonyms.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreDatabaseName">
            <summary>
            Ignores database and server names in synonyms.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.AddDatabaseUseStatement">
            <summary>
            Adds a USE statement at the top of the sync sql
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreSchemaObjectAuthorization">
            <summary>
            Ignores owner authorization on schema objects.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.DecryptPost2kEncryptedObjects">
            <summary>
            Decrypt 2005 and 2008 encrypted objects. Note that this can have a significant performance impact.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ForceSyncScriptGeneration">
            <summary>
            Generate a synchronization SQL script rather than folder sync actions when syncing to scripts.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreStatisticsNorecompute">
            <summary>
            Ignore the STATISTICS_NORECOMPUTE property on indexes.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Parameter">
            <summary>A SQL Server parameter.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameter.Equals(RedGate.SQLCompare.Engine.Parameter,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the parameters are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the parameter with a specified parameter.</summary>
            <param name="targetParameter">The parameter to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Scale">
            <summary>The scale of the parameter.</summary>
            <remarks>Valid for numeric and decimal data types.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Precision">
            <summary>The precision of a decimal or numeric data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.SqlType">
            <summary>The type of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.DefinedSize">
            <summary>The length of the parameter.</summary>
            <remarks>Valid only for character and binary data.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Name">
            <summary>The name of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Database">
            <summary>The database to which the field belongs.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.TypeName">
            <summary>The name of the type of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.FullyQualifiedTypeName">
            <summary>
            The name of the fully-qualified field type. For SQL Server 2005, this property
            contains the schema name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.TypeSchemaName">
            <summary>The name of the schema for the field's data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.XmlDocument">
            <summary>True if the parameter is an XML document.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.XmlSchemaCollection">
            <summary>The XML schema collection for strongly-typed XML parameters.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.IsOutput">
            <summary>Indicates whether the parameter is an output parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.HasDefaultValue">
            <summary>
            True if there is a default value.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.DefaultValue">
            <summary>The default value of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Collation">
            <summary>
            The collation of the parameter.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Parameters">
            <summary>A collection of parameters.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.SerializeItem(RedGate.SQLCompare.Engine.Parameter,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use only.
            </summary>
            <param name="value"></param>
            <param name="writer"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use only.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.GetKey(RedGate.SQLCompare.Engine.Parameter)">
            <summary>
            Generates a key for a parameter.
            </summary>
            <param name="value">The parameter for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.Equals(RedGate.SQLCompare.Engine.Parameters,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the parameter collections are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the parameters collection with a specified parameters collection.</summary>
            <param name="target">The collection of parameters to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameters.Item(System.Int32)">
            <summary>Returns the parameter at the specified position.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ParserHelper">
            <summary>
            Summary description for ParserHelper.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.TextEqualWithExtraParantheses(System.String,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>
            This is based on TextEqual but sort of ignores parantheses. Anything can be surrounded by any number of matching
            parantheses, as long as this does not affect evaluation order. This method builds up the expression trees
            for the input defaults and constraints, and does a comparison at the tree level. Comments and whitespaces
            are ignored to support future extensions, but note the SS does not allow comments in defaults/constraints,
            neither does it allow arbitrary whitespaces. (SS also has a go at parantheses, and Yukon goes bererk with them
            anyway.)
            </summary>
            <param name="text1"></param>
            <param name="text2"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.EqualsAstNode(antlr.collections.AST,antlr.collections.AST,System.Boolean)">
            <summary>
            Compares two AST nodes, and tells us whether they are different or not.
            </summary>
            <param name="leftAst"></param>
            <param name="rightAst"></param>
            <param name="caseSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.EqualsTree(antlr.collections.AST,antlr.collections.AST,System.Boolean)">
            <summary>
            Compares two ASTs, returns true if they are equal.
            </summary>
            <param name="leftAst"></param>
            <param name="rightAst"></param>
            <param name="caseSensitive">Indicates whether comparison is case sensitive.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.EqualsChildren(antlr.collections.AST,antlr.collections.AST,System.Boolean,System.Boolean)">
            <summary>
            iterates through all the siblings and compares them including
            their subtrees.
            </summary>
            <param name="leftAst"></param>
            <param name="rightAst"></param>
            <param name="caseSensitive"></param>
            <param name="specialCaseConvert"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ParserHelper.IgnoreOwnerState">
            <summary>
            0 not yet there, 1 next is the owner!, 2 expecting dot! , 3 over
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionFunction">
            <summary>A partition function.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunction.GetWorkList(RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Not null if it is possible to alter the database to change the source (this) partition
            function to the target partition function using alter statements without 
            a full rebuild of this partition function and all the dependants.
            </summary>
            <param name="target">The assembly to compare with</param>
            <param name="options">Comparison options</param>
            <returns>An arraylis that has the consolidated boundaries, and information about
            which partition function the boundary belongs to. The result is null if the 
            partition function must rebuilt. E.g. for such a case is difference in left/right 
            boundary handling.</returns>
            <param name="onlyDifference">Only difference: in this case ignore dependant partition schemes and their filegroups.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunction.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the partition function with a specified partition function.</summary>
            <returns>
            	<em>True</em> if the partition functions are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The partition function to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunction.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.ExtendedProperties">
            <summary>The extended properties defined for the partition function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.ObjectType">
            <summary>Returns ObjectType.PartitionFunction</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.OnRight">
            <summary>
            True if the boundary values belong to the interval on the right.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.Parameters">
            <summary>The parameters of the function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.Values">
            <summary>
            The boundary values.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionFunctions">
            <summary>A collection of partition functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunctions.SerializeItem(RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunctions.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionScheme">
            <summary>A partition scheme.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionScheme.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the partition scheme with a specified partition scheme.</summary>
            <returns>
            	<em>True</em> if the partition schemes are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The partition scheme to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionScheme.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.Function">
            <summary>The partition function for the partition scheme.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.FileGroups">
            <summary>The filegroups that are used for partitioning.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.ExtendedProperties">
            <summary>The extended properties defined for the partition scheme.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionSchemes">
            <summary>A collection of partition schemes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionSchemes.SerializeItem(RedGate.SQLCompare.Engine.PartitionScheme,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionSchemes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionAction">
            <summary>The action that a permission allows.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.None">
            <summary>Used for error handling.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Alter">
            <summary>Alter.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Control">
            <summary>Control.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.ReceiveOrImpersonate">
            <summary>Receive in the case of objects; Impersonate in the case of users.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Send">
            <summary>Send.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.TakeOwnership">
            <summary>Take ownership.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.ViewDefinition">
            <summary>View definition.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.References">
            <summary>References.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Select">
            <summary>Select.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Insert">
            <summary>Insert .</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Delete">
            <summary>Delete.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Update">
            <summary>Update.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Execute">
            <summary>Execute.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionType">
            <summary>The type of permission.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionType.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionType.GrantWithGrant">
            <summary>Grant with grant option.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionType.Grant">
            <summary>Grant.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionType.Deny">
            <summary>Deny.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionType.Revoke">
            <summary>Revoke.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionClass">
            <summary>
            The class on which the permission exists.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Other">
            <summary>
            None, this is used for error handling.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Database">
            <summary>Database.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.ObjectOrColumn">
            <summary>
            Object or column. Prior to SQL Server 2005, this is the only permission class
            used.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Schema">
            <summary>Schema.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.DatabasePrincipal">
            <summary>Database principal.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Assembly">
            <summary>Assembly.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Type">
            <summary>Type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.XmlSchemaCollection">
            <summary>XML schema collection.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.MessageType">
            <summary>Message type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.ServiceContract">
            <summary>Service contract.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Service">
            <summary>Service.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.RemoteServiceBinding">
            <summary>Remote service binding.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Route">
            <summary>Route.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.FullTextCatalog">
            <summary>
            Full text catalog
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.SymmetricKey">
            <summary>Symmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.AsymmetricKey">
            <summary>Asymmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Certificate">
            <summary>Certificate.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Permission">
            <summary>A permission.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permission.GetPermissionClassPrefix(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>
            Note that this does not work with roles. There are two kinds of roles, and application
            roles must further be prefixed with "APPLICATION ".
            </summary> 
            <param name="ot"></param>
            <returns>The prefix to identify the object type in a permission grant statement.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permission.GetRequiredPermissionAlterAction(RedGate.SQLCompare.Engine.PermissionType,RedGate.SQLCompare.Engine.PermissionType)">
            <summary>
            Given two permission settings in two databases this method returns the 
            action that is needed to synchronize. E.g. if the two settings are grant and deny, then the 
            action would be grant.
            </summary>
            <param name="permission"></param>
            <param name="targetPermission"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.Fields">
            <summary>The fields to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.Type">
            <summary>The type of permission.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.PermissionClass">
            <summary>The class of permission (for example, object, XML schema collection).</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.Action">
            <summary>The action to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.UserName">
            <summary>The user or role to which the permission applies.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Permissions">
            <summary>A collection of permissions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permissions.GetRolePermissionCount">
            <summary>
            Returns the number of non user permissions (role permissions).
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionsArray">
            <summary>
            Summary description for PermissionsArray.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionsCollection">
            <summary>
            Summary description for Permissions.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ProgressTracker.Increment">
            <summary>
            Increments the CurrentValue by one
            </summary>
            <returns>If the CurrentPercentage has changed</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ProgressTracker.Increment(System.Int32)">
            <summary>
            Increments the CurrentValue by the value specified
            </summary>
            <param name="value">The ammount to increment CurrentValue by.</param>
            <returns>If the CurrentPercentage has changed</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.LowerLimit">
            <summary>
            Sets and gets the lower limit of the range. (The default value is 0)
            </summary>
            <exception cref="T:System.ArgumentException">If the upper and lower limits are set to the same value</exception>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.UpperLimit">
            <summary>
            Sets and gets the upper limit of the range. (The default value is 100)
            </summary>
            <exception cref="T:System.ArgumentException">If the upper and lower limits are set to the same value</exception>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.CurrentValue">
            <summary>
            Gets and sets the current value within the specified range
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.CurrentPercentage">
            <summary>
            Gets the current percentage of the CurrentValue over the specified range
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.HasPercentageChanged">
            <summary>
            Returns back if the percentage has changed since the last time HasPercentageChanged been called.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.Message">
            <summary>
            Access to the status message.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Project">
            <summary>A SQL Compare project.</summary>
            <remarks>
            Use this class to load projects generated by SQL Compare, or to save projects for
            SQL Compare. Note that a project contains only connection information. It does not
            contain information about database schemas.
            </remarks>
            <example>
                This example shows how to save and load a project.
                <code lang="CS">
            Project project1=new Project();
             
            //by default DataSource1/DataSource2 are created as a LiveDatabaseSources with
            //the server name set to "(local)".
            project1.DataSource1.DatabaseName = "WidgetProduction";
            project1.DataSource2.DatabaseName = "WidgetStaging";
             
             
            //this project can now be opened up in SQL Compare
            project1.SaveToDisk(@"c:\A sample project.scp");
             
            //load the project from disk
            Project project2=Project.LoadFromDisk(@"c:\A sample project.scp");
             
            Console.WriteLine(project2.FileName);
                </code>
            	<code lang="vb">
            Dim project1 As New Project()
             
            'by default DataSource1/DataSource2 are created as a LiveDatabaseSources with
            'the server name set to "(local)".
            project1.DataSource1.DatabaseName = "WidgetProduction"
            project1.DataSource2.DatabaseName = "WidgetStaging"
             
            'this project can now be opened up in SQL Compare
            project1.SaveToDisk("c:\A sample project.scp")
             
            'load the project from disk
            Dim project2 As Project = Project.LoadFromDisk("c:\A sample project.scp")
             
            Console.WriteLine(project2.FileName)
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.Deserialize(System.Int32,RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>Support for serialization.</summary>
            <returns><em>true</em> on success.</returns>
            <param name="versionId">The version of the project to be deserialized.</param>
            <param name="formatter">The formatter to read from.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.Serialize(RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>Support for serialization.</summary>
            <param name="formatter">The formatter to write to.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.LoadFromDisk(System.String)">
            <summary>Loads a project from disk.</summary>
            <returns>A Project object.</returns>
            <param name="fileName">The file name of the project.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.SaveToDisk(System.String)">
            <summary>
            Save the project to disk
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.CreateNew">
            <summary>Creates a new blank project.</summary>
            <returns>A new instance of class Project.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.ToString">
            <summary>Converts an instance of Project to a string.</summary>
            <returns>A string representation of the project details.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.ChangeSynchronizationDirection">
            <summary>Changes the direction in which changes are to be migrated.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.DoClone(RedGate.SQLCompare.Engine.Project)">
            <summary>
            Clones the current Project
            </summary>
            <param name="project"></param>
            <returns>The cloned project</returns>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Version">
            <summary>The current project version. Used for serialization.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Source1AsLiveDB">
            <summary>
            A convenience method for accessing the first data source as a live database,
            rather than casting explicitly in code.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Source2AsLiveDB">
            <summary>
            A convenience method for accessing the second data source as a live database,
            rather than casting explicitly in code.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Filter">
            <summary>Gets or sets SelectedFilters.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Name">
            <summary>The file name of a project, or "New Project".</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.FileName">
            <summary>The file name of the project.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.IsNewProject">
            <summary>Determines whether the project is a new project.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Dirty">
            <summary><em>True</em> if the project has been modified.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.DataSource1">
            <summary>The connection properties for the first data source.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.DataSource2">
            <summary>The connection properties for the second data source.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.LastCompared">
            <summary>The time at which the project was last compared.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.LastModified">
            <summary>The time at which the project was last compared.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.ComparisonOptions">
            <summary>Options used when running a comparison or synchronization on the project.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Direction">
            <summary>
            The direction in which changes are migrated when a synchronization is run on the
            project.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.UserNote">
            <summary>Gets or sets the user notes.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.SelectedSyncObjects">
            <summary>Gets or sets the ObjectSelectionUserActions.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.OwnerMappingUserActions">
            <summary>Gets or sets the OwnerMappingUserActions.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ProjectComparer">
            <summary>
            Compares two projects.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SynchronizationDirection">
            <summary>The direction of migration for synchronization.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SynchronizationDirection.From1To2">
            <summary>SQL scripts will migrate any changes in DataSource1 to DataSource2.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SynchronizationDirection.From2To1">
            <summary>SQL scripts will migrate any changes in DataSource2 to DataSource1.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Queue">
            <summary>A queue.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queue.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the queue with a specified queue.</summary>
            <returns><em>True</em> if the queues are identical; otherwise, <em>false</em>.</returns>
            <param name="targetObject">The queue to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queue.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ObjectType">
            <summary>Returns ObjectType.Queue</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.Name">
            <summary>The name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.Permissions">
            <summary>
            The permissions on this queue.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.IsSystemObject">
            <summary>
            Indicates whether the object in question is a system object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.MaxReaders">
            <summary>
            The maximum number of readers.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ExecuteAsType">
            <summary>
            The EXECUTE AS clause used for the object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the queue.
            This is a SQL Server 2005 feature only.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ActivationProcedure">
            <summary>
            The name of the activation stored procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ActivationEnabled">
            <summary>
            True if the activation is enabled.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ReceiveEnabled">
            <summary>True if the queue is <em>receive enabled</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.EnqueueEnabled">
            <summary>True if enqueue is enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.RetentionEnabled">
            <summary>
            True if retention is enabled.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.EventNotifications">
            <summary>
            The dependent event notifications.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.Services">
            <summary>
            The dependent services.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.FileGroup">
            <summary>
            The filegroup for the queue.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Queues">
            <summary>A collection of queues.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queues.SerializeItem(RedGate.SQLCompare.Engine.Queue,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queues.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource">
            <summary>
            Representation of a data source that takes its data from a backup of a
            database.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.#ctor">
            <summary>
            Constructs this object with an empty files list.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},RedGate.Shared.SQL.BackupReaderInterfaces.IBackupSet)">
            <summary>
            Constructs this object using the specified files.
            </summary>
            <param name="files">The files from which to construct this data source</param>
            <param name="passwords">The SQL Backup passwords (one for each file) that are used to access the data source</param>
            <param name="backupSet">The backup set with which to construct this data source</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.IsDifferentSource(RedGate.Shared.SQL.IDataSource)">
            <summary>
            Overridden. Compares the data source with a specified data source.
            </summary>
            <returns><em>true</em> if the data sources are different.</returns>
            <param name="newDataSource">The data source to compare.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.Clone">
            <summary>
            Overridden. Clones the data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.Deserialize(System.Int32,RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>
            Deserializes this data source. Note that the database information settings are serialized along with the
            data source.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.Serialize(RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>
            Serializes this data source. Note that the database information settings are serialized along with the
            data source.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.IsPasswordRequired(System.Collections.Generic.IList{System.String})">
            <summary>
            Returns true if the backup files need a password to be read, false otherwise.
            </summary>
            <param name="filePaths">A list of the files to open</param>
            <returns>true if the backup files need a password to be read, false otherwise</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.Files">
            <summary>
            The files that should be used as the source for the backup for this data
            source.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.Passwords">
            <summary>
            The SQL Backup passwords (one for each file) that are used to access the data
            source.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.IgnoreWrongPasswords">
            <summary>
            Tells the backup reader to ignore files with incorrect passwords
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.IsCaseSensitive">
            <summary>
            Whether the underlying database is case sensitive or not!
            </summary>
            <returns>true if case-sensitive, false otherwise</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.ServerName">
            <summary>Overridden. Gets the name of the SQL Server of the backup set.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.DatabaseName">
            <summary>
            Overridden. Gets the database name of the backup set.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.IsWriteable">
            <summary>
            Overridden. The data source cannot be written to. This property always returns
            <em>false.</em>
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.Version">
            <summary>
            Overridden. Gets the current serialized version number of BackupDatabaseSource.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.BackupSet">
            <summary>
            Gets or sets the BackupSet to be used in the backup file. If this is null the latest backup set will be used.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.LastServerName">
            <summary>
            Gets or sets the name of the SQL Server for the last backup set.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.LastDatabaseName">
            <summary>
            Gets or sets the name of the database for the last backup set.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDatabaseSource.IsValid">
            <summary>
            True if this snapshot represents a valid data source that can be used in comparison. If false, then
            there is a problem with the snapshot file - for example, it could not be found or is in the wrong
            format.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SQLBackupReaderLoadException">
            <summary>
            SQLBackupReaderLoadException
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SQLBackupReaderLoadException.#ctor">
            <summary>
            SQLBackupReaderLoadException
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SQLBackupReaderLoadException.#ctor(System.String)">
            <summary>
            SQLBackupReaderLoadException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SQLBackupReaderLoadException.#ctor(System.String,System.Exception)">
            <summary>
            SQLBackupReaderLoadException
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase">
            <summary>
            A SQL Server database represented by one or more backup sets.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.Dispose(System.Boolean)">
            <summary>Disposes of the object.</summary>
            <remarks>
            It is important to dispose of the object to delete any temporary files it
            uses.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.GetBackupSets(System.Collections.Generic.IList{System.String})">
            <summary>
            Retreives a list of backup sets from the given backup files. This
            operation is ICancellable.
            </summary>
            <param name="filePaths">A list of the files to open.</param>
            <returns>A list of the available backup sets in the given files.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.GetBackupSets(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Retreives a list of backup sets from the given backup files. This
            operation is ICancellable.
            </summary>
            <param name="filePaths">A list of the files to open.</param>
            <param name="passwords">A list of passwords for the files if this is an encrypted SQL Backup, String.Empty if password not needed for that file.</param>
            <returns>A list of the available backup sets in the given files.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.IsPasswordRequired(System.Collections.Generic.IList{System.String})">
            <summary>
            Returns true if the backup files need a password to be read, false otherwise.
            </summary>
            <param name="filePaths">A list of the files to open.</param>
            <returns>true if the backup files need a password to be read, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.CancelOperation">
            <summary>
            Cancels the current operation.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.Close">
            <summary>
            Closes the connection to the backup database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.BackupConnection">
            <summary>
            After registering a database this will contain the active connection to the backup database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.IgnoreWrongPasswords">
            <summary>
            Tells the backup reader to ignore files with incorrect passwords
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupView">
            <summary>
            The BackupView class is a simple object that just maps the 
            view (an integer representing the view to the internal system)
            to its rela name. Its main purpose is to automatically
            trigger the loading of dependent views, tables etc. such that
            when a statement is executed against it all pre-requisities are
            in place.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupView.#ctor(System.String,System.Int32)">
            <summary>
            Construct a new BackupView object
            </summary>
            <param name="viewName">The internal (SQL Lite) name of the view</param>
            <param name="viewType">The view's enum value (numbers correspond to 
            different views if working with SQL 2000 or SQL2005</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupView.ViewType">
            <summary>
            Get the ViewType
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupView.ViewName">
            <summary>
            Get the View Name
            This name *should* always be used to refer to the view
            in any sql statement. The actual value of the name is
            not guaranteed constant.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver">
            <summary>
            This class provides a common structure to communicate with the Backup via SQLLite irrespective 
            of the underlying backup data structure (2000,2005,2008 etc)
            The specific derivations of this class should *never* be instantiated directly - rather
            retrieved through the static function SqlNameResolver.GetNameResolver which will return an 
            appropriate resolve for the desired BackupVersion being used.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetTableName(System.Int32)">
            <summary>
            *ABSTRACT* Maps an integer representing the table to a TableName structure for loading.
            This function is not normally called by user code and is used internally to get real
            system table names as a precursor to loading them.
            </summary>
            <param name="table">An integer representing the table</param>
            <returns>A TableName structure (See BackupReader for full details)</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetSqlCmd(System.Int32)">
            <summary>
            *ABSTRACT* Get a string representing the CREATE VIEW script for the desired view.
            This function is not normally called by user code and is used internally to prepare
            views for first use after a user has requested access to a particular system view.
            </summary>
            <param name="view">The view requested</param>
            <throws>NotSupportedException if the integer does not represent a known view</throws>
            <returns>The SQLite compatiable CREATE View Script</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetDependentTables(System.String)">
            <summary>
            *ABSTRACT* Get a list of all the system tables that a script depends upon
            This function is not normally called by user code and is used internally to 
            load dependent tables for a script when a user has requested a view.
            </summary>
            <param name="sql">The SQL script to analyse</param>
            <returns>An integer list containing all the raw system tables that this script depends upon</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetViewName(System.Int32)">
            <summary>
            *ABSTRACT* Get the string that represents the internal name of the view
            within the SQLite database. The name is chosen to ensure it doesn't clash with
            internal SQLite views nor system tables already loaded. This function is not normally
            called by user code.
            </summary>
            <param name="view">The view desired</param>
            <throws>NotSupportedException is the integer does not represent a known view</throws>
            <returns>The View's internal name</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.USER_NAME(System.Int32)">
            <summary>
            *ABSTRACT* Get the user name for a user ID.
            </summary>
            <param name="uid">User ID</param>
            <returns>A string representing the user name or null if no user has that user id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.SCHEMA_NAME(System.Int32)">
            <summary>
            *ABSTRACT* Get the schema name for a schema id
            </summary>
            <param name="schemaid">Schema ID</param>
            <returns>A string representing the schema name or null if no schema has that id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.DB_NAME">
            <summary>
            *ABSTRACT* Gets the name of the Database that the backup represents
            </summary>
            <returns>The name of the database</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.SCHEMA_ID(System.String)">
            <summary>
            *ABSTRACT* Gets the schema id for a schema name
            </summary>
            <param name="schema">Schema Name</param>
            <returns>An integer representing the schema id or -1 if the schema id is not recognised.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.OBJECT_ID(System.String,System.Int32)">
            <summary>
            *ABSTRACT* Gets the object id for an object scoped in a schema
            </summary>
            <param name="objectName">The name of the object</param>
            <param name="schemaid">Schema ID </param>
            <returns>The object id or null if the object isn't recognised</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetCollationForId(System.Int32)">
             <summary>
             Translates a CollationID into a string representation of the Collation
             
             The collationID has 32 bits: (Each of the characters below represent 1 Bit)
             
             SQL2000
             
             HHHHHHHH-------PPPPPP----LLLLLL
             
             SQL2005
             
             HHHHHHHH-------PPPPPPP--LLLLLLL
             
             where 
             H are the High Bits - for special and compatiability collations
             P are the Property Bits - sets case sensitivity etc
             L are the Language Bits - sets the language of the collation.
             - Are uninteresting bits
             
             if High bits not set
             
             Then resulting collation ID is
             
             Language_[prop_bits]
             
             Prop Bits AND 1 = _BIN2 (SQL Server 2005) - other bits values don't matter
             Prop Bits AND 32 = _BIN - other bits values don't matter
             
             The remaining prop bits read from right to left 
            
                     P   P   P   P
             Set             _AI _CI
             Unset   _WS _KS _AS _CS
             
             If High Bits set
             
             Return the collation string if special collation
             
             Otherwise if High Bits has specific values
             30-34 etc (See below)
             
             Compatiability_[high_bits]_[lang_code]_[prop_code] - the steps to produce these values is show above
             
             </summary>
             <param name="id">The collationID</param>
             <returns>A string representation of the Collation or null if there is no representation.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.#ctor(RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews)">
            <summary>
            Construct a new SqlNameResolver
            </summary>
            <param name="backupViews">The backupViews that the SQLLite statements will be executed against</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetNameResolver(RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews,RedGate.Shared.SQL.Server.SQLVersion)">
            <summary>
            Get the SQLNameResolver the desired version of SQL Server
            </summary>
            <param name="backupViews">The backupViews that the SQLLite statements will be executed against</param>
            <param name="version">The version of the SQL Server that is being requested</param>
            <returns>A SQLNameResolver or IndexOutOfBoundsException if the version doesn't correspond to a 
            Name resolver.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.Clear">
            <summary>
            Clear the name resolver cache to allow recomparison
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.StartTransaction">
            <summary>
            Start a trnsaction against SQLite. SQLite does not support multiple/nested transactions
            If this function is executed multiple times against the same backup view the Transaction
            will only be started once.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.Commit">
            <summary>
            Commit a SQLite transaction
            Multiple SQLite transactions cannot exist and they cannot be nested - executing this function
            multiple times will cause the active transaction to be commited and then do no further work.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.DBVersion">
            <summary>
            Get the SQL Server version that this SQLNameResolver corresponds to
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews">
            <summary>
            A class that provides access to a single Backup 
            by allowing access to all the system tables and views.
            The class performs delay loading for all non essential system tables 
            and ensures that when a view/table is requested all depedent objects
            are loaded in advance.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.#ctor(RedGate.Shared.SQL.Server.SQLVersion,RedGate.Shared.SQL.Server.SQLVersion,RedGate.Shared.SQL.BackupReaderInterfaces.IBackupConnection)">
            <summary>
            Create a new BackupViews object for a particular BackupConnection.
            </summary>
            <param name="majorVersion">The SQL Server version of the backup</param>
            <param name="compatVersion">SQL Server Compatibility Version</param>
            <param name="conn">The connection to the backup</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.USER_NAME(System.Int32)">
            <summary>
            Get the user name for a user ID.
            </summary>
            <param name="uid">User ID</param>
            <returns>A string representing the user name or null if no user has that user id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.SCHEMA_NAME(System.Int32)">
            <summary>
            *ABSTRACT* Get the schema name for a schema id
            </summary>
            <param name="schemaid">Schema ID</param>
            <returns>A string representing the schema name or null if no schema has that id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.DB_NAME">
            <summary>
            *ABSTRACT* Gets the name of the Database that the backup represents
            </summary>
            <returns>The name of the database</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.SCHEMA_ID(System.String)">
            <summary>
            *ABSTRACT* Gets the schema id for a schema name
            </summary>
            <param name="schema">Schema Name</param>
            <returns>An integer representing the schema id or -1 if the schema id is not recognised.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.OBJECT_ID(System.String,System.Int32)">
            <summary>
            *ABSTRACT* Gets the object id for an object scoped in a schema
            </summary>
            <param name="objectName">The name of the object</param>
            <param name="schemaid">Schema ID </param>
            <returns>The object id or null if the object isn't recognised</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.GetCollationForId(System.Int32)">
            <summary>
            Get a string representation of the CollationID
            </summary>
            <param name="id">The collationID</param>
            <returns>A string representation of the collation or null if no representation exists</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.GetCommand">
            <summary>
            Get a command object against the underlying SQLite database - this
            can be used to execute arbitary statements against the System Table and View
            stores. Any views or tables referenced should be referenced through the 
            functions of BackupViews to ensure all prequsite work has been carried out.
            </summary>
            <returns>The commmand</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.SetTableLoaded(System.Int32,System.Boolean)">
            <summary>
            Forces a system table to be flagged as loaded - this should only be used
            in exceptional cases as it will prevent the delay loading system from 
            loading any dependendencies when this table is referenced.
            </summary>
            <param name="systemTable">An integer representing the system table</param>
            <param name="loaded">true - table loaded, false - table needs loaded</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.CreateIndexOnTable(System.Int32,System.String[])">
            <summary>
            Create an index on the table specified for the columns supplied.
            If this index already exists or the table is not loaded the
            function will fail silently.
            </summary>
            <param name="tab">The table on  which to create the index</param>
            <param name="columns">The array of columns on which to base the index</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.EnsureTableLoaded(System.Int32)">
            <summary>
            Loads a system table from the BackupReader into the SQLite Database
            If the table is already loaded the function will fail silently.
            </summary>
            <param name="systemTable">An integer representing the system table to be loaded.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.GetView(System.Int32)">
            <summary>
            Get an object representing the desired view.
            This function should always be called to access any view on the SQLite Table
            as it will cause the loading of any dependent views/system tables before it
            returns thus ensuring the underlying database is in a good state.
            </summary>
            <param name="viewWanted"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.TransactionInProgress">
            <summary>
            Gets/Sets whether a SQLite connection is in progress.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.Connection">
            <summary>
            Gets the BackupConnection
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.State">
            <summary>
            Returns the underlying ConnectionState of the BackupConnection object
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.MajorVersion">
            <summary>
            Gets the MajorVersion (Equivalent to the version of the database upon which
            the backup has been done upon)
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.CompatibilityVersion">
            <summary>
            Gets the MajorVersion (Equivalent to the version of the database upon which
            the backup was originally done upon)
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.DatabaseGuid">
            <summary>
            Gets the Database GUID for decryption in SQL Server 2K
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseCaseCheckObject">
            <summary>
            Retrieve the global collation for the Database.
            The global collation is read by the Backup Reader into a "special" SQL Compare
            only table which is retrieved here.
            This "special" table is also used by Full Text Enabled and has the potential to be used 
            for any database properties that are stored in the underlying table of
            sys.databases
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBBindableComponent">
            <summary>
            Wraps the GetTheValue call in an exception handler - returns null as the object if
            the exception handler is hit.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCBindableBase">
            <summary>
            For most purposes the class SCBindableBase provides enough flexibility
            and so classes that represent objects should derive from it rather than implement
            IBindable directly
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.IBindable">
            <summary>
             The Interface that represents individual objects - e.g. a Permission, Table, View etc.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.IBindable.Bind(RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Binds the object using the table definition into the dictionary - the
            values from this object can now be retrieved from the dictionary.
            </summary>
            <param name="tblDefn">The link between the world view and the internal view</param>
            <param name="dict">The output dictionary - each key is an output param, each value is the data</param>
            <returns>true if the object should be presenting to the world, false otherwise</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.IBindable.GetValue(System.String,RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition,System.Boolean@)">
            <summary>
            Gets the value specified by the property name
            </summary>
            <param name="propertyName">Name of the property to retrieve</param>
            <param name="tblDefn">The link between the world view and the internal view</param>
            <param name="saveMe">true the object should be saved, false the object should be discarded before an external viewer can access it</param>
            <returns>the object associated with the propertyName</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SCBindableBase.RedGate#SQLCompare#Engine#ReadFromBackup#IBindable#Bind(RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Perform the Binding. This implementation supports dynamic binding through ITSCFunction.
            </summary>
            <param name="tblDefn">The link between the world view and the internal view</param>
            <param name="dict">The output dictionary - each key is an output param, each value is the data</param>
            <returns>true if the object should be presenting to the world, false otherwise</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.IGetValue">
            <summary>
            An inner GetValue interface that requires no knowledge of Table Definitions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.IGetValue.GetTheValue(System.String,System.Boolean@)">
            <summary>
            Returns the object associated with the property name
            </summary>
            <param name="propertyName">Name of the property to retrieve</param>
            <param name="save">true the object should be saved, false the object should be discarded before an external viewer can access it</param>
            <returns>the object associated with the propertyName</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBBindableComponent.GetTheValue(System.String,System.Boolean@)">
            <summary>
            Returns the object associated with the property name
            </summary>
            <param name="propertyName">Name of the property to retrieve</param>
            <param name="save">true the object should be saved, false the object should be discarded before an external viewer can access it</param>
            <returns>the object associated with the propertyName</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBBindableComponent.GetValue(System.String,RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition,System.Boolean@)">
            <summary>
            Gets the value specified by the property name
            </summary>
            <param name="propertyName">Name of the property to retrieve</param>
            <param name="tblDefn">The link between the world view and the internal view</param>
            <param name="saveMe">true the object should be saved, false the object should be discarded before an external viewer can access it</param>
            <returns>the object associated with the propertyName</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCSingleObjectQueryer">
            <summary>
            A special implementation of the queryer interface for cases where there is only
            a single object going to be returned from the Query. (e.g. CaseCheck) In this case,
            this abstract class implements the Queryer's functions, the Enumerator's functions and 
            the Enumerables functions. A deriving class need only provide an object of 
            SCCTBBindableComponent and a TableDefinition to complete the implementation.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBComponentQueryer">
            <summary>
            The root class for Queryers - a queryer retrieves all the desired objects for
            a particular type. EG the Queryer for XMLSchemaCollection retrives all the XMLSchemaCollection
            objects within a particular database. Normally it will not be necessary to 
            derive a class directly from SCCTBComponentQueryer but for maximum flexibility it
            is possible to.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBComponentQueryer.EnumObjects">
            <summary>
            Get an enumeration that allows the caller to iterate through each object that
            is desired to be retrieved.
            </summary>
            <returns>An IEnumerable interface</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBComponentQueryer.GetSpecialReader(RedGate.SQLCompare.Engine.DatabaseHelperResultSet)">
            <summary>
            A blank implementation of GetSpecialReader - if a derived class
            needs to deal with Variants this method should be overriden.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBComponentQueryer.TableDefinition">
            <summary>
            Retrieve the TableDefinition for this Queryer - a TableDefinition describes
            the form of the World View (Data type etc) and how it maps to an Internal World
            View
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.ISCEnumerable">
            <summary>
            An interface that provides useful functions for IEnumerable
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseCaseCheckQueryer.TableDefinition">
            <summary>
            Get the Table Definition of the CaseCheck
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.ITypeMapper">
            <summary>
            This interface gets a C# type for each Xtype (SQL Server internal system type identifier)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.ITypeMapper.GetType(System.Int32)">
            <summary>
            Return the C# type for the SQL Server System Type
            </summary>
            <param name="xtype">SQL Server System Type</param>
            <returns>A C# Tytpe Object</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.DBTypes">
            <summary>
            Types that are supported by TableDefinitions - these types will be
            implicitly created if possible if SQLite returns a value that due to 
            weak typing isn't what was expected - for example int will be converted to
            a byte if the world view requested a byte and an int was returned from SQLite.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents">
            <summary>
            The TableDefinitionComponents object represents a single
            world view field and how it relates to the internal data
            A TableDefinitionComponents object may map directly to a SQLite
            field or it may map to a number of SQLite fields that are 
            processed to form a new value, either by a user defined function
            that implements ITCFunction or by FuncCoalesce
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.#ctor(System.String,RedGate.SQLCompare.Engine.ReadFromBackup.DBTypes,System.Int32,System.String)">
            <summary>
            Construct a direct mapping TableDefinitionComponent that maps 1 world view entry to one internal name
            which will be the method GetTheValue in the object this is being called upon - this ususally corresponds
            to a single property of a class or a single field in a SQLite result set
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="internalName"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.#ctor(System.String,RedGate.SQLCompare.Engine.ReadFromBackup.DBTypes,System.Int32,System.String[],RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.TDCFuncs)">
            <summary>
            Construct a one to many mapping TableDefintionComponents object that maps a set of internal names
            (multiple field from a SQLite result set or multiple property from an object) to a single world
            view field using the inbuilt function indicated.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="internalNames"></param>
            <param name="func"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.#ctor(System.String,RedGate.SQLCompare.Engine.ReadFromBackup.DBTypes,System.Int32,System.String[],RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.ITCFunction)">
            <summary>
            Construct a one to many mapping TableDefintionComponents object that maps a set of internal names
            (multiple field from a SQLite result set or multiple property from an object) to a single world
            view field using the user definied function provided (The user defined function is implemented using
            the interface ITCSFunction).
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="internalNames"></param>
            <param name="func"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.ITCFunction">
            <summary>
            This interface provides a method to associate custom mapping behaviour
            to a TableDefinitionComponents
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.ITCFunction.GetValue(RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents,System.Object[],System.Boolean@)">
            <summary>
            A re-entrant function that is called once per row in the SQLite database
            </summary>
            <param name="tdc">The table definition components object that provides information about the field this function is linked to.</param>
            <param name="args">Supporting information required for the mapping - e.g. if getting an object name this would be the object id.</param>
            <param name="saveMe">An out parameter indicating whether the object should be presented to the world or discarded.</param>
            <returns>The object representing the value of this cell to the World</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition">
            <summary>
            Represents a set of TableDefinitionComponents that comprise an entire
            World View object
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition.PopulateColumnNames(System.String[])">
            <summary>
            Populate column names from an Array
            </summary>
            <param name="rgstr">Array of column names</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition.PopulateColumnNames(RedGate.SQLCompare.Engine.DatabaseHelperResultSet)">
            <summary>
            Populate column names from a reader
            </summary>
            <param name="reader">The reader</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetQueryer">
            <summary>
            A class that wraps a SCCTBComponentQueryer to make it look like
            a bona fide ResultSet which is then passed to the world. 
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetQueryer.NewInstance(RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBComponentQueryer)">
            <summary>
            Create a new ResultSet to wrap a queryer object
            </summary>
            <param name="queryer">The queryer object to wrap</param>
            <returns>A new result set</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperTypeMapper">
            <summary>
            The purpose of this queryer is to handle variant data fields.
            Every variant has an associated intrinsic type that is stored in
            a parallel column created by the backup reader when it parses the system table.
            This parallel column is used to find out the true type of the variant for 
            a particular cell so that variant's byte representation can be converted 
            into a useful representation for presentation to the world.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperTypeMapper.NewInstance(RedGate.SQLCompare.Engine.DatabaseHelperResultSet,System.String[],System.String[],RedGate.SQLCompare.Engine.ReadFromBackup.ITypeMapper)">
            <summary>
            Construct a new type mapping reader
            </summary>
            <param name="reader">The reader from which the raw values are to be extracted.</param>
            <param name="paramsColumns">The name of the columns that provide the data to convert</param>
            <param name="typeColumns">The name of the columns that provide the type of the columns specified in param columns</param>
            <param name="typeMapper">A type mapper that describes the destination types</param>
            <returns>A new reader</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe">
            <summary>
            The purpose of this queryer is to circumvent the loosly-typed
            nature of SQLite by forcably trying to convert the output types
            to those specified by the TableDefinition
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.NewInstance(System.Collections.Generic.IList{RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition.STableDefinitionComponents},RedGate.SQLCompare.Engine.DatabaseHelperResultSet)">
            <summary>
            Create a new result set that handles the conversion of the results from SQLite
            into types compatiable with the TableDefinition's view.
            </summary>
            <param name="unsafeTabComp">Destination types</param>
            <param name="reader">A reader from which the raw representation will be read</param>
            <returns>The new reader</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleShortSafely(System.Object)">
            <summary>
            Convert the incoming object to a short
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleDoubleSafely(System.Object)">
            <summary>
            Convert the incoming object to a double
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleStringSafely(System.Object)">
            <summary>
            Convert the incoming object to a string
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleBoolSafely(System.Object)">
            <summary>
            Convert the incoming object to a bool
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleDateSafely(System.Object)">
            <summary>
            Convert the incoming object to a date
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleGuidSafely(System.Object)">
            <summary>
            Convert the incoming object to a guid
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleIntSafely(System.Object)">
            <summary>
            Convert the incoming object to an int
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleByteSafely(System.Object)">
            <summary>
            Convert the incoming object to a byte
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCEnumerator">
            <summary>
            An enumerator class - normally it is possible to use this
            class without resorting to implementing the methods on
            IEnumerator&lt;IBindable&gt; It provides a method to
            access ISCEnumerable.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCKeyInfo">
            <summary>
            Equivalent to SQL Server CKeyInfo struct. Not all fields are populated at the moment - 
            if they aren't required, I've omitted them to speed things up a bit.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCUserPopulator">
            <summary>
            All of the Simple Population Functions implement ISCSimplePopulator 
            which only requires a string form of the SQL to be executed and a TableDefinition 
            object that defines the mapping between external name (that which be accessed from
            the Population Engine of SQL Compare) and the internal name that is used to represent
            the data being retrieved from the SQL Statement being returned from the implementation
            of the "Sql" poperty. In most cases the internal and external names will be identical
            but when there is a translation that has to be done (for example coalescing two results 
            into a single result) the TableDefinition will be furnised with information on how
            to perform such work. A user defined function pointer can be supplied to do any work 
            more complicated than this. The TableDefinition object also specifies the type of data
            that will be returned and its datasize (although SQLite doesn't enforce data width 
            constraints)
            
            The Sql Property will, by reference to the backupViews .GetView function cause the
            loading of all views/system tables that it depends on.
            
            All of the implementation's sql is as near as possible identical to the SQL used by the 
            live DB - the only modifications that have been made are to remove syntax that isn't supported
            by SQL Lite (e.g. system functions) and re-express it. In the examples where there is an
            undocumented system function I have tried to observe its behaviour to work out what data it
            is dependent upon.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SC2000UserPopulator">
            <summary>
            All of the Simple Population Functions implement ISCSimplePopulator 
            which only requires a string form of the SQL to be executed and a TableDefinition 
            object that defines the mapping between external name (that which be accessed from
            the Population Engine of SQL Compare) and the internal name that is used to represent
            the data being retrieved from the SQL Statement being returned from the implementation
            of the "Sql" poperty. In most cases the internal and external names will be identical
            but when there is a translation that has to be done (for example coalescing two results 
            into a single result) the TableDefinition will be furnised with information on how
            to perform such work. A user defined function pointer can be supplied to do any work 
            more complicated than this. The TableDefinition object also specifies the type of data
            that will be returned and its datasize (although SQLite doesn't enforce data width 
            constraints)
            
            The Sql Property will, by reference to the backupViews .GetView function cause the
            loading of all views/system tables that it depends on.
            
            All of the implementation's sql is as near as possible identical to the SQL used by the 
            live DB - the only modifications that have been made are to remove syntax that isn't supported
            by SQL Lite (e.g. system functions) and re-express it. In the examples where there is an
            undocumented system function I have tried to observe its behaviour to work out what data it
            is dependent upon.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViewTypesSql2005">
            <summary>
            An enumeration representing all the supported SqlServer 2005 System Views.
            The general naming convention is that sys.view_name in SS2005 becomes 
            ViewName in this enumeration.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSystemTableSql2005">
            <summary>
            The underlying system tables and lookup tables for SS2005.
            The underlying sytsem tables map directly to a table
            populated by the backup reader into SQLite - the lookup tables
            are populated in C# from other tables and generally contain 
            information that is too complicated to be expressed directly as
            SQLite SQL Command.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.s_SystemTableNamesSQL2005">
            <summary>
            A mapping from the BackupSystemTableSql2005 to the system table's
            real name or the name of the calculated lookup table.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.#ctor(RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews)">
            <summary>
            Construct a new Sql2005NameResolver
            This is not used by user code.
            </summary>
            <param name="backupViews">The backupView to execute the SQLite commands against</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateFTILookupTable">
            <summary>
            Populate the FullTextIndexLookupTable
            
            Constructs a lookup table containing the rows
            1,0
            2,M
            3,x
            4,A
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateAssemblyTypeMetaData">
            <summary>
            Populate the AssemblyTypeMetaData LookupTable
            
            This concatenates with a comma the class_name and assembly_meta_data retrieved from
            the system tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateAssemblyMetaData">
            <summary>
            Populate the Assembly Meta Data Table.
            
            The binary representation of a clr assembly is loaded
            directly into the database and consists of a direct copy of the PE
            file. The live DB allows the retrieval of the full name of the assembly
            but this cannot be achieved without passing it through C# and 
            calling the method FullName after loading the assembly.
            
            This lookup table allows the retrieval of the assemblies full name
            through SQLite.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateIDColsLookup">
            <summary>
            Populate the ID Cols Lookup Table
            
            The identity, seed and last_value fields of syscolpars
            are stored as a binary value called idtval.
            
            To break this value requires c#
            
            Although the idtval can be a variable length of bytes (so far 13,25,61 bytes)
            have been observed the general pattern is that the low byte is a status code (value unknown)
            and the remaining n bytes divide into 3 equal portions with the first third (from left) the last_value,
            second third the increment and the third third the seed.
            
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateSysPalValues">
            <summary>
            Populate the SysPalValues table
            
            This is populated from the data in SysPals.cs
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateSysPalNames">
            <summary>
            Populate the SysPalNames table
            
            This is populated from the data in SysPals.cs
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.GetTableName(System.Int32)">
            <summary>
            Get the Table Name of a System Table
            </summary>
            <param name="tableSql2005">A value from BackupSystemTablesSql2005</param>
            <returns>A TableName object encapsulating the name of the table</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.SCHEMA_NAME(System.Int32)">
            <summary>
            Get the schema name for a schema id
            </summary>
            <param name="schemaid">Schema ID</param>
            <returns>A string representing the schema name or null if no schema has that id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.DB_NAME">
            <summary>
            Gets the name of the Database that the backup represents
            </summary>
            <returns>The name of the database</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.SCHEMA_ID(System.String)">
            <summary>
            Gets the schema id for a schema name
            </summary>
            <param name="schema">Schema Name</param>
            <returns>An integer representing the schema id or -1 if the schema id is not recognised.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.OBJECT_ID(System.String,System.Int32)">
            <summary>
            Gets the object id for an object scoped in a schema
            </summary>
            <param name="objectName">The name of the object</param>
            <param name="schemaid">Schema ID </param>
            <returns>The object id or null if the object isn't recognised</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.USER_NAME(System.Int32)">
            <summary>
            Get the user name for a user ID.
            </summary>
            <param name="uid">User ID</param>
            <returns>A string representing the user name or null if no user has that user id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.GetViewName(System.Int32)">
            <summary>
            Gets the real name of the view in the SQLite Database
            The actual value of this name is not guaranteed and 
            this function should not be used to retrieve the name for
            external callers - instead the view should be retrieved through
            GetView which not only provides the name it also ensure dependent tables
            are loaded as well.
            </summary>
            <param name="view">A value from the BackupViewTypesSql2005 enumeration</param>
            <returns>The viewnname of will throw NotSupportedException if the argument doesn't represent a
            reocognised view.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateSynonymsTable">
             <summary>
             Populate the Synonyms Lookup Table
             
             The table needs to be populated with the object id of the object being referenced not
             just the name of the object. The name of the object is in the form of [db].[schema].[object_name]
            
             If the object being referenced is in a different database the new row in the Synonyms table
             is set to null (the backups don't span multiple DB), otherwise the objects_id is looked up using
             the schema name and the object name.
             </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateUsersTable">
            <summary>
            Populate the Users Lookup Table.
            
            This table was too complicated to be expressed directly in SQLite logic
            It is a C# implementation of the results of sp_helptext 'sys.users'
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.GetSqlCmd(System.Int32)">
            <summary>
            This function returns the SQLite SQL representation of a SS2005 View.
            
            All the views depends on system tables - either as a requirement or
            optionally to provide further textual information - this is denoted by
            the table name being in curly brackets ({})
            
            Where a mask is used the numeric values are converted to decimal since
            it doesn't appear that SQLite supports hex values in form 0x
            
            Furthermore all convert or sysconv function calls in the SS2005 text can
            be removed as SQLite is loosely typed and doesn't discriminate between
            the different integer / text types.
            
            The source SS2005 SQL is included with an explanation of how the 
            conversion to SQLite SQL was performed.
            </summary>
            <param name="view">The view to retrive</param>
            <throws>NotSupportedException if the view wasn't recognised.</throws>
            <returns>SQLite SQL</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType">
            <summary>
            The different types of messages the parser can produce.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType.InvalidSyntax">
            <summary>
            Invalid syntax was found; one or more statements were ignored.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType.IgnoredStatement">
            <summary>
            A non-schema statement was ignored.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType.IfClauseTakenAsTrue">
            <summary>
            An IF clause was assumed to evaluate as true.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType.ReferenceNotFound">
            <summary>
            An object referenced by a subsidiary object was not found.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage">
            <summary>
            Represents an informative message generated during parsing.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.HasErrorString(RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType)">
            <summary>
            Returns true if the specified <see cref="T:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType"/> has a non-null <see cref="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.ErrorString"/>
            in it's messages.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.Type">
            <summary>
            The type of parser message.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.File">
            <summary>
            The file being parsed at the time.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.LineNumber">
            <summary>
            The line number containing the text that caused the message.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.LineText">
            <summary>
            The line of text in which the error occured.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.ErrorString">
            <summary>
            The specific text that caused the parser message. Whether a particular message type has an associated string
            can be determined using <see cref="M:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.HasErrorString(RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType)"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory">
            <summary>
            Summary description for DatabaseFromFolderFactory.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.#ctor(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation)">
            <summary>
            Constructs a DatabaseFromFolderFactory for a specific database.
            </summary>
            <param name="database">The database that is to be populated from a set of
            creation script files.</param>
            <param name="dbinfo">Information about the database, such as default collations and 
            database version.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ProcessTriggersAndTheirParents">
            <summary>
            assign the triggers to their tables or views 
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ProcessUdtsForFieldsAndParameters">
            <summary>
            Checks fields and parameters and sets udt properties as well as adds dependencies.
            Prerequisite: default bindings!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ProcessUdtsGetUdt(System.String,System.String)">
            <summary>
            Resolves a user defiend type based on its name
            </summary>
            <param name="typeOwner"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ProcessDefaultAndRuleBindings">
            <summary>
            Postprocesses default bindings. 
            Prerequisites: Defaults, User Defined Types, Tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ProcessFulltextTables">
            <summary>
            Postprocesses fulltext tables. 
            Prerequisites: tables, fulltext catalogs
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ProcessFulltextColumns">
            <summary>
            Postprocesses fulltext columns 2k. 
            Prerequisites: tables, fulltext catalogs, fulltext tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ProcessRoleMembers">
            <summary>
            Postprocesses role members. 
            Prerequisites: Defaults, Users, Roles
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ProcessTriggerOrder">
            <summary>
            Postprocesses role members. 
            Prerequisites: table triggers
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ProcessExtendedProperties">
            <summary>
            Prerequisite: queues; event notifications, ... most of the objects plust their patch up.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ProcessIndices">
            <summary>
            Need view columns!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.RewriteConstraintText(System.String,System.Boolean)">
            <summary>
            Rewrites constraint texts (defaults, computed columns, etc) to match the rewrite
            style of SQL Server (note that 2000 and 2005 have different rewrite rules)
            </summary>
            <param name="text1"></param>
            <returns></returns>
            <param name="ss2k5"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.TraverseSSParsedExpression(System.Text.StringBuilder,antlr.collections.AST,System.Boolean,System.Boolean)">
            <summary>
            This traverses AST nodes, and write to the stringbuilder parameter the corresponding expression
            text. It also differentiates between SS2k and SS2k5
            </summary>
            <param name="sb"></param>
            <param name="e"></param>
            <param name="processSiblings">Process siblings. Use no if e.g. processing individual parameters.</param>
            <param name="ss2k5">True, if we need SQL Server 2005 formatting.</param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory.ParserMessages">
            <summary>
            The list of parser messages generated while parsing the scripts folder
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver">
            <summary>
            Resolver class for the AST parser.
            </summary>
            <excludetoc/>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.#ctor(RedGate.SQLCompare.Engine.Database)">
            <summary>
            
            </summary>
            <param name="database"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ColumnsInObject(RedGate.SQLCompare.ASTParser.Resolvers.ISqlObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ObjectForName(RedGate.SQLCompare.ASTParser.Syntax.Element,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="schema"></param>
            <param name="name"></param>
            <param name="server"></param>
            <param name="database"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ResolveSchemaScopedObjectFromCategory``1(RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.Engine.SerializableCollection{``0},System.String,System.String)">
            <summary>
            Tries to resolve a schema object based on its name and owner.
            If the owner is not specified, it first tries to look at
            the owner hint. If this is not successful, it checks dbo as owner. If this does 
            not help either, then we return null.
            </summary>
            <param name="category"></param>
            <param name="fullName"></param>
            <param name="sqlTypeHint"></param>
            <param name="name"></param>
            <param name="objectCollection"></param>
            <param name="ownerHint"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ResolveTrigger(System.String,System.String,System.String,System.String)">
            <summary>
            Tries to resolve a schema object based on its name and owner.
            If the owner is not specified, it first tries to look at
            the owner hint. If this is not successful, it checks dbo as owner. If this does 
            not help either, then we return null.
            </summary>
            <param name="fullName"></param>
            <param name="name"></param>
            <param name="ownerHint"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.FindTriggerInCollection(System.String,System.String,RedGate.SQLCompare.Engine.Triggers)">
            <summary>
            Finds a trigger in the Triggers collection.
            </summary>
            <param name="schema"></param>
            <param name="triggerName"></param>
            <param name="triggers"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ResolveDBScopedObjectFromCategory``1(RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.Engine.SerializableCollection{``0})">
            <summary>
            Tries to resolve a schema object based on its name and owner.
            If the owner is not specified, it first tries to look at
            the owner hint. If this is not successful, it checks dbo as owner. If this does 
            not help either, then we return null.
            </summary>
            <param name="category"></param>
            <param name="fullName"></param>
            <param name="sqlTypeHint"></param>
            <param name="name"></param>
            <param name="objectCollection"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.Database">
            <summary>
            Access to the database object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ResolveSystemObjects">
            <summary>
            If set to true then system objects are also resolved (note that for that the database
            must be populated with system objects).
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors">
            <summary>
            A set of flags indicating warnings and errors that can occur while setting up a read from folder data source
            </summary>
            <remarks>
            Note that these flags include both errors and warnings. In order to check only for errors, perform
            a logical AND with the Error mask.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.OK">
            <summary>
            Indicates that there are no errors or warnings
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.Error">
            <summary>
            Mask of all the possible errors that can occur
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.PathNotFound">
            <summary>
            Indicates that the path to the folder could not be found, so the database information file could not be loaded
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.Unauthorized">
            <summary>
            Indicates that an unauthorized access exception occurred while trying to load the information file
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.NotSupported">
            <summary>
            Indicates that a NotSupportedException occurred while trying to load the information file
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.IOException">
            <summary>
            Indicates that an IOException occurred while trying to load the information file
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.NeedsRefresh">
            <summary>
            Indicates that RefreshFromPath() needs to be called on this object to make it valid
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.Warnings">
            <summary>
            Mask of all the possible warnings that can occur
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.UnsupportedSqlServerVersion">
            <summary>
            Indicates that the database information file sets an unsupported SQL server version (so we picked SQL Server
            2000 arbitrarily)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.DatabaseInformationBadFormat">
            <summary>
            Indicates that the database information file has a bad format (not XML or malformed XML), so we're using
            the defaults
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.DatabaseInformationNotFound">
            <summary>
            Minor warning: no database information file was found, so we're using the defaults
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.DatabaseInformationPartialFile">
            <summary>
            Minor warning: the file was found and loaded, but some settings were missing so the defaults were
            chosen instead.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource">
            <summary>
            Representation of a data source that will take its data from a series of scripts in a folder.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.#ctor">
            <summary>
            Constructs this object with an empty path for the folder.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation)">
            <summary>
            Constructs this object with an empty path for the folder and specific settings for the folder
            information.
            </summary>
            <param name="information">The database information. This should not be null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.#ctor(System.String)">
            <summary>
            Constructs this object using the specified folder. If a SqlCompareDatabaseInfo.xml file exists in the
            specified directory, then this will be parsed to fill in the values in the Information object.
            </summary>
            <param name="folder">The folder to construct this datasource from</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.#ctor(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation)">
            <summary>
            Constructs a data source that will read from a specific folder, and optionally override the server information. 
            </summary>
            <param name="folder">The folder to read scripts from</param>
            <param name="information">The database information. If null, then the script directory will be checked
            for a settings XML file.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.IsDifferentSource(RedGate.Shared.SQL.IDataSource)">
            <summary>Compares the data source with a specified data source.</summary>
            <returns><em>true</em> if the data sources are different.</returns>
            <param name="newDataSource">The data source to compare.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.Clone">
            <summary>Clones the data source.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.Deserialize(System.Int32,RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>
            Deserializes this data source. Note that the database information settings are serialized with the
            data source.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.Serialize(RedGate.Shared.Utils.IO.Serialization.ISerializeFormatter)">
            <summary>
            Serializes this data source. Note that the database information settings are serialized with the
            data source.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.GetXmlFromInformation(RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation)">
            <summary>
            Given a database information object, returns an XML file that represents it.
            </summary>
            <param name="info">The database information object.</param>
            <returns>An XML file that represents the database information object.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.GetInformationFromXmlFile(System.IO.TextReader,RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors@)">
            <summary>
            Given a TextReader for an XML file, returns a database information object.
            </summary>
            <param name="file">A TextReader for an XML file representing database metadata.</param>
            <param name="errors">Changed on output to indicate any errors or warnings that might have occurred while
            the file was loaded.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.RefreshFromPath">
            <summary>
            Refreshes the database information for this folder, and sets the Errors property.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.RefreshDatabaseInformation">
            <summary>
            Refreshes the database information for this folder
            </summary>
            <returns>
            A set of flags indicating any errors that occurred during deserialization. The information object is left
            untouched if the file could not be read successfully.
            </returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.Path">
            <summary>
            The path for the folder to be used as the source for the scripts making up this data source.
            </summary>
            <remarks>
            Call RefreshFromPath after setting this value in order to cause this object to update itself with information
            from the specified path. Refreshing can be a lengthy process if the path refers to a network location.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.DatabaseInformation">
            <summary>
            Extra information that would normally be stored in the database that needs to be retrieved from an
            alternative source. The preferred method is the SqlCompareDatabaseInfo.xml script stored in the folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.ServerName">
            <summary>Gets or sets the name of the SQL Server.</summary>
            <remarks>
            Scripts folders are not associated with any SQL Server, so this value is not meaningful. By default
            it is 'Scripts', but it can be changed.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.DatabaseName">
            <summary>Gets or sets the name of the SQL Server database.</summary>
            <remarks>
            Scripts folders are not associated with any SQL Server, so this value is not meaningful. By default
            it is derived from the path name.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.IsWriteable">
            <summary>The data source can be written to.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.Version">
            <summary>Gets the current serialized version number of the snapshot.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.FolderDataSource.Errors">
            <summary>
            Returns the errors that occurred last time the database 
            metadata for this data source was loaded.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromFileAnalysisDelegate">
            <summary>
            Summary description for ReadFromFileAnalysisDelegate.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromFileAnalysisDelegate.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromFolderFactory,System.IO.FileInfo)">
            <summary>
            Constructor
            </summary>
            <param name="factory"></param>
            <param name="fileInfo"></param>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation">
            <summary>
            Options and settings that control how the creation SQL files are loaded and processed.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation.#ctor">
            <summary>
            Constructs a new ReadFromScriptDatabaseInformation object.
            By default it initializes itself with values that represent a SQL Server 2005 database
            with Latin1_General_CS_AS collation.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation.Equals(RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation)">
            <summary>
            Determines whether the two ReadFromScriptDatabaseInformation instances are equal.
            </summary>
            <param name="other">The ReadFromScriptDatabaseInformation to compare with.</param>
            <returns>True if the two instances are equal.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation.ForceWriteOut">
            <summary>
            If set then we will froce writing this out at the end of a synchronization.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation.DefaultCollation">
            <summary>
            The default collation for this database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation.CaseSensitive">
            <summary>
            Indicates whether the database is case sensitive.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation.DefaultOwner">
            <summary>
            Sets or gets the default owner for the database objects. In SQL Server 2005 this will set the 
            default schema; in SQL Server 2000 it will set the default user owner.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation.DefaultUser">
            <summary>
            Sets or gets the default user that should be used for AUTHORIZATION clauses.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation.SQLServerDBVersion">
            <summary>
            Gets or sets the database major version.
            8 is for SQL Server 2000.
            9 is for SQL Server 2005.
            10 is for SQL Server 2008.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ReadFromScriptDatabaseInformation.DefaultFilegroup">
            <summary>
            Sets or gets the filegroup that should be used if nothing or "DEFAULT" is specified in a 
            creation SQL statement.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis">
            <summary>
            This analysis object processes all the create and some alter statements. Note that
            some processing needs to be deferred until after we have all the objects. This is done in
            DatabaseFromFolderFactory (accessible via m_Factory)
            </summary>
            <excludetoc/>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.EnterNode(RedGate.SQLCompare.ASTParser.Syntax.Element,RedGate.SQLCompare.Rewriter.Analysis.AnalysisProvider{RedGate.SQLCompare.ASTParser.Syntax.Element})">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="provider"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.VisitNode(RedGate.SQLCompare.ASTParser.Syntax.Element,RedGate.SQLCompare.Rewriter.Analysis.AnalysisProvider{RedGate.SQLCompare.ASTParser.Syntax.Element})">
            <summary>
            We only need to trtaverse the top level go blocks, since we recurse later on the
            ast tree. 
            </summary>
            <param name="node"></param>
            <param name="provider"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ExitNode(RedGate.SQLCompare.ASTParser.Syntax.Element,RedGate.SQLCompare.Rewriter.Analysis.AnalysisProvider{RedGate.SQLCompare.ASTParser.Syntax.Element})">
            <summary>
            Executed when a node is exited. At the moment nothing needs to be done.
            </summary>
            <param name="node"></param>
            <param name="provider"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.Reset">
            <summary>
            
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.TraverseNode(antlr.collections.AST)">
            <summary>
            A recursive method that iterates through the AST nodes, and fills in the relevant
            treeview nodes.
            </summary>
            <param name="node"></param>
            <returns>True if a tree node has been added.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeIf(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            Processes if nodes.
            </summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.HexLiteralToByteArray(System.String)">
            <summary>
            Convers strings in 0x... format (may contain \\n) to byte arrays.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessAddOrGrantLogin(RedGate.SQLCompare.ASTParser.Syntax.Statements.ExecuteProcedureStatement)">
            <summary>
            Postprocesses sp_addlogin and sp_grantlogin statements
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.GetConstantValue(RedGate.SQLCompare.ASTParser.Syntax.Expressions.Constant)">
            <summary>
            Gets the object value form a Constant
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateDefault(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            Processes Create Default statements
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateRule(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            Processes Alter and Create nodes.
            </summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateRoute(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            Processes create route node
            </summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateOrAlterProcedure(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            Processes Alter and Create nodes.
            </summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ParameterProcessDefault(RedGate.SQLCompare.Engine.Parameter,RedGate.SQLCompare.ASTParser.Syntax.Statements.CreateOrAlter.ProcedureParameter)">
            <summary>
            Processes the default values for a parameter
            </summary>
            <param name="param"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateOrAlterFunction(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            Processes Alter and Create nodes for functions.
            </summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateAggregate(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            Processes Create nodes for aggregates.
            </summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateOrAlterView(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            Processes Alter and Create nodes for views.
            </summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.LengthOfWhitespaceAndCommentsFollowing(System.Int32,System.Boolean)">
            <summary>
            Finds the number of whitespace/comment characters following the specified position, which must not
            be within a comment.
            </summary>
            <remarks>
            If you find that you need the following whitespace very often, you may find that using the CommentsAndWhitespaceCache
            object from the rewriter will produce a useful performance boost.
            </remarks>
            <param name="startPosition">Where to start looking from</param>
            <param name="includeSemicolons">Set to true to include semicolons as well as whitespace and comments</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ReadFromScriptFile(System.Int32,System.Int32)">
            <summary>
            reads the raw text in a buffered way.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ReadFromScriptFile(RedGate.SQLCompare.ASTParser.Syntax.Element,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            reads the raw text in a buffered way.
            </summary>
            <param name="element"></param>
            <returns></returns>
            <param name="startPosition"></param>
            <param name="includeTrailingWhitespace"></param>
            <param name="extraCharacterCount"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ReadFromScriptFile(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            reads the raw text in a buffered way.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateTable(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            Processes Create table nodes.
            </summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessColumnDefinition(RedGate.SQLCompare.ASTParser.Syntax.Tables.ColumnDefinition,System.Int16,System.Boolean@,RedGate.SQLCompare.Engine.RelationalIndex@,RedGate.SQLCompare.Engine.SchemaObject)">
            <summary>
            
            </summary>
            <param name="colDef"></param>
            <param name="columnId"></param>
            <param name="pkClusteringCanBeClustered">
            Whether the primary key can be clustered. If there is a clustered unique index defined,
            any primary key has to be nonclustered.
            </param>
            <param name="primaryKey"></param>
            <param name="parentObject"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.CreateTableProcessUniqueIndex(RedGate.SQLCompare.ASTParser.Syntax.Tables.Constraint,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Field,System.Boolean@,RedGate.SQLCompare.ASTParser.Syntax.Statements.CreateOrAlter.AlterTable)">
            <summary>
            
            </summary>
            <param name="constraint"></param>
            <param name="table"></param>
            <param name="f"></param>
            <param name="pkClusteringCanBeClustered">Whether the pk can be clustered.</param>
            <param name="alterTable"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.CreateTableProcessIndexHints(RedGate.SQLCompare.ASTParser.Syntax.Tables.Constraint,RedGate.SQLCompare.Engine.RelationalIndex)">
            <summary>
            Processes the index hints.
            Example: 
            pad_index = ON, 
            fillfactor = 20, 
            ignore_dup_key = On,
            statistics_norecompute = on, 
            allow_row_locks = off,
            allow_page_locks = off
            </summary>
            <param name="constraint"></param>
            <param name="idx"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.CreateTableProcessPrimaryKey(RedGate.SQLCompare.ASTParser.Syntax.Tables.Constraint,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Field,System.Boolean@,RedGate.SQLCompare.ASTParser.Syntax.Statements.CreateOrAlter.AlterTable)">
            <summary>
            
            </summary>
            <param name="constraint"></param>
            <param name="table"></param>
            <param name="f"></param>
            <returns>Returns a primary key only if its clustering is not set explicitly.</returns>
            <param name="explicitClustering"></param>
            <param name="alterTable"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeAlterTable(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>
            Processes alter table nodes.
            </summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource">
            <summary>
            Information about the source of a database object. This information includes details of 
            the creation script file, as well as the starting and ending character position 
            for the creation statement.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.Empty">
            <summary>
            An empty script source.
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.#ctor(System.IO.FileInfo,System.Int32,System.Int32)">
            <summary>
            Constructs a script source.
            </summary>
            <param name="fileInfo"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.IsNullOrEmpty(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource)">
            <summary>
            True if the script source is null or uninitialized.
            </summary>
            <param name="scriptSource"></param>
            <returns>True if the script source is null or uninitialized.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.IsCoveredBy(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource)">
            <summary>
            True if the script source is inside the scriptsource of the parent (parameter).
            </summary>
            <param name="parentSS"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.IsCovering(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource)">
            <summary>
            True if the script source in the paremeter is inside this one.
            </summary>
            <param name="childSS"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.IsAfter(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource)">
            <summary>
            Negative if the first script source is after the second one.
            Positive if the second is after the first one.
            Zero if unknown.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
            0: unknown (null or different file)
            1: the position of x is after the position of y.
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.Equals(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource)">
            <summary>
            Checks if two script sources are equal.
            </summary>
            <param name="x">The first script source.</param>
            <param name="y">The second script source.</param>
            <returns>True if the two script sources are equal.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.GetHashCode(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource)">
            <summary>
            Calculates the hash code for the script source.
            </summary>
            <param name="obj">The script source for which the hash code is required.</param>
            <returns>The hash code for the script source.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.UpperPosition">
            <summary>
            The last character position of the SQL statement.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.LowerPosition">
            <summary>
            The first character position of the SQL statement.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.FileInfo">
            <summary>
            Information about the file that contains the SQL statement.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.PermissionsSources">
            <summary>
            A collection of script sources for the permission statements.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.ExternalDefinition">
            <summary>
            Used for assembly files. Shows whether the CLR file content has been read externally from 
            a file or from the script only.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.SetQuotedIdentifiers">
            <summary>
            The script source of the relevant "SET QUOTED IDENTIFIERS" statement.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource.SetAnsiNulls">
            <summary>
            The script source of the relevant "SET ANSII NULLS" statement.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction">
            <summary>
            A synchronization action that is used when a file needs to be created or altered 
            during synchronizing to a scripts folder.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.m_Wtf">
            <summary>
            WriteToFileOptions that control how the synchronization actions create new files.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.m_Options">
            <summary>
            Options that control how the databases are compared and case sensitivity.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.m_ScriptFolder">
            <summary>
            The path to the folder where the scripts should be created and altered.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.m_FileName">
            <summary>
            The name of the file this synchronization action should work with.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions,RedGate.SQLCompare.Engine.Options,System.String,System.String)">
            <summary>
            Constructs a ScriptSynchronizationAction.
            </summary>
            <param name="wtf">The options that control how to write to the scripts folder.</param>
            <param name="options">Database options.</param>
            <param name="scriptFolder">The scripts folder for the target scripts.</param>
            <param name="fileName">The name of the file for this particular synchronization action.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.Check">
            <summary>
            Checks preconditions for the execution.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.Execute">
            <summary>
            Executes the synchronization action.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.WriteToFileOptions">
            <summary>
            The options that control how to write to the scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.Options">
            <summary>
            Database options. These affect the way scripts are created, for example whether 
            SQL Server 2005 syntax is used, or whether filegroups should be included.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.ScriptFolder">
            <summary>
            The scripts folder for the target scripts.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.FileName">
            <summary>
            The file name for this synchronization action.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.ShortFileName">
            <summary>
            The name of the file and its prefix folder for this particular synchronization action.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionCreateObject">
            <summary>
            A synchronization action that creates a new file for a database object.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionCreateObject.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions,RedGate.SQLCompare.Engine.Options,System.String,System.String,RedGate.SQLCompare.Engine.ScriptableDatabaseObject)">
            <summary>
            Constructs a ScriptSynchronizationActionCreateObject.
            </summary>
            <param name="wtf">The options that control how new script files are organized.</param>
            <param name="options">Options.</param>
            <param name="scriptFolder">The root scripts folder.</param>
            <param name="fileName">The filename for the new database object. This may include a relative sub folder prefix.</param>
            <param name="dbObject">The database object that is to be created by this action.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionCreateObject.Execute">
            <summary>
            Executes the synchronization action.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionCreateObject.Check">
            <summary>
            Checks preconditions for the execution.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionCreateObject.DatabaseObject">
            <summary>
            The database object that is to be created by this synchronization action.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionDBInfo">
            <summary>
            A synchronization action that is used to modify database settings  
            during synchronizing to a scripts folder.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionDBInfo.Check">
            <summary>
            Checks if the script synchronization action can be carried out.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionDBInfo.Execute">
            <summary>
            Executes the synchronization action.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionDBInfo.DbInfo">
            <summary>
            The database settings for this sychronization action. These settings contain 
            information about the database the creation scripts belong to.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionRewrite">
            <summary>
            A synchronization action that modifies a creation SQL file.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionRewrite.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions,RedGate.SQLCompare.Engine.Options,System.String,System.String,RedGate.SQLCompare.Rewriter.Rewriting.Rewrite)">
            <summary>
            
            </summary>
            <param name="wtf"></param>
            <param name="options"></param>
            <param name="scriptFolder"></param>
            <param name="fileName"></param>
            <param name="rewrite"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionRewrite.Execute">
            <summary>
            Executes the synchronization action.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionRewrite.Check">
            <summary>
            Checks if the script synchronization action can be carried out.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions">
            <summary>
            The synchronization actions that need to be executed during synchronizing to a scripts 
            folder.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.#ctor">
            <summary>
            Constructs the ScriptSynchronizationActions.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.Check">
            <summary>
            Checks if the script synchronization actions can be carried out.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.Execute">
            <summary>
            Performs the script synchronization actions; it will modify the SQL script
            files in the target scripts folder.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.CancelOperation">
            <summary>Cancels the current operation.</summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.OnStatus(RedGate.Shared.Utils.StatusEventArgs)">
            <summary>
            Fire the status events.
            </summary>
            <param name="e">Arguments.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.SynchronizationActions">
            <summary>
            Access to the synchronization actions.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.Status">
            <summary>Used to provide status events.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions">
            <summary>
            Options that control how script files are written to a scripts folder.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions.#ctor">
            <summary>
            Constructs a new instance of the WriteToFileOptions class.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions.WriteXml(System.IO.Stream)">
            <summary>
            Writes an XML version of these options to a stream.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes an XML version of these options to an XmlWriter.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions.FromXml(System.String)">
            <summary>
            Constructs a new WriteToFileOptions object given an XML string generated by GetXml() method.
            Returns null if the options cannot be constructed from the XML.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions.FromXml(System.IO.Stream)">
            <summary>
            Constructs a new WriteToFileOptions object given a stream.
            Returns null if the options cannot be constructed from the XML.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions.FromXml(System.IO.TextReader)">
            <summary>
            Constructs a new WriteToFileOptions object given a textreader containing XML generated by GetXml().
            Returns null if the options cannot be constructed from the XML.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions.FromXml(System.Xml.XmlReader)">
            <summary>
            Constructs a new WriteToFileOptions object given an XML reader.
            Returns null if the options cannot be constructed from the XML.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions.FromXml(System.Xml.XmlNode)">
            <summary>
            Constructs a new WriteToFileOptions object given a document node for 
            a WriteToFileOptions instance.
            Returns null if the options cannot be constructed from the XML.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions.ObjectPrefixes">
            <summary>
            The object prefixes for all the ObjectType enumeration elements.
            These prefixes may contain one or more subfolder names and an object name prefix.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions.StoreAssemblyFilesInScript">
            <summary>
            Changes the behaviour of writing to scripts folder. If a CLR assembly file does not 
            originate from a file, this setting will put the CLR file into the script. If it is
            set to false, the CLR file will be created in the script directory as a separate file.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Refactorer">
            <summary>
            Summary description for Refactorer.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Refactorer.m_DatabaseTarget">
            <summary>
            This database is the one that is to be modified (so in this case the original)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Refactorer.m_DatabaseMaster">
            <summary>
            This is the database that is passed in, copied, and then modified (remastered).
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Refactorer.m_Mappings">
            <summary>
            The mappings for the refactoring.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Refactorer.m_Differences">
            <summary>
            The differences between the original and the refactored databases.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.#cctor">
            <summary>
            Static constructor, sets up the application name and the resource files.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.#ctor(RedGate.SQLCompare.Engine.Database)">
            <summary>
            Constructs a refactorer class. This is a single use class that allows to perform a 
            single refactoring.
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.Reset">
            <summary>
            Resets the refactoring to a state that it was in just after
            its construction.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.CalculateDifferences(RedGate.SQLCompare.Engine.Options)">
            <summary>
            Produces the list of differences between the original and the refactored databases.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameParameterOrColumn(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            
            </summary>
            <param name="objectOwner"></param>
            <param name="objectName"></param>
            <param name="oldAttributeName"></param>
            <param name="newAttributeName"></param>
            <param name="objecType"></param>
            <param name="rewriterOptions"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameSchemaObject(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            
            </summary>
            <param name="oldOwner"></param>
            <param name="oldName"></param>
            <param name="newOwner"></param>
            <param name="newName"></param>
            <param name="objecType"></param>
            <param name="rewriterOptions"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameStoredProcedure(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            Renames a stored procedure and all its dependants. 
            </summary>
            <param name="oldOwner"></param>
            <param name="oldName"></param>
            <param name="newOwner"></param>
            <param name="newName"></param>
            <returns></returns>
            <exclude/>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameView(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            Renames a view and all its dependants. 
            </summary>
            <param name="oldOwner"></param>
            <param name="oldName"></param>
            <param name="newOwner"></param>
            <param name="newName"></param>
            <returns></returns>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameTable(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            Renames a table and all its dependants. 
            </summary>
            <param name="oldOwner"></param>
            <param name="oldName"></param>
            <param name="newOwner"></param>
            <param name="newName"></param>
            <returns></returns>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameFunction(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            Renames a function and all its dependants. 
            </summary>
            <param name="oldOwner"></param>
            <param name="oldName"></param>
            <param name="newOwner"></param>
            <param name="newName"></param>
            <returns></returns>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameApplyRenameToAllDependents(System.Int32,RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Rewriter.Refactor.Refactoring,RedGate.SQLCompare.ASTParser.Resolvers.IResolver,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            It iterates through all the dependent objects and applies the refactroing to all the textual objects.
            </summary>
            <param name="parentID">The identifier of the parent object that was originally modified.</param>
            <param name="objectType"></param>
            <param name="refactoringToApply"></param>
            <param name="resolver"></param>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RefactorAndFixDefinition(RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,RedGate.SQLCompare.Engine.IEncryptedTextObject,RedGate.SQLCompare.Rewriter.Refactor.Refactoring,RedGate.SQLCompare.ASTParser.Resolvers.IResolver,System.String,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            Renames a dbobject in the provided definition, and fixes the definition name (in case it
            has been renamed using sp_rename before).
            </summary>
            <param name="objType">The object type, e.g. stored procedure, view, etc.</param>
            <param name="dbObj">The databse object itself</param>
            <param name="refactoringToApply"></param>
            <param name="resolver"></param>
            <param name="spDefinition"></param>
            <returns>The rewritten object definiton.</returns>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTable(RedGate.SQLCompare.Engine.Table,System.String[],System.String[],System.String,System.String,System.Boolean,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            Splits a database table into two tables.
            </summary>
            <param name="tableToSplit">The database table to be split.</param>
            <param name="columnsToKeep">The columns to be left in the first, primary table.</param>
            <param name="columnsToSecondary">The columns that should be in the secondary table.</param>
            <param name="secondaryTableOwner">The owner (user or schema) of the secondary table.</param>
            <param name="secondaryTableName">The name of the secondary table.</param>
            <param name="mToOne">Indicates whether the relation is an mToOne. This includes the 
            1:1 relationships as well!</param>
            <returns></returns>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableTriggers(RedGate.SQLCompare.Engine.Table,System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Field},RedGate.SQLCompare.Engine.Messages)">
            <summary>
            Handle the triggers in the case of a table split. 
            Not that this also handles the extended properties on triggers.
            There is no need to drop a trigger if all the original table columns remain.
            If a trigger also does not look at the inserted and deleted virtual tables
            chances are good that it is harmless, so we keep it.
            </summary>
            <param name="primaryTable"></param>
            <param name="fieldsToRemove"></param>
            <param name="warnings">Extra warnings.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableSplitPermissions(System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Field},RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Handles the permissions of table splits
            </summary>
            <param name="fieldsToRemove"></param>
            <param name="primaryTable"></param>
            <param name="secondaryTable"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableSplitExtendedProperties(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Handles the extended properties of table splits
            </summary>
            <param name="primaryTable"></param>
            <param name="secondaryTable"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableSecondaryForignKeys(System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Field},System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Field},RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Handles the foreign keys on the secondary table
            </summary>
            <param name="fieldsToRemove"></param>
            <param name="fieldsToShare"></param>
            <param name="primaryTable"></param>
            <param name="secondaryTable"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableSplitIndices(System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Field},System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Field},RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            This method goes through the indexes of the primary table, and decides whether
            and index should be kept, moved to the secondary table, or dropped altogether.
            </summary>
            <param name="fieldsToRemove"></param>
            <param name="fieldsToShare"></param>
            <param name="primaryTable"></param>
            <param name="secondaryTable"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableSplitCheckConstraints(System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Field},System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Field},RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            This method goes through the table constraints of the primary table, and decides whether
            and constraint should be kept, moved to the secondary table, or dropped altogether.
            </summary>
            <param name="fieldsToRemove"></param>
            <param name="fieldsToShare"></param>
            <param name="primaryTable"></param>
            <param name="secondaryTable"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableGetPostCreateScript(System.String[],RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Builds the script that populates the secondary table in the case of a table split.
            </summary>
            <param name="columnsToSecondary">The columns that we need to preserve.</param>
            <param name="primaryTable">The primary table that needs to be split.</param>
            <param name="secondaryTable">The secondary, target table.</param>
            <returns>The post create script that populates the secondary table.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableAddForeignKey(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Field},RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Adds a foreign key to the primary table. This foreign key will reference the 
            primary key of the secondary table.
            </summary>
            <param name="fkFields"></param>
            <param name="primaryTable"></param>
            <param name="secondaryTable"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableAddDefaultPrimaryKey(System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Field},RedGate.SQLCompare.Engine.Table)">
            <summary>
            Adds a default primary key to the specified table.
            </summary>
            <param name="keyFields"></param>
            <param name="table"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableApplyRenameToAllDependents(System.Int32,RedGate.SQLCompare.Rewriter.Refactor.SplitTableRefactoring,RedGate.SQLCompare.ASTParser.Resolvers.IResolver,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            It iterates through all the dependent objects and applies the refactroing to all the textual objects.
            </summary>
            <param name="parentID">The identifier of the parent object that was originally renamed.</param>
            <param name="refactoringSplitTableForScripts"></param>
            <param name="resolver"></param>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameParameter(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            Renames a stored procedure and all its dependants. 
            </summary>
            <param name="parentOwner"></param>
            <param name="parentName"></param>
            <param name="oldParamName"></param>
            <param name="newParamName"></param>
            <param name="objectType"></param>
            <param name="rewriterOptions"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameColumn(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            Renames a column in a table and all its dependants. 
            </summary>
            <param name="parentOwner"></param>
            <param name="parentName"></param>
            <param name="oldColumnName"></param>
            <param name="newColumnName"></param>
            <returns></returns>
            <param name="objectType"></param>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableGetPreliminaryWarnings(System.Collections.Generic.IList{RedGate.SQLCompare.Engine.Field},System.Collections.Generic.IList{RedGate.SQLCompare.Engine.Field},System.Collections.Generic.IList{RedGate.SQLCompare.Engine.Field},RedGate.SQLCompare.Engine.Table)">
            <summary>
            Builds up the preliminary warnings during the column selection process
            in table split refactorings.
            </summary>
            <param name="in1"></param>
            <param name="in2"></param>
            <param name="shared"></param>
            <returns></returns>
            <param name="masterTable"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.Dispose(System.Boolean)">
            <summary>
            Dispose method that handles the disposal of the managed resources as well.
            </summary>
            <param name="disposing">To differentiate the two states (disposing and finalizing).</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.Mappings">
            <summary>
            Provides access to the mappings that are set up between the original and the refactored
            database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.TargetDatabase">
            <summary>
            This database is the one that is to be modified (so in this case the original)
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.MasterDatabase">
            <summary>
            This is the database that is passed in, copied, and then modified (remastered).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.ExtraWarnings">
            <summary>
            Warnings during the refactoring.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.ScriptsResourceManager">
            <summary>
            Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.RefactoringOptions">
            <summary>
            Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.DefaultRefactoringOptions">
            <summary>
            Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Refactorer.ClrObjectInParameterRenameException">
            <summary>
            An exception that is thrown when one attempts to rename a CLR stored
            procedure or a CLR function parameter.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.ClrObjectInParameterRenameException.#ctor">
            <summary>
            Constructs an CLRObjectInParameterRenameException exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.ClrObjectInParameterRenameException.#ctor(System.String)">
            <summary>
            Constructs an CLRObjectInParameterRenameException exception.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.ClrObjectInParameterRenameException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an CLRObjectInParameterRenameException exception.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Region">
            <summary>A region of text.</summary>
            <remarks>
                The script for a SQL object is returned as a collection of regions. For example,
                the SQL script for a table might contain regions for columns, constraints, indexes,
                foreign keys, and permissions. 
                <para>
                    Use <see cref="M:RedGate.SQLCompare.Engine.Region.ToString"/> to view the entire SQL script.
                </para>
            </remarks>
            <example>
                Viewing the SQL script to create a table.
                <code lang="CS">
            Database db=new Database();
             
            db.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             
            Work work=new Work();
             
            //get the script for an object
            Regions regions=work.ScriptObject(db.Tables[0], Options.Default);
             
            Console.WriteLine("Entire SQL script:\n{0}", regions.ToString());
             
            Console.WriteLine("By region:\n");
             
            foreach (Region region in regions)
            {
                Console.WriteLine("***{0}", region.Name);
                Console.WriteLine(region.SQL);
            }
             
            db.Dispose();
                </code>
            	<code lang="VB">
            Dim db As New Database()
             
            db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             
            Dim work As New Work()
             
            'get the script for an object
             
            Dim regions As Regions = work.ScriptObject(db.Tables(0), Options.Default)
             
            Console.WriteLine("Entire SQL script:")
            Console.WriteLine("{0}", regions.ToString())
             
            Dim region As Region
             
            For Each region In regions
                Console.WriteLine("***{0}", region.Name)
                Console.WriteLine(region.SQL)
            Next
             
            'dispose
            db.Dispose()
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Region.#ctor(System.String,System.String)">
            <summary>
            Construct a region containing a single sub-region.
            </summary>
            <param name="name"></param>
            <param name="sql"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Region.ToString">
            <summary>The SQL code that a region contains.</summary>
            <returns>SQL code.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Region.AddGOStatement">
            <summary>
            Add a GO to the last region written.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Region.SQL">
            <summary>The SQL code that a region contains.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Region.Name">
            <summary>The name of the region.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Region.SubRegions">
            <summary>
            The sub-regions contained within this region
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Regions">
            <summary>A collection of regions.</summary>
            <remarks>
                Use the <see cref="M:RedGate.SQLCompare.Engine.Regions.ToString">ToString()</see> method to return the text that the
                regions represent. 
                <para>
                    See <see cref="T:RedGate.SQLCompare.Engine.Region"/> for more information and code samples.
                </para>
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Regions.ToString">
            <summary>The SQL script that a collection of regions contains.</summary>
            <returns>SQL script.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Regions.WriteToStream(System.IO.StreamWriter)">
            <summary>
            Writes the region to the specified stream.
            </summary>
            <param name="sw">The stream where the regions are to be written to.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Role">
            <summary>A role.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Role.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the roles are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the role with a specified role.</summary>
            <param name="target">The role to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Role.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.ObjectType">
            <summary>Returns ObjectType.Role</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.Permissions">
            <summary>
            The permissions on this role.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.AppRole">
            <summary>True if the role is an application role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.FullyQualifiedName">
            <summary>The fully-qualified name of the role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.ExtendedProperties">
            <summary>The extended properties defined for the role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.Members">
            <summary>The users in the role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.DefaultSchema">
            <summary>
            The default schema for the application role. If the role is not an application
            role the value for the default schema is null.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.DatabaseLevelPermissions">
            <summary>Access to the role's database-level permissions.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Roles">
            <summary>A collection of roles.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Roles.SerializeItem(RedGate.SQLCompare.Engine.Role,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Roles.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Route">
            <summary>A route.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Route.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the routes are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the route with a specified route.</summary>
            <param name="targetObject">The route to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Route.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.Name">
            <summary>The name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.Permissions">
            <summary>
            The permissions on this route.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.IsSystemObject">
            <summary>Indicates whether the route is a system object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.RemoteServiceName">
            <summary>
            The name of the remote service.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.BrokerInstance">
            <summary>
            The broker instance.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.Address">
            <summary>The address of the route.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.MirrorAddress">
            <summary>The mirror address of the route.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.Lifetime">
            <summary>
            The lifetime of the route.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.HasLifeTime">
            <summary>
            True if the route has a lifetime set.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.ExtendedProperties">
            <summary>The extended properties defined for the route.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Routes">
            <summary>A collection of routes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Routes.SerializeItem(RedGate.SQLCompare.Engine.Route,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Routes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Rule">
            <summary>A rule.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rule.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the rule with a specified rule.</summary>
            <returns><em>True</em> if the rules are identical; otherwise, <em>false</em>.</returns>
            <param name="target">The rule to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rule.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rule.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.ObjectType">
            <summary>Returns ObjectType.Rule</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.SysobjectID">
            <summary>
            The sysobject identier of the object.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.Text">
            <summary>The text of the rule.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Rules">
            <summary>A collection of rules.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rules.SerializeItem(RedGate.SQLCompare.Engine.Rule,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rules.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Schema">
            <summary>
            A schema.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schema.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the schemas are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the schema with a specified schema.</summary>
            <param name="target">The schema to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schema.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.ObjectType">
            <summary>Returns ObjectType.User</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.FullyQualifiedName">
            <summary>The name of the schema.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.Name">
            <summary>The name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.Permissions">
            <summary>
            The permissions on this schema.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.IsSystemObject">
            <summary>Indicates whether the schema is a system object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.ExtendedProperties">
            <summary>The extended properties defined for the schema.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaBinding">
            <summary>
            Summary description for SchemaBinding.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaBindings">
            <summary>
            Summary description for SchemaBindings.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaBindings.GetKey(RedGate.SQLCompare.Engine.SchemaBinding)">
            <summary>
            Generates a key for a schema binding.
            </summary>
            <param name="value">The schema binding for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Schemas">
            <summary>A collection of schemas.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schemas.SerializeItem(RedGate.SQLCompare.Engine.Schema,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schemas.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Service">
            <summary>A service.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Service.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the services are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the service with a specified service.</summary>
            <param name="targetObject">The service to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Service.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.Name">
            <summary>The name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.ObjectType">
            <summary>Returns ObjectType.Service</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.Permissions">
            <summary>
            The permissions on this service.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.Queue">
            <summary>The queue that the service is on.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.Contracts">
            <summary>The contracts that the service uses.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.EventNotifications">
            <summary>The event notifications that depend on the service.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.IsSystemObject">
            <summary>Indicates whether the object is a system object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.ExtendedProperties">
            <summary>The extended properties defined for the service.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ServiceBinding">
            <summary>A service binding.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBinding.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the service binding with a specified service binding.</summary>
            <returns>
            	<em>True</em> if the service bindings are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The service to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBinding.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.ObjectType">
            <summary>Returns ObjectType.Service</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.Permissions">
            <summary>
            The permissions on this service binding.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.RemoteService">
            <summary>
            The remote service.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.UserName">
            <summary>
            The user name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.Anonymous">
            <summary>True if anonymous authentication is to be used.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.ExtendedProperties">
            <summary>The extended properties defined for the service binding.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ServiceBindings">
            <summary>A collection of service bindings.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBindings.SerializeItem(RedGate.SQLCompare.Engine.ServiceBinding,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBindings.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Services">
            <summary>A collection of services.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Services.SerializeItem(RedGate.SQLCompare.Engine.Service,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Services.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SpatialIndexInformation">
            <summary>
            Information that augments spatial indexes.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.BoundingBoxXMin">
            <summary>
            The x-coordinate of the lower-left corner of the bounding box.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.BoundingBoxXMax">
            <summary>
            The x-coordinate of the upper-right corner of the bounding box.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.BoundingBoxYMin">
            <summary>
            The y-coordinate of the lower-left corner of the bounding box.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.BoundingBoxYMax">
            <summary>
            The y-coordinate of the upper-right corner of the bounding box.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.Level1Grid">
            <summary>
            The first tesselation level's grid density.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.Level2Grid">
            <summary>
            The second tesselation level's grid density.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.Level3Grid">
            <summary>
            The third tesselation level's grid density.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.Level4Grid">
            <summary>
            The fourth tesselation level's grid density.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.CellsPerObject">
            <summary>
            The number of tesselation cells per objects.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.SpatialIndexType">
            <summary>
            The type of the spatial index. In SQL Server 2008 it can be either geometry or
            geography.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.TesselationScheme">
            <summary>
            The tesselation scheme of the spatial index.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SpatialIndexInformation.TesselationSchemes">
            <summary>
            Used to specify the tesselation scheme for the spatial index.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.TesselationSchemes.GeometryGrid">
            <summary>
            GEOMETRY_GRID
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.TesselationSchemes.GeographyGrid">
            <summary>
            GEOGRAPHY_GRID
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SpatialIndexInformation.SpatialIndexTypes">
            <summary>
            The type of the spatial index. In SQL Server 2008 this can be either geometry or geography.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.SpatialIndexTypes.Geometry">
            <summary>
            Geometry
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.SpatialIndexTypes.Geography">
            <summary>
            Geography
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SpatialIndexInformation.GridDensities">
            <summary>
            The grid densities of spatial indexes
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.GridDensities.LOW">
            <summary>
            LOW (16)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.GridDensities.MEDIUM">
            <summary>
            MEDIUM (64)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.GridDensities.HIGH">
            <summary>
            HIGH (256)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping">
            <summary>
            Contains a mapping between the schema or owners in the different databases.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping.#ctor(RedGate.SQLCompare.Engine.Mapping{RedGate.SQLCompare.Engine.IOwner})">
            <summary>
            Copy constructor.
            </summary>
            <param name="copy">SchemaMapping to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping.#ctor(RedGate.SQLCompare.Engine.IOwner,RedGate.SQLCompare.Engine.IOwner)">
            <summary>
            Contructor, calls the base constructor.
            </summary>
            <param name="obj1">The index in the first database.</param>
            <param name="obj2">The index in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings">
            <summary>
            Holds mappings for the schema or owners between the two databases. Uses the
            database objects to create the mappings for the views and the tables from the two
            databases.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.m_IsTrivialMapping">
            <summary>
            To keep track if the mapping has been modified (any split/join, even if the result is trivial)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.m_db1">
            <summary>
            The first database object.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.m_db2">
            <summary>
            The second database object.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.m_Level1ObjectMappings">
            <summary>
            The table mappings is for all schemas, users or roles
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.#ctor(RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="ownerMappings"><see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings"/> to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.#ctor">
            <summary>
            Default constructor, with case-sensitive mapping keys.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.#ctor(System.Boolean)">
            <summary>
            Constructor specifying case-sensitivity.
            </summary>
            <param name="caseSensitive">
            If true, the mappings will be done using case-sensitive keys.
            If false, the keys will be case-insensitive
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.GetKey(System.String)">
            <summary>
            Return the key that should be used for the specified fully qualified name.
            </summary>
            <param name="fullyQualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.CreateMappings(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Creates a mapping for each owner or schema in the database where such a mapping is possible.
            </summary>
            <param name="db1">The first database, or null.</param>
            <param name="db2">The second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.MapDatabase(System.Boolean)">
            <summary>
            Maps the specified database according to the current mappings.
            </summary>
            <param name="first">If true, <see cref="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Database1"/> is mapped. If false, <see cref="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Database2"/> is mapped.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.IOwner,RedGate.SQLCompare.Engine.IOwner)">
            <summary>
                Called to join two schemas or users tables together. For each schema or user,
                attempts to map the tables and views in the specified schema or belonging to the
                specified user. Any tables mapped in the schema or belonging to the user will be
                <see cref="M:RedGate.SQLCompare.Engine.Mappings`2.Split(RedGate.SQLCompare.Engine.Mapping{`0})"/>.
            </summary>
            <returns>The created mapping.</returns>
            <exception cref="T:System.ArgumentException" caption="">SchemaMappings.Join must be called with Schema or Users arguments.</exception>
            <param name="obj1">The schema or user in the first database.</param>
            <param name="obj2">The schema or user in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Split(RedGate.SQLCompare.Engine.Mapping{RedGate.SQLCompare.Engine.IOwner})">
            <summary>
            Splits apart a mapping and creates two mappings, one to null and one from
            null.
            </summary>
            <param name="old1">The mapping to be split. Both obj1 and obj2 should be not null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.CancelOperation">
            <summary>
            Cancels the current operation.
            </summary>
            <remarks>
            An <see cref="T:RedGate.Shared.Utils.OperationCancelledException"/> will be thrown.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.SchemaObjectMappings">
            <summary>
            Returns the schema object mappings for the databases.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.CaseSensitive">
            <summary>
            True if the keys are case-sensitive.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.IsTrivialMapping">
            <summary>
            Indicates whether a mapping is trivial or not. A trivial mapping is one that maps every owner
            to itself.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.ViewTableColumnMapping">
            <summary>
            This is something for the Rafctroing tool. It adds a single column mapping (object, 
            old and new column names). It is considered in the engine during table rebuilds and mappings.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Owners">
            <summary>
            Internal use only
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Owners.#ctor(System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="caseSensitive"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Owners.Add(RedGate.SQLCompare.Engine.IOwner)">
            <summary>
            Adds an <see cref="T:RedGate.SQLCompare.Engine.IOwner"/> to this collection.
            </summary>
            <param name="owner">The owner object to add.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Owners.GetKey(RedGate.SQLCompare.Engine.IOwner)">
            <summary>
            For internal use.
            </summary>
            <param name="value">For internal use</param>
            <returns>For internal use</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ViewTableColumnMapping">
            <summary>
            This is a class for column mappings for column rename refoactorings.
            In the future when/if SQL Compare can support detailed column mappings,
            then this should be rewritten to support proper mapping. At the moment it
            is more than sufficient to have a single column rename for the whole 
            synchronization.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlScriptsHelper">
            <summary>
            Summary description for SqlScriptsHelper.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlScriptsHelper.SQLString(System.String)">
            <summary>
            Escapes and puts N'' around a string so that it can be used as a string literal in T-SQL.
            </summary>
            <param name="value">The string to be escaped for T-SQL.</param>
            <returns>Escaped string ready for use in T-SQL.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlScriptsHelper.AddPlumbing(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Adds rollback transaction on error statement to the block.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlSetOptions">
            <summary>SQL set options.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.#ctor">
            <summary>
            Constructs a SQLSetOptions class. This stores information about connection settings,
            such as ANSI warnings, ANSI NULLs, quoted identifiers, etc.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.#ctor(System.Boolean)">
            <summary>
            Constructs a SQLSetOptions class. This stores information about connection settings,
            such as ANSI warnings, ANSI NULLs, quoted identifiers, etc.
            </summary>
            <param name="force">Sets the force attribut to include both positive and negative 
            set options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.SetOption(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,System.String,System.Boolean)">
            <summary>
            Sets an option.
            </summary>
            <param name="block">The block writer in which the option setting should be scripted to.</param>
            <param name="setName">The name of the setting. This could be NSI_PADDING, ANSI_WARNINGS, 
            CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS, or NUMERIC_ROUNDABORT.</param>
            <param name="value">The value of the setting. This can be true or false.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.SetDefaultOptions(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter)">
            <summary>
            Sets the default options. This sets numeric roundabort to false, ANSI padding to true, ANSI warnings to true,
            concatenation yields NULL to true, arithmetic abort to true, quoted identifiers to true, and ANSI NULLs to
            true.
            </summary>
            <param name="block"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlSetOptions.Force">
            <summary>
            If set then we force adding the set options.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.StoredProcedure">
            <summary>A stored procedure.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedure.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the stored procedures are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the stored procedure with a specified stored procedure.</summary>
            <param name="target">The stored procedure to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedure.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.ObjectType">
            <summary>Returns ObjectType.StoredProcedure</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Permissions">
            <summary>
            The permissions on this stored procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Parameters">
            <summary>
            The parameters of the stored procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.SysobjectID">
            <summary>The sysobject identifier for the stored procedure.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Text">
            <summary>The text of the stored procedure.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Encrypted">
            <summary>
            True if the stored procedure definition is encrypted.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.QuotedIdentifierOn">
            <summary>
            True if the stored procedure was created with <em>quoted identifiers
            on</em>.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AnsiNullsOn">
            <summary>True if the stored procedure was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.CLRObject">
            <summary>
            True if the stored procedure is a CLR stored procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Assembly">
            <summary>
            The CLR assembly for the stored procedure, if it is a CLR stored
            procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.ExecuteAsType">
            <summary>
            The EXECUTE AS clause used for the object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the stored
            procedure. This is a SQL Server 2005 and 2008 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AssemblyClass">
            <summary>
            The CLR assembly class name for the stored procedure, if it is a CLR stored
            procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AssemblyMethod">
            <summary>
            The CLR assembly method name for the stored procedure, if it is a CLR stored
            procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.IsSystemObject">
            <summary>
            For internal use only!!!
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AssemblyFromDeserialization">
            <summary>
            This is used for reading from scripts
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.StoredProcedures">
            <summary>A collection of stored procedures.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedures.SerializeItem(RedGate.SQLCompare.Engine.StoredProcedure,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedures.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextStopwords">
            <summary>
            A collection of stopwords associated with a full text stoplist.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStopwords.GetSystemStoplist(System.Version)">
            <summary>
            Gets the most valid system stoplist from the xml file.
            The serverVersion will be set to the version obtained from the file.
            </summary>
            <param name="serverVersion"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStopwords.GetEnumerator">
            <summary>
            Returns an enumerator of the languages in this stoplist
            and the stopwords associated with each language.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStopwords.PopulateSystemStoplist">
            <summary>
            Initializes the stoplist with the system stoplist from the specified server version.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStopwords.Languages">
            <summary>
            The LCIDs of the languages in this collection.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStopwords.TotalStopwords">
            <summary>
            The total number of stopwords in this collection.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStopwords.Item(System.Int32)">
            <summary>
            A collection of stopwords associated with the specified LCID.
            </summary>
            <param name="language">The LCID of the stopwords to return.</param>
            <returns>A collection of stopwords for the specified LCID.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.StringWriter">
            <summary>
            An implementation of <see cref="T:RedGate.Shared.SQL.ExecutionBlock.IBlockWriter"/> using a backing <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SymmetricKey">
            <summary>A symmetric key.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKey.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the symmetric keys are identical; otherwise,
            <em>false.</em>
            </returns>
            <summary>Compares the symmetric key with a specified symmetric key.</summary>
            <param name="targetObject">The symmetric key to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKey.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.ObjectType">
            <summary>Returns ObjectType.SymmetricKey</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.Permissions">
            <summary>
            The permissions on this symmetric key.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.CreateDate">
            <summary>The date of creation for the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.ModifyDate">
            <summary>The date of the last modification for the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.KeyGuid">
            <summary>The GUID for the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.KeyLength">
            <summary>The length of the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.KeyAlgorithm">
            <summary>The symmetric key algorithm.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm">
            <summary>The symmetric key encryption algorithm.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.R2">
            <summary>R2 = RC2</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.R4">
            <summary>R4 = RC4</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.D">
            <summary>D = DES</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.D3">
            <summary>D3 = Triple DES</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.DX">
            <summary>DX = DESX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.A1">
            <summary>A1 = AES 128</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.A2">
            <summary>A2 = AES 192</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.A3">
            <summary>A3 = AES 256</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SymmetricKeys">
            <summary>A collection of symmetric keys.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKeys.SerializeItem(RedGate.SQLCompare.Engine.SymmetricKey,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKeys.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Synonym">
            <summary>A synonym.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonym.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the synonyms are identical; otherwise <em>false.</em></returns>
            <summary>Compares the synonym with the specified synonym.</summary>
            <param name="targetObject">The synonym to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonym.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.SysobjectID">
            <summary>The sysobject identifier for the synonym.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.ReferencedName">
            <summary>The name that the synonym references.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.ObjectType">
            <summary>Returns ObjectType.Synonym</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.Permissions">
            <summary>
            The permissions on this synonym.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Synonyms">
            <summary>A collection of synonyms.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonyms.SerializeItem(RedGate.SQLCompare.Engine.Synonym,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonyms.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DataCompression">
            <summary>
            Compression used for a table or index record. This has been introduced in SQL Server 2008.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DataCompression.None">
            <summary>
            No compression
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DataCompression.Row">
            <summary>
            Row compression
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DataCompression.Page">
            <summary>
            Page compression
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Table">
            <summary>A table.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ViewTableSuperClass">
            <summary>A view or table superclass.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_Fields">
            <summary>Fields.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_Indexes">
            <summary>Indexes.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_Triggers">
            <summary>Triggers.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_SchemaBoundFunctions">
            <summary>Schema bound functions.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_SchemaBoundViews">
            <summary>Schema bound views.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_Permissions">
            <summary>Permissions.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_IsSystemObject">
            <summary>
            This is to be used only by SQL Prompt
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ViewTableSuperClass.CommonEquals(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Checks for equality between things common to tables and views
            </summary>
            <param name="target"></param>
            <param name="options"></param>
            <returns></returns>
            <remarks>
            There are slight differences in how the checks are done in everything other than
            full text stuff. It would be nice if these were harmonised at some point.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.SysobjectID">
            <summary>The sysobject identifier for the table or view.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.Permissions">
            <summary>
            The permissions applied to this view or table.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.Fields">
            <summary>The fields belonging to the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.Indexes">
            <summary>The indexes defined on the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.Triggers">
            <summary>The triggers defined on the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextIndexed">
            <summary>True if the table or view is full-text indexed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextIndex">
            <summary>The full-text index for the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextCatalog">
            <summary>The full-text catalog defined for the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextChangeTracking">
            <summary>
            The change tracking setting for the full text index.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextStoplistType">
            <summary>
            The stoplist type used for the full text index on the table or view.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextStoplist">
            <summary>
            The user-defined stoplist for the full text index on the table or view.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.ScriptSourceForFullTextTable">
            <summary>
            The location of the creation script for the fulltext table statement for this table or view
            if the database source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.IsSystemObject">
            <summary>
            For internal use only!!!
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the table with a specified table.</summary>
            <returns><em>True</em> if the tables are identical; otherwise <em>false.</em></returns>
            <param name="targetObject">The table to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.ObjectType">
            <summary>Returns ObjectType.Table</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.FileGroup">
            <summary>The filegroup on which the table is defined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.TextFileGroup">
            <summary>The filegroup on which the text in the table is defined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.FilestreamFileGroup">
            <summary>
            The filegroup on which the filestreams of the table are to be stored.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.ForeignKeys">
            <summary>The table's foreign keys.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.CheckConstraints">
            <summary>The table's check constraints.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.PartitionedField">
            <summary>
            Indicates the field over which the table is partitioned. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.IsPartitioned">
            <summary>
            Indicates whether the table is partitioned. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.PartitionScheme">
            <summary>
            The partition scheme for this table. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.DataCompressionPartitions">
            <summary>
            The partitions on which the table compression is set. This is a SQL Server 2008 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.DataCompressionPartitionsInternal">
            <summary>
            The partitions on which the table compression is set. This is a SQL Server 2008 feature.
            The internal version gives you direct access to the list that is stored.
            If there is no important information in the list it is not stored!
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.ChangeTracking">
            <summary>
            Whether change tracking is enabled for this table. This is a SQL Server 2008 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.ChangeTrackingScriptSource">
            <summary>
            The script source for any ALTER TABLE CHANGE_TRACKING statement.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.PostCreateScript">
            <summary>
            A property used by the refactoring engine to set post create scripts. These
            could potentially 
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Table.TableChangeTracking">
            <summary>
            Table change tracking option set. This has been introduced in SQL Server 2008.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Table.TableChangeTracking.Disabled">
            <summary>
            Change tracking is disabled.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Table.TableChangeTracking.Enabled">
            <summary>
            Change tracking is enabled.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Table.TableChangeTracking.EnabledWithTrackColumnsUpdated">
            <summary>
            Change tracking is enabled with information on which columns were updated.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Tables">
            <summary>A collection of tables.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Tables.SerializeItem(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Tables.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TableWork">
            <summary>
            Summary description for TableWork.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TargetRefactoringObjectExistsException">
            <summary>
            TargetRefactoringObjectExistsException is used when a database object that is renamed using a 
            refactoring, but this object already is in the database.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TargetRefactoringObjectExistsException.#ctor">
            <summary>
            Constructs an TargetRefactoringObjectExistsException exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TargetRefactoringObjectExistsException.#ctor(System.String)">
            <summary>
            Constructs an TargetRefactoringObjectExistsException exception.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TargetRefactoringObjectExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an TargetRefactoringObjectExistsException exception.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLToolkit.Engine.Licensing.ToolkitLicenceProvider">
            <summary>
            Summary description for ToolkitLicenceProvider.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Trigger">
            <summary>A trigger.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Trigger.Equals(RedGate.SQLCompare.Engine.Trigger,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the trigger with a specified trigger.</summary>
            <returns><em>True</em> if the triggers are identical; otherwise, <em>false</em>.</returns>
            <param name="targetTrigger">The trigger to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.SysobjectID">
            <summary>
             The identifier of the trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ID">
            <summary>
            The identifier of the trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.QuotedIdentifierOn">
            <summary>True if the trigger was created with <em>quoted identifiers on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.AnsiNullsOn">
            <summary>True if the trigger was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Parent">
            <summary>
            The parent of the trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.IsReplicationTrigger">
            <summary>
            True if the trigger is a replication trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Text">
            <summary>The text of the trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FullyQualifiedName">
            <summary>The fully-qualified name of the trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Update">
            <summary>True if the trigger is an <em>update</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Insert">
            <summary>True if the trigger is an <em>insert</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Delete">
            <summary>True if the trigger is a <em>delete</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.After">
            <summary>True if the trigger is an <em>after</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.InsteadOf">
            <summary>True if the trigger is an <em>instead of</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.CLRObject">
            <summary>
            True if the trigger is a CLR trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Assembly">
            <summary>The CLR assembly for the DML trigger, if it is a CLR DML trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ExecuteAsType">
            <summary>
            The EXECUTE AS clause used for the object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the trigger.
            This is a SQL Server 2005 and 2008 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.AssemblyClass">
            <summary>
            The CLR assembly class name for the DML trigger, if it is a CLR DML
            trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.AssemblyMethod">
            <summary>
            The CLR assembly method name for the DML trigger, if it is a CLR DML
            trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.NotForReplication">
            <summary>
            True if this trigger is NOT FOR REPLICATION.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FirstDeleteTrigger">
            <summary>True if the trigger is the first <em>delete</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FirstInsertTrigger">
            <summary>True if the trigger is the first <em>insert</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FirstUpdateTrigger">
            <summary>True if the trigger is the first <em>update</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.LastDeleteTrigger">
            <summary>True if the trigger is the last <em>delete</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.LastInsertTrigger">
            <summary>True if the trigger is the last <em>insert</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.LastUpdateTrigger">
            <summary>True if the trigger is the last <em>update</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Encrypted">
            <summary>
            True if the trigger definition is encrypted.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.IsDisabled">
            <summary>True if the trigger is <em>disabled</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Name">
            <summary>
            The name of the trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Owner">
            <summary>
            The owner or the schema of the trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Database">
            <summary>The database to which the trigger belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ObjectType">
            <summary>Returns ObjectType.Trigger</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Triggers">
            <summary>A collection of triggers.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.SerializeItem(RedGate.SQLCompare.Engine.Trigger,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.ResetInternalKeysAfterParentRename">
            <summary>
            Triggers are stored in the base class hashtable based on a key that contains the 
            parent table name. However, if the table is to be renamed (see refactoring), then
            the hashtable needs to be repopulated. This method removes all entries from the
            hastable, and repopulates it with consideration to the new table name.
            Note, that when this is executed, the table name must already be set to its
            new value.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.GetKey(RedGate.SQLCompare.Engine.Trigger)">
            <summary>
            Generates a key for a trigger.
            </summary>
            <param name="value">The trigger for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.Sort">
            <summary>
            Sorts triggers based on their names (this is generally used for collections of tables, so the table name
            does not need to be considered.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Triggers.Item(System.String)">
            <summary>
            Returns a trigger given its fully-qualified name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Triggers.Item(System.String,System.String)">
            <summary>
            Returns a trigger given its name and owner.
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.TriggerByNameComparer.Compare(RedGate.SQLCompare.Engine.Trigger,RedGate.SQLCompare.Engine.Trigger)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UDTBinding">
            <summary>
            Summary description for Binding.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UDTBindings">
            <summary>
            Summary description for UDTBindings.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UDTBindings.GetKey(RedGate.SQLCompare.Engine.UDTBinding)">
            <summary>
            Generates a key for a UDT binding.
            </summary>
            <param name="value">The UDT binding for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserType">
            <summary>The type of user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.SqlUser">
            <summary>SQL Server user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.WindowsUser">
            <summary>Windows user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.CertificateUser">
            <summary>Certificate bound user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.AsymmetricKeyUser">
            <summary>Asymmetric key bound user.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.User">
            <summary>A user.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.User.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the users are identical; otherwise <em>false.</em></returns>
            <summary>Compares the user with a specified user.</summary>
            <param name="target">The user to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.User.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.ExtendedProperties">
            <summary>The extended properties defined for the user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.ScriptSourceCreateLogin">
            <summary>
            The location of the creation script for the create login statement for this object 
            if the database source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.ObjectType">
            <summary>Returns ObjectType.User</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.FullyQualifiedName">
            <summary>The fully-qualified name of the user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Owner">
            <summary>
            The owner of the user. This is undefined.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.LoginName">
            <summary>The login name of the user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.UserType">
            <summary>
            The user type. This can be a certificate or asymmetric key bound user. In
            addition, in SQL Sever 2000 and earlier this can be a Windows user or a SQL user in SQL
            Server 2000.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.DefaultSchema">
            <summary>
            The default schema of SQL Server 2005 users.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.IsWindowsUser">
            <summary>True if the user is a Windows user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.IsSQLUser">
            <summary>True if the user is a SQL user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Permissions">
            <summary>The permissions on this user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.AsymmetricKey">
            <summary>
            The name of the asymmetric key if the user is an asymmetric key bound user.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Certificate">
            <summary>
            The name of the certificate key if the user is an certificate key bound
            user.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.DatabaseLevelPermissions">
            <summary>Access to the user's database-level permissions.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserActionItem">
            <summary>
            Contains the action and associated data.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserActionItem.#ctor(RedGate.SQLCompare.Engine.UserAction,System.Object)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="data"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserActionItem.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserActionItem.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserActionItem.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserAction">
            <summary>
            An enum stating what action the user made.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.SelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.SelectItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.DeselectAll">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.DeselectItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.DeselectGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.SelectGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.MapOwners">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.UnmapOwners">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.SelectObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.DeselectObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.OwnerPairReference">
            <summary>
            An OwnerPairReference.
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.OwnerPairReference.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="one"></param>
            <param name="two"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.OwnerPairReference.Owner1">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.OwnerPairReference.Owner2">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserDefinedType">
            <summary>A user-defined type.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedType.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the user-defined type with a specified user-defined type.</summary>
            <returns>
            	<em>True</em> if the user-defined types are identical; otherwise,
            <em>false.</em>
            </returns>
            <param name="target">The user-defined type to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedType.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.ScriptSourceForDefault">
            <summary>
            The location of the creation script for the default binding statement for this object 
            if the database source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.ScriptSourceForRule">
            <summary>
            The location of the creation script for the rule binding statement for this object 
            if the database source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.ObjectType">
            <summary>Returns ObjectType.UserDefinedType</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Permissions">
            <summary>
            The permissions on this user-defined type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Rule">
            <summary>The rule bound to the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Default">
            <summary>The default bound to the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.BaseTypeName">
            <summary>The name of the underlying type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.AllowNulls">
            <summary>True if the user-defined type allows nulls.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Length">
            <summary>The length of the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Precision">
            <summary>The precision of the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Scale">
            <summary>The scale of the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.SqlType">
            <summary>The underlying type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.CLRObject">
            <summary>True if the user-defined type is a CLR user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Assembly">
            <summary>
            The CLR assembly for the user-defined type, if this is a CLR user-defined
            type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.AssemblyClass">
            <summary>
            The CLR assembly class name for the user-defined type, if this is a CLR
            user-defined type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.TypeTable">
            <summary>
            This table contains inforamtion about the type if it is a table type. Table types
            have been introduced in SQL Server 2008.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.AuthType">
            <summary>
            Returns the object type that should be used for ALTER AUTHORIZATION statements on the object.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserDefinedTypes">
            <summary>A collection of user-defined types.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.SerializeItem(RedGate.SQLCompare.Engine.UserDefinedType,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.PatchUpAfterDeserialization(RedGate.SQLCompare.Engine.Database)">
            <summary>
            Must be run after assemblies and tables are patched up.
            </summary>
            <param name="database"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Users">
            <summary>A collection of users.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Users.SerializeItem(RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Users.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Utils">
            <summary>A class providing utility functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.Intern(System.String)">
            <summary>
            Interns <paramref name="s"/> if it is not null.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.CheckCaseInsensitiveClash(RedGate.SQLCompare.Engine.IDatabaseObject,System.String)">
            <summary>
            Checks that <paramref name="matchedname"/> is the same as the name of <paramref name="obj"/>
            in a case-sensitive way. If it isn't, it throws <see cref="T:RedGate.SQLCompare.Engine.SqlCompareException"/> with
            an appropriate error message.
            </summary>
            <param name="obj">The object found to match <paramref name="matchedname"/>.</param>
            <param name="matchedname">The object name that was searched for.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.GetAst(System.IO.TextReader,System.Boolean)">
            <summary>
            Constructs the lexer and parser for a given input.
            </summary>
            <param name="script"></param>
            <param name="quotedIdentifiers"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.IndexDifferences``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns a list of the indexes that differ between the two collections in O(n) time. Note that this
            only makes sense for collections that have a defined order (lists and sortedlists)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i1"></param>
            <param name="i2"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.RetrieveNames(System.String)">
            <summary>
            Parses an object name in the format server.database.owner.object
            </summary>
            <param name="sInput"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.QualifyName(System.String)">
            <summary>
            Returns the qualified <paramref name="name"/>.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.QualifyNameIfNotNull(System.String)">
            <summary>
            Returns the qualified <paramref name="name"/> if it isn't null.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.QualifyNameIfNotNull(System.String,System.Text.StringBuilder)">
            <summary>
            Appends the qualified <paramref name="name"/> to the stringbuilder
            </summary>
            <param name="name"></param>
            <param name="sb"></param>
            <returns>True if the name was inserted, false if <paramref name="name"/> is null</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.BuildFullyQualifiedName(System.String[])">
            <summary>
            Creates a fully qualified name from the objects on the dependency object stacker.
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.View">
            <summary>A view.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.View.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the views are identical; otherwise <em>false.</em></returns>
            <summary>Compares the view with a specified view.</summary>
            <param name="target">The view to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.View.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.ObjectType">
            <summary>Returns ObjectType.View</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.SchemaBound">
            <summary>True if the view is schema bound.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.QuotedIdentifierOn">
            <summary>True if the view was created with <em>quoted identifiers on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.AnsiNullsOn">
            <summary>True if the view was created with <em>ansi nulls on.</em></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.Text">
            <summary>The text of the view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.Encrypted">
            <summary>Identifies whether the view is encrypted.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Views">
            <summary>A collection of views.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Views.SerializeItem(RedGate.SQLCompare.Engine.View,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Views.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ViewsAndTables">
            <summary>
            A collection of Views and Tables.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ViewsAndTables.GetKey(RedGate.SQLCompare.Engine.ViewTableSuperClass)">
            <summary>
            For internal use.
            </summary>
            <param name="vtsc">For internal use</param>
            <returns>For internal use</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextChangeTracking">
            <summary>
            The type of change tracking applied to the full text index on a view or table.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextChangeTracking.Off">
            <summary>
            Change tracking is disabled.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextChangeTracking.Manual">
            <summary>
            The change tracking log is propagated manually
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextChangeTracking.Auto">
            <summary>
            The full text index is updated automatically.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextStoplistType">
            <summary>
            The stoplist used by the full text index on a view or table.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextStoplistType.None">
            <summary>No stoplist is used for the fulltext index.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextStoplistType.System">
            <summary>The system stoplist is used.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextStoplistType.UserDefined">
            <summary>A user-defined stoplist is used.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Work">
            <summary>Used to calculate the work to be done to synchronize databases.</summary>
            <remarks>
                The Work class is used to convert a set of <see cref="T:RedGate.SQLCompare.Engine.Differences"/> into an
                <see cref="P:RedGate.SQLCompare.Engine.Work.ExecutionBlock"/> containing SQL script, which can be used to
                synchronize two databases. It also provides <see cref="P:RedGate.SQLCompare.Engine.Work.Warnings"/> and
                <see cref="P:RedGate.SQLCompare.Engine.Work.Messages"/> about the work to be done. 
                <para>
            		<see cref="M:RedGate.SQLCompare.Engine.Work.ScriptObject(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)"/> can be used to generate scripts for individual
                    database objects.
                </para>
            	<para>Note that you should not re-use a Work object; you should re-create a new
                object every time.</para>
            </remarks>
            <example>
                This example shows how to compare and synchronize two databases. 
                <code lang="CS">
            Database db1=new Database();
            Database db2=new Database();
             
            db1.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
            db2.Register(new ConnectionProperties(".", "WidgetProduction"), Options.Default);
             
            Differences differences=db1.CompareWith(db2, Options.Default);
             
            foreach (Difference difference in differences)
            {
                //make sure the difference is selected so it is included in the synchronization
                difference.Selected=true;
            }
             
            Work work=new Work();
             
            //calculate the work to do using sensible default options
            //the script is to be run on WidgetProduction so the runOnTwo parameter is true
            work.BuildFromDifferences(differences, Options.Default, true);
             
            //we can now access the messages and warnings
             
            Console.WriteLine("Messages:");
             
            foreach (Message message in work.Messages)
            {
                Console.WriteLine(message.Text);
            }
             
            Console.WriteLine("Warnings:");
             
            foreach (Message message in work.Warnings)
            {
                Console.WriteLine(message.Text);
            }
             
            //print out the SQL used to synchronize
             
            ExecutionBlock block=work.ExecutionBlock;
             
            Console.WriteLine("SQL to synchronize:");
             
            Console.WriteLine(block.GetString());
             
            //and run the SQL
             
            RedGate.Shared.Sql.ExecutionBlock.BlockExecutor executor=new RedGate.Shared.Sql.ExecutionBlock.BlockExecutor();
            executor.ExecuteBlock(block, ".", "WidgetProduction");
             
            //dispose of the objects
            block.Dispose();
            db1.Dispose();
            db2.Dispose();
                </code>
            	<code lang="VB">
            Dim db1 As Database = New Database()
            Dim db2 As Database = New Database()
             
             
            db1.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
            db2.Register(New ConnectionProperties(".", "WidgetProduction"), Options.Default)
             
            Dim differences As Differences = db1.CompareWith(db2, Options.Default)
             
            Dim difference As Difference
             
            For Each difference In differences
                'make sure the difference is selected so it is included in the synchronization
                difference.Selected = True
            Next
             
            Dim work As Work = New Work()
             
            'calculate the work to do using sensible default options
            'the script is to be run on WidgetProduction so the runOnTwo parameter is true
             
            work.BuildFromDifferences(differences, Options.Default, True)
             
            'we can now access the messages and warnings
             
            Console.WriteLine("Messages:")
             
            Dim message As Message
             
            For Each message In work.Messages
                Console.WriteLine(message.Text)
            Next
             
            Console.WriteLine("Warnings:")
             
            For Each message In work.Warnings
                Console.WriteLine(message.Text)
            Next
             
             
            'print out the SQL used to synchronize
             
            Dim block As ExecutionBlock = work.ExecutionBlock
             
            Console.WriteLine("SQL to synchronize:")
             
            Console.WriteLine(block.GetString())
             
            'and run the SQL
             
            Dim executor As BlockExecutor = New BlockExecutor
             
            executor.ExecuteBlock(block, ".", "WidgetProduction")
             
            'dispose of the objects
            block.Dispose()
            db1.Dispose()
            db2.Dispose()
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddPrintStatement(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options,System.String)">
            <summary>
            Add PRINT statement with plumbing!. 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="message"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>Build the work object from a set of differences. 
            Use this method when synchronizing to a live database.</summary>
            <param name="differences">The differences to use.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions)">
            <summary>Build the work object from a set of differences. It sets the ScriptSynchronizationActions 
            property to include the synchronization actions for modifying a scripts folder. 
            Use this method when synchronizing to a scripts folder.</summary>
            <param name="differences">The differences to use.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <param name="writeToFileOptions">Options that sepcify how files are to be created when 
            synchronizing to a scripts folder.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SetImplicitlySelectedDifferences(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            For internal use only.
            </summary>
            <param name="differences">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SetDifferenceImpliciteness``1(RedGate.SQLCompare.Engine.Differences,System.Collections.Generic.IEnumerable{``0},System.Converter{``0,RedGate.SQLCompare.Engine.IDatabaseObject})">
            <summary>
            Marks differences to the selectedDiffs hashtable if an object in collection is part of the difference.
            The difference is marked with "true" if it has been explicitly selected, and with false, if the selection
            is implicit.
            </summary>
            <param name="differences"></param>
            <param name="collection"></param>
            <param name="getDifferenceObject"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Builds the work object from an individual difference. It sets the ExecutionBlock 
            property to include the script for synchronization. Use this method 
            when synchronizing to a live database.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.MapDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference@,System.Boolean)">
            <summary>
            Creates a new Differences object based on the owner mappings in the original Differences
            using the DatabaseMapper to rename schema objects to the mapped owner names in the source database.
            </summary>
            <param name="origDiffs"></param>
            <param name="onlyDiffToInclude"></param>
            <param name="runOnTwo"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions)">
            <summary>
            Builds the work object from an individual difference. It sets the ScriptSynchronizationActions 
            property to include the synchronization actions for modifying a scripts folder.
            Use this method when synchronizing to a scripts folder.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <param name="writeToFileOptions">Options that sepcify how files are to be created when 
            synchronizing to a scripts folder.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.ScriptObject(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Returns the script necessary to create a SQL object.</summary>
            <remarks>
            This creates SQL code used to create an object such as a table, view, or stored
            procedure.
            </remarks>
            <example>
            	<code lang="CS">
            Database db=new Database();
             
            db.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             
            Work work=new Work();
             
            //get the script for an object
            Regions regions=work.ScriptObject(db.Tables[0], Options.Default);
             
            Console.WriteLine("SQL script:\n{0}", regions.ToString());
             
            db.Dispose();
                </code>
            	<code lang="VB">
            Dim db As New Database()
             
            db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             
            Dim work As New Work()
             
            'get the script for an object
             
            Dim regions As Regions = work.ScriptObject(db.Tables(0), Options.Default)
             
            Console.WriteLine("SQL script:")
            Console.WriteLine("{0}", regions.ToString())
             
            'dispose
            db.Dispose()
                </code>
            </example>
            <returns>A <see cref="T:RedGate.SQLCompare.Engine.Regions">Regions</see> collection containing batches of SQL script.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CancelOperation">
            <summary>Cancels the current operation.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.OnStatus(RedGate.Shared.Utils.StatusEventArgs)">
            <summary>
            Fires the Status event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.EstimateTotalWorkEntryCount(RedGate.SQLCompare.Engine.Options)">
            <summary>
            Estimates the number of operations that will be done during a work. This includes the
            sums of the que contents.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.ProcessDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            This is the first stage of the main work, in which the necessary work is determined.
            This can only be used internally!
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SanitizeQueues(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Sanitizes queues, removes duplicate entries that need to be rebuild and modified.
            </summary>
            <param name="options"></param>
            <param name="database"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.GetNonPrimaryFileGroupsFromTables(System.Boolean)">
            <summary>
            Retruns a string that contains the non-primary filegroup names from the tables that are 
            in the table queues (rebuild and create). 
            </summary>
            <param name="caseSensitive">case sensitiveness</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.GetNonPrimaryFileGroupsFromYukonObjects(System.Boolean)">
            <summary>
            Retruns a string that contains the non-primary filegroup names from the queues and partition schemes.
            </summary>
            <param name="caseSensitive">case sensitiveness</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddDependency``1(System.Collections.Generic.IDictionary{``0,RedGate.Shared.Utils.Collections.Set{RedGate.SQLCompare.Engine.Difference}},``0,RedGate.SQLCompare.Engine.Difference)">
            <summary>
            Add the specified dependency to the <paramref name="dependencies"/> collection for later processing.
            </summary>
            <param name="dependencies"></param>
            <param name="dependencyName"></param>
            <param name="dependedOnBy"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWork(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            This calculates the work that needs to be done during a synchronization.
            </summary>
            <param name="differences"></param>
            <param name="options"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForDBSysObjects(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Sets the dependency for objects whose dependency is stored in the main dependency
            matrix. These are mainly objects that are sysobjects identifyables.
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetTypeDependencyForTablesAndFunctions(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Make sure that all the user defined types that tables, functions, sprocs reference are included.
            This must be done after functions and tables are selected as dependencies.
            </summary>
            <param name="differences"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyToUDTs(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Make sure that tables are marked as depending on CLR UDTs
            </summary>
            <param name="differences"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForUDTs(RedGate.SQLCompare.Engine.Differences,System.Boolean,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Make sure that all user defined types of assemblies that are selected as dependencies are also
            selected as dependencies.
            </summary>
            <param name="differences"></param>
            <param name="runOnTwo"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForMessageTypes(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all xml schemacollections are marked as dependents for message types!
            Note, that this must be called after the message types are selected for dependencies!
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForPartitionSchemes(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all Partition Functions are marked as dependents for partition schemes, and
            then all partition schemes are marked as dependents for partition 
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForPartitionFunctions(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Make sure that all tables are marked as dependents for partition functions (through the schemes)!
            This must be run after all the partition functions are selected as dependencies.
            </summary>
            <param name="differences"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForToAssemblies(RedGate.SQLCompare.Engine.Differences,System.Boolean,System.Boolean)">
            <summary>
            Make sure that all assemblies are marked as dependents for CLR UDTs, storedProcedures, ....!
            Note, that this must be called after UDTs are selected for dependencies!
            </summary>
            <param name="differences"></param>
            <returns>True, if an assembly has been added as a new dependency.</returns>
            <param name="runOnTwo"></param>
            <param name="doTriggers"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForContracts(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all message types are marked as dependents for contracts!
            Note, that this must be called after the contracts are selected for dependencies! 
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForQueues(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all stored procedures are marked as dependents for queues!
            Note, that this must be called after queues are selected for dependencies! :(
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForServices(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all contracts and queues are marked as dependents for services!
            Note, that this must be called after services are selected for dependencies! 
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForEventNotifications(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that the relevant service and queue are marked as dependents for event notifications.
            Note, that this must be called after event notifications are selected for dependencies!
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForUsers(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Sets user dependencies.
            This should be at the end, after other dependencies have been selected.
            </summary>
            <param name="differences"></param>
            <param name="options"></param>
            <param name="runOnTwo"></param>
            <param name="masterDatabase"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateDifference(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Fills the action queues to make the target database the same as the master.
            </summary>
            <param name="differences"></param>
            <param name="difference"></param>
            <param name="options"></param>
            <param name="runOnTwo"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateDifference(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean,System.Boolean)">
            <summary>
            Fills the action queues to make the target database the same as the master.
            </summary>
            <param name="differences"></param>
            <param name="difference"></param>
            <param name="options"></param>
            <param name="runOnTwo"></param>
            <param name="forceRebuildCheck"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWork(RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.Options)">
            <summary>
            This is used only when nodependencies are selected!
            </summary>
            <param name="partitionFunction"></param>
            <param name="targetPartitionFunction"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWork(RedGate.SQLCompare.Engine.PartitionScheme,RedGate.SQLCompare.Engine.PartitionScheme,RedGate.SQLCompare.Engine.Options)">
            <summary>
            This should only be used if dependencies are not followed! If dependencies are included, then
            the only way we modify partitions schemes is through the partition functions.
            </summary>
            <param name="partitionScheme"></param>
            <param name="targetPartitionScheme"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkTableCheckComputedRebuilds(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Fields,System.Boolean)">
            <summary>
            Rebuild fields that are computed and reference a field that needs to be dropped/rebuilt.
            </summary>
            <param name="table"></param>
            <param name="targetTable"></param>
            <param name="fieldsToAdd"></param>
            <param name="fieldsToDrop"></param>
            <param name="fieldsToModify"></param>
            <param name="mustRebuild"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkTableCheckMustRebuildForDefaultsAndNulls(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Fields)">
            <summary>
            If it can't take nulls and doesn't have a default constraint on
            it then we need to rebuild the table and warn the user
            
            Need to rebuild even if a default (sp_bindefault) is bound to it
            </summary>
            <param name="table"></param>
            <param name="fieldsToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkTableColumnsTryAlter(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Need to go through the fields to drop and the fields to add
            to see if some can actually be handled by renaming the column
            </summary>
            <param name="targetTable"></param>
            <param name="fieldsToAdd"></param>
            <param name="fieldsToDrop"></param>
            <param name="fieldsToRename"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkTableForeignKeys(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="targetTable"></param>
            <param name="targetDatabase"></param>
            <param name="options"></param>
            <param name="needToForceTableBodyAlter">Used when the target is a scripts folder. This
            forces many extra creates for the implicit fks.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkTableIndexes(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <param name="targetTable"></param>
            <param name="targetDatabase"></param>
            <param name="fieldsToModify"></param>
            <param name="options"></param>
            <param name="needToForceTableBodyAlter">Used for script targets, if set, it creates 
            indexes that while are the same, were inlined.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.DropSchemaBindings(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.Options)">
            <summary>
            for a specific table it adds the dependent schema bound functions and views
            to the SchemaBindingsToUnbind queue
            </summary>
            <param name="targetTableOrView"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.DropSchemaBindings(RedGate.SQLCompare.Engine.Function,RedGate.SQLCompare.Engine.Options)">
            <summary>
            For a specific function it adds the dependent schema bound functions
            to the SchemaBindingsToUnbind queue
            </summary>
            <param name="functionBase"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.PrepareTableForDrop(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Table is marked for drop, DropSchemaBindings, FullTextDrops, FiledsForDrop
            </summary>
            <param name="table"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddTriggersConstraintsAndIndexes(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Adds triggers and indexes to the queues in case of a table create or a table rebuild.
            </summary>
            <param name="table"></param>
            <param name="targetDatabase"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.PrepareMessageTypeForDropOrRebuild(RedGate.SQLCompare.Engine.MessageType,RedGate.SQLCompare.Engine.MessageType,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Adds a message type to the drop queue, and if needed it adds all its dependants as well.
            </summary>
            <param name="messageType"></param>
            <param name="options"></param>
            <param name="targetMessageType"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.PrepareAssemblyForDropOrRebuild(RedGate.SQLCompare.Engine.ClrAssembly,RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Adds an assembly to the drop queue, and if needed it adds all its dependants as well.
            </summary>
            <param name="targetAssembly"></param>
            <param name="differences"></param>
            <param name="masterDatabase"></param>
            <param name="options"></param>
            <param name="rebuild"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateNecessaryWorkForRebuild(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options)">
            <summary>
            for table rebuilds
            </summary>
            <param name="table"></param>
            <param name="targetTable"></param>
            <param name="options"></param>
            <param name="masterDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddDependencies(System.Collections.Generic.IEnumerable{System.Int32},RedGate.SQLCompare.Engine.Difference,System.Collections.Generic.IDictionary{System.Int32,RedGate.SQLCompare.Engine.Difference})">
            <summary>
            Marks differences in lookup identified by the idsToAdd list as selectedAsDependency.
            </summary>
            <param name="idsToAdd"></param>
            <param name="dependedOnBy"></param>
            <param name="lookup"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddDependentViews(System.Collections.Generic.IEnumerable{System.Int32},RedGate.SQLCompare.Engine.Difference,System.Collections.Generic.IDictionary{System.Int32,RedGate.SQLCompare.Engine.Difference})">
            <summary>
            Marks differences in lookup identified by the idsToAdd list as selectedAsDependency. This considers
            views only!
            </summary>
            <param name="idsToAdd"></param>
            <param name="dependedOn"></param>
            <param name="lookup"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddDependentViewsAndSynonyms(System.Collections.Generic.IEnumerable{System.Int32},RedGate.SQLCompare.Engine.Difference,System.Collections.Generic.IDictionary{System.Int32,RedGate.SQLCompare.Engine.Difference})">
            <summary>
            Marks differences in lookup identified by the idsToAdd list as selectedAsDependency. This considers
            views and synonyms only!
            </summary>
            <param name="idsToAdd"></param>
            <param name="dependedOn"></param>
            <param name="lookup"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.GetIdFromObject(RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            The sysobject identifyer of the object, or 0 of it is not sysobject identifyable.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.GenerateSql(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            This is the second stage of the main work, in which the SQL is generated for the synchronization.
            This can only be used internally.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCheckConstraintsAndForeignKeysCreate(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Prereqisite: CreateIndexes
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFulltextCatalogCreateAndActivateAndSetIndexing(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Fulltext: create catalogs, adding full text indexing to tables, columns, and activating it.
            Note that for Yukon this is still NOT transactional (as oposed to its documentation!)
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFulltextStoplistCreate(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Create fulltext stoplists.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildTablesUnbindFromClrUdtsAndPartitionSchemes(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Unbinds tables from CLR UDTs and from partition schemes that need to be reworked.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.RebuildSql2(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options)">
            <summary>
            This unbinds CLR types from tables by using the ToString Method. This is only used 
            when the # option is enabled.
            </summary>
            <param name="block"></param>
            <param name="table"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildExtendedPropertiesAltersCreates(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            This clearly must be run after all the extended property supporting objects are created/alterer(rebuilt).
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCoreObjectsRebuilds(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates and alters tables, views, stored procedures, synonyms and functions in the order of
            their dependencies.
            Prerequisites: BuildUdtsRebind
            
            </summary>
            <param name="options"></param>
            <param name="onlyDifferenceToInclude"></param>
            <param name="database"></param>
            <param name="targetDatabase"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.DoCoreObjectsCreateAlterRebuilds(RedGate.SQLCompare.Engine.WorkItems,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{RedGate.SQLCompare.Engine.FieldBinding}},System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Indexes},RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Does the core object creates/rebuilds.
            </summary>
            <param name="bigList"></param>
            <param name="block"></param>
            <param name="options"></param>
            <param name="temporaryDefaultBindings"></param>
            <param name="indexArrays"></param>
            <param name="targetDatabase"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCoreObjectsCreatesAndAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Difference,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Creates and alters tables, views, stored procedures, synonyms and functions in the order of
            their dependencies.
            Prerequisites: BuildUdtsRebind
            
            </summary>
            <param name="options"></param>
            <param name="onlyDifferenceToInclude"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
            <param name="masterDatabase"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCoreObjectsDrops(RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Database,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            This drops views, tables, stored procedures and functions in a dependecny created order.
            
            Before we can drop or alter tables we need to remove schema bindings from any bound objects
            </summary>
            <param name="onlyDifferenceToInclude"></param>
            <param name="targetDatabase"></param>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildComputedColumnsDrops(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops computed columns
            
            Before we can alter any functions, we need to drop
            any computed columns that reference the functions
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildBindablesUnbinds(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Unbinds defaults and rules from columns and types.
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildIndexesDrops(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops indexes.
            First clustered nonclustered indexes, then clustered ones.
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildIndexesXmlSpatialDrops(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops xml indexes.
            These must be dropped before primary keys are dropped.
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCheckConstraintsAndKeysDrops(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops check constraints, primary keys and unique indexes
            
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildForeignKeysDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter)">
            <summary>
            Drops foreign keys
            Prerequisites:
            Must be done before primary keys are dropped!
            </summary>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="block"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildExtendedPropertiesDrops(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops extended properties.
            Prerequisites: 
            These must bu dropped before tables, procedures, ... are dropped! 
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFulltextCatalogDrops(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drop fulltext catalogs
            Prerequisite: DropFulltextFromTablesAndColumns
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFulltextCatalogAlters(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters fulltext catalogs
            Prerequisite: create users, Note the this IS transactional!
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFulltextDropFromTablesAndColumns(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drop full text information from columns, fulltext from tables
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildTriggersCreate(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Prerequisite: trigger alter (reason trigger order conflicts otherwise).
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPermissionsRestore(RedGate.SQLCompare.Engine.Options,RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Restores the permissions of objects that were rebuilt
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildUdtsRebind(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            If we have modified user defined types then we need
            to make sure that table columns which we have unbound from them are correct again.		
            Note that we also need to re-add the ROWGUIDCOL property if appropriate.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="database"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildDefaultsCreate(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Note: set quoted identifiers off for the creation of defaults
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildRolesAlterMembership(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            This adds and removes role members.
            Note that sp_addrolemember is not transactional, even in SQL Server 2005. This makes sense, of course ;)
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildRolesAlterAuthorization(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            This alters the roles owner. This is transactional in 2005, and makes no sense in 2k.
            This also alters the default schema for application roles.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSchemaBindingsUnbind(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Unbinds schemabindings.
            Prerequisite:
            Note: This must be done before we can drop or alter tables!
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="database"></param>
            <param name="targetDatabase"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildUdtsUnbind(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Unbinding user defined data types.
             
            We might need to drop user defined types later on, for later modification.
            Before we can do this, we need to unbind them from any tables	
            
            Note that columns cannot be altered if ROWGUIDCOLs are bound to them
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="targetDatabase"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildUsersDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops users.
            Prerequisite: ?
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildUsersCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates users.
            Prerequisites: -
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildUsersAlter(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters users' default schemata.
            Prerequisites: -
            Note that this is Yukon dependent!
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSchemasCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates schemas.
            Prerequisites: users (needed for authorization)
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSchemasAlter(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters schemas.
            Prerequisites: users (needed for authorization)
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSchemasDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops schemas.
            Prerequisite: users
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSynonymsDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the synonyms. This should be run before synonyms are added, since there are no alter synonyms, 
            thus alters are replaced with drop creates. Note: target must be Yukon!
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildXmlSchemaCollectionsDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops xml schema collections.
            Prerequisites: drop message types, table unbind, procs, functions drop/rebuild initiated, 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="targetDatabase"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildXmlSchemaCollectionsCreate(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates xml schema collections. 
            Prerequisites: users create/alter
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildXmlSchemaCollectionsAlter(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters xml schema collections. 
            Note that this alter only includes adding xml schemata to collections (this is what 
            T-SQL permits).
            Prerequisites: message types dropped/rebuild initiated.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildClrAssembliesDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Drops clr assembly 
            Prerequisites: clr types are unbound/dropped
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildClrAssembliesCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Creates clr assemblies. 
            Prerequisites: assemblies drop.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="masterDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildClrAssembliesAlter(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Creates clr assemblies. 
            Prerequisites: Dependent tables, procs, functions, ddlTriggers, triggers, drop/unbind
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="masterDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildMessageTypesCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the message types.
            Prerequisites: create xmlSchemaCollections 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildMessageTypesDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the message types. This should be run before message types are added. 
            Prerequisites: BuildContractsDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCertificatesCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the certificates.
            Prerequisites: - 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCertificatesDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the certificates. This should be run before certificates are added. 
            Prerequisites: users drop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSymmetricKeysCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the symmetric keys.
            Prerequisites: - 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSymmetricKeysDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the symmetric keys. This should be run before symmetric keys are added. 
            Prerequisites: users drop 
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildAsymmetricKeysCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the asymmetric keys.
            Prerequisites: - 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildAsymmetricKeysDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the asymmetric keys. This should be run before asymmetric keys are added. 
            Prerequisites: users drop 
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildDdlTriggersCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates ddl triggers.
            Prerequisites: version, assemblies, UDTs, drop ddl triggers 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildDdlTriggersDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the ddl triggers. 
            Prerequisites: version
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildDdlTriggersAlter(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters ddl triggers.
            Prerequisites: version, assemblies, UDTs, drop ddl triggers 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildDisableDdlTriggers(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Disables ddl triggers.
            Prerequisites: version
            Note that it should be transactional
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildReenableDdlTriggers(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Reenables ddl triggers.
            Prerequisites: version
            Note that it should be transactional
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="masterDatabase"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildContractsCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the contracts.
            Prerequisites: create xmlSchemaCollections, BuildMessageTypesCreate 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildContractsDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the contracts. This should be run before contracts are added. 
            Prerequisites: BuildContractsCreate, BuildServicesDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildContractsAlter(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters contracts. Note that this is only authorization change.
            Prerequisites: BuildServicesDrop 
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildQueuesCreate(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the queues.
            Prerequisites: ...
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildQueuesDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the queues. 
            Prerequisites: BuildServicesDrop, BuildEventNotificationsDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildQueuesAlter(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alter the queues. Queues created.
            Prerequisites: BuildServicesDrop 
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServicesCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the services.
            Prerequisites: BuildContractsCreate, BuildQueuesCreate
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServicesDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the Services. 
            Prerequisites: RoutesDrop, EventNotificationsDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServicesAlter(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters the Services. 
            Prerequisites: Contracts alter/create, queues alter/create
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServiceBindingsCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the service bindings.
            Prerequisites: 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServiceBindingsDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the ServiceBindings.
            Prerequisites: 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServiceBindingsAlter(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters the ServiceBindings. 
            Prerequisites: users should be created
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildEventNotificationsCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the event notifications.
            Prerequisites: create xmlSchemaCollections , assembly, service, contract, message type, xmlSchemaCollection
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildEventNotificationsDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the event notifications. This should be run before event notifications are added. 
            Prerequisites: -
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildRoutesCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates routes.
            Prerequisites: advised? : create xmlSchemaCollections , assembly, service, contract, message type, xmlSchemaCollection
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildRoutesDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops routes. This should be run before event routes are added. 
            Prerequisites: -
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildRoutesAlter(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters routes. This should be run before event routes are added. 
            Prerequisites: -
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPartitionFunctionsCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates partition functions. 
            Prerequisites: -
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPartitionFunctionsDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops partition functions.  
            Prerequisites: BuildPartitionSchemesDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPartitionFunctionsAlter(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters partition functions. This should be run before partition functions are added. 
            Prerequisites: partition schema drops, partition schema alters?
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPartitionSchemesCreate(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,System.Boolean)">
            <summary>
            Creates partition schemes. 
            Prerequisites: PartitionFunctions
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="singleDiff"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPartitionSchemesDrop(RedGate.Shared.SQL.ExecutionBlock.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,System.Boolean)">
            <summary>
            Drops partition schemes.  
            Prerequisites: BuildPartitionSchemesDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="singleDiff">It is a single difference</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AlterSQL(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.View,RedGate.SQLCompare.Engine.Options)">
            <summary>
            
            </summary>
            <param name="block"></param>
            <param name="view"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AlterTriggerSQL(RedGate.Shared.SQL.ExecutionBlock.IBlockWriter,RedGate.SQLCompare.Engine.Trigger,RedGate.SQLCompare.Engine.Options,System.Boolean,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="block"></param>
            <param name="trigger"></param>
            <param name="options"></param>
            <param name="stage1">indicates whether we are doing blankin trigger order, or the second
            stage, i.e. setting first and lasts.</param>
            <param name="triggerOrderReset">
            If true, this trigger has been altered, so its order information
            has been lost and needs to be reset.
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.GenerateFolderSynchronizationActions(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions)">
            <summary>
            This is the second stage of the main work, in which the scripts folder rewrite is generated for the synchronization.
            This can only be used internally.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <param name="wtf">Options to control how the script files are saved.</param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SyncToScriptBuildServicesAlter(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Alters the Services. 
            Prerequisites: Contracts alter/create, queues alter/create
            </summary>
            <param name="wtf"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SyncToScriptBuildBindablesUnbinds(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Unbinds defaults and rules from columns and types.
            </summary>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="targetDatabase"></param>
            <param name="wtf"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SyncToScriptBuildFulltextDropFromTablesAndColumns(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Drop full text information from columns, fulltext from tables
            </summary>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="wtf"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SyncToScriptBuildFulltextCatalogCreateAndActivateAndSetIndexing(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Fulltext: create catalogs, adding full text indexing to tables, columns, and activating it.
            Note that for Yukon this is still NOT transactional (as oposed to its documentation!)
            </summary>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="targetDatabase"></param>
            <param name="wtf"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SyncToScriptAddObjectRewrite(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSource,System.String,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Generates the rewrite for dropping a database object (or part of it).
            It also adds this to the relevant file rewrites.
            </summary>
            <param name="ss"></param>
            <param name="rewriteText"></param>
            <param name="options"></param>
            <param name="wtf"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SyncToScriptCreates(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ReadFromFolder.WriteToFileOptions)">
            <summary>
            Handles all the create objects when syncing against a folder.
            </summary>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="masterDatabase"></param>
            <param name="targetDatabase"></param>
            <param name="wtf"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.ExecutionBlock">
            <summary>A block of SQL batches containing SQL script for synchronization.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.CanRollBackOnFailure">
            <summary>True if the transaction can be completely rolled back on failure.</summary>
            <remarks>
            Some synchronization commands, such as full-text operations, cannot be included
            within transactions. If a script fails, these operations cannot be rolled back.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.Messages">
            <summary>Informational messages about the work to be done.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.Warnings">
            <summary>Warnings about the work to be done.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.Dependencies">
            <summary>
            The dependencies selected for the current Work. Populated during <see cref="M:RedGate.SQLCompare.Engine.Work.ProcessDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)"/>.
            Dictionary is of &lt;dependent object, objects depending on it&gt;.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.Status">
            <summary>The event handler for status events.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.ScriptSynchronizationActions">
            <summary>
            The script synchronization actions that will be performed during the synchronization.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WorkType.Refresh">
            <summary>Refresh (sp_refresh for views).</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WorkType.Rename">
            <summary>
            Rename an item. This is used by the refactroign tool.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.WorkItem">
            <summary>
            Summary description for WorkItem.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.WorkItems">
            <summary>
            Summary description for WorkItems.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.WorkResult">
            <summary>
            This class encapsulates the parts that constitute the result of the Work class.
            This includes the execution bloc, and the relevant messages and warnings.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.WorkResult.#ctor">
            <summary>
            Constructs a work result.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.WorkResult.ExecutionBlock">
            <summary>
            Access to the execution block (scripts for synchronization).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.WorkResult.Messages">
            <summary>
            Access to Messages.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.WorkResult.Warnings">
            <summary>
            Access to the warning messages.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.XmlSchemaCollection">
            <summary>An XML schema collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollection.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the schema collections are identical; otherwise
            <em>false.</em>
            </returns>
            <summary>Compares the schema collection with a specified schema collection.</summary>
            <param name="targetObject">The schema collection to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollection.GetIncrementalSchemaDifferences(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Returns the extra schemata that are not in the target schema collection.
            If the operation is not defined, i.e. the target schema is not a subset
            of the source schema collection, then null is returned (not exception, this is faster :).
            </summary>
            <param name="targetObject">The schema collection to compare with</param>
            <param name="options">Comparison options</param>
            <returns>true or false</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollection.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.ObjectType">
            <summary>Returns ObjectType.XmlSchemaCollection</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.Permissions">
            <summary>
            The permissions on this xml schema collection.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.Contents">
            <summary>
            The raw schema data.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.MessageTypes">
            <summary>
            The dependent message types.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.DependentFields">
            <summary>
            The dependent database columns.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.DependentStoredProcedures">
            <summary>
            The dependent stored procedures.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.DependentFunctions">
            <summary>
            The dependent functions.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.AuthType">
            <summary>
            Returns the object type that should be used for ALTER AUTHORIZATION statements on the object.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.XmlSchemaCollections">
            <summary>A collection of XML schema collections.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.SerializeItem(RedGate.SQLCompare.Engine.XmlSchemaCollection,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.PatchUpAfterDeserialization(RedGate.SQLCompare.Engine.Database)">
            <summary>
            Must be run before table patch up!
            </summary>
            <param name="database"></param>
        </member>
    </members>
</doc>
